// Generated from ./grammar3rd.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import grammar3rdListener from './grammar3rdListener.js';
const serializedATN = [4, 1, 135, 1424, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
    7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12,
    2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2,
    20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27,
    7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7,
    34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
    2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2,
    49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56,
    7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7,
    63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70,
    2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2,
    78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85,
    7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7,
    92, 2, 93, 7, 93, 2, 94, 7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7, 99,
    2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 104, 7, 104, 2, 105, 7, 105,
    2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7, 108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111,
    2, 112, 7, 112, 2, 113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7, 117,
    2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2, 122, 7, 122, 2, 123, 7, 123,
    2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7, 126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129,
    2, 130, 7, 130, 2, 131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7, 135,
    2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2, 140, 7, 140, 2, 141, 7, 141,
    2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7, 144, 2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147,
    2, 148, 7, 148, 2, 149, 7, 149, 2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7, 153,
    2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2, 157, 7, 157, 2, 158, 7, 158, 2, 159, 7, 159,
    2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7, 162, 2, 163, 7, 163, 2, 164, 7, 164, 2, 165, 7, 165,
    2, 166, 7, 166, 2, 167, 7, 167, 2, 168, 7, 168, 2, 169, 7, 169, 2, 170, 7, 170, 2, 171, 7, 171,
    2, 172, 7, 172, 2, 173, 7, 173, 2, 174, 7, 174, 2, 175, 7, 175, 2, 176, 7, 176, 2, 177, 7, 177,
    2, 178, 7, 178, 2, 179, 7, 179, 2, 180, 7, 180, 2, 181, 7, 181, 2, 182, 7, 182, 2, 183, 7, 183,
    2, 184, 7, 184, 2, 185, 7, 185, 2, 186, 7, 186, 2, 187, 7, 187, 2, 188, 7, 188, 2, 189, 7, 189,
    2, 190, 7, 190, 2, 191, 7, 191, 2, 192, 7, 192, 2, 193, 7, 193, 2, 194, 7, 194, 2, 195, 7, 195,
    2, 196, 7, 196, 2, 197, 7, 197, 2, 198, 7, 198, 2, 199, 7, 199, 1, 0, 1, 0, 1, 0, 4, 0, 404, 8, 0,
    11, 0, 12, 0, 405, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 3, 5, 419, 8, 5, 1,
    5, 1, 5, 1, 5, 3, 5, 424, 8, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1,
    7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 3, 8, 444, 8, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 4, 11,
    453, 8, 11, 11, 11, 12, 11, 454, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1,
    15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 472, 8, 15, 1, 16, 3, 16, 475, 8, 16, 1, 16, 3, 16, 478,
    8, 16, 1, 16, 1, 16, 1, 17, 1, 17, 3, 17, 484, 8, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19, 3, 19,
    492, 8, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 21, 4, 21, 499, 8, 21, 11, 21, 12, 21, 500, 1, 22, 1, 22,
    1, 22, 1, 22, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 5, 24, 512, 8, 24, 10, 24, 12, 24, 515, 9, 24, 1,
    25, 1, 25, 3, 25, 519, 8, 25, 1, 26, 1, 26, 3, 26, 523, 8, 26, 1, 27, 4, 27, 526, 8, 27, 11, 27, 12,
    27, 527, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 536, 8, 28, 1, 28, 3, 28, 539, 8, 28, 1,
    29, 1, 29, 1, 29, 3, 29, 544, 8, 29, 1, 30, 1, 30, 3, 30, 548, 8, 30, 1, 31, 1, 31, 1, 31, 1, 31, 1,
    32, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 35, 1, 35,
    1, 35, 3, 35, 570, 8, 35, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36,
    1, 36, 3, 36, 584, 8, 36, 1, 37, 1, 37, 3, 37, 588, 8, 37, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 40,
    1, 40, 3, 40, 597, 8, 40, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 3, 42, 607, 8, 42,
    1, 43, 1, 43, 1, 43, 5, 43, 612, 8, 43, 10, 43, 12, 43, 615, 9, 43, 1, 44, 1, 44, 1, 44, 1, 44, 1,
    44, 1, 45, 1, 45, 1, 45, 3, 45, 625, 8, 45, 1, 46, 1, 46, 3, 46, 629, 8, 46, 1, 47, 1, 47, 1, 47, 1,
    47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 3, 48, 641, 8, 48, 1, 48, 1, 48, 1, 48, 1, 48, 3, 48,
    647, 8, 48, 1, 48, 1, 48, 1, 48, 3, 48, 652, 8, 48, 1, 49, 1, 49, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51,
    5, 51, 661, 8, 51, 10, 51, 12, 51, 664, 9, 51, 1, 52, 1, 52, 3, 52, 668, 8, 52, 1, 53, 1, 53, 1, 53,
    1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 678, 8, 53, 1, 54, 1, 54, 1, 54, 5, 54, 683, 8, 54, 10, 54,
    12, 54, 686, 9, 54, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 58, 1,
    58, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 707, 8, 59, 1, 59, 1, 59, 1, 59, 1, 59,
    1, 59, 1, 59, 1, 59, 3, 59, 716, 8, 59, 1, 60, 1, 60, 1, 60, 3, 60, 721, 8, 60, 3, 60, 723, 8, 60,
    1, 61, 1, 61, 1, 61, 1, 62, 1, 62, 3, 62, 730, 8, 62, 1, 62, 1, 62, 1, 62, 3, 62, 735, 8, 62, 1, 62,
    1, 62, 3, 62, 739, 8, 62, 1, 62, 3, 62, 742, 8, 62, 1, 62, 1, 62, 1, 62, 3, 62, 747, 8, 62, 1, 62,
    1, 62, 3, 62, 751, 8, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 3, 62, 759, 8, 62, 1, 62, 1, 62,
    1, 62, 1, 62, 1, 62, 1, 62, 3, 62, 767, 8, 62, 1, 62, 3, 62, 770, 8, 62, 3, 62, 772, 8, 62, 1, 63,
    1, 63, 1, 64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 66, 5, 66, 785, 8, 66, 10, 66, 12,
    66, 788, 9, 66, 1, 67, 1, 67, 3, 67, 792, 8, 67, 1, 68, 1, 68, 1, 68, 3, 68, 797, 8, 68, 1, 68, 1,
    68, 1, 69, 1, 69, 1, 69, 3, 69, 804, 8, 69, 1, 69, 5, 69, 807, 8, 69, 10, 69, 12, 69, 810, 9, 69,
    1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 3, 70, 820, 8, 70, 1, 71, 1, 71, 1, 71, 1, 71,
    1, 71, 1, 71, 3, 71, 828, 8, 71, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73,
    3, 73, 840, 8, 73, 1, 73, 3, 73, 843, 8, 73, 3, 73, 845, 8, 73, 1, 74, 1, 74, 1, 75, 1, 75, 1, 75,
    1, 76, 1, 76, 1, 76, 5, 76, 855, 8, 76, 10, 76, 12, 76, 858, 9, 76, 1, 77, 1, 77, 3, 77, 862, 8, 77,
    1, 78, 1, 78, 1, 78, 1, 78, 1, 79, 1, 79, 1, 79, 5, 79, 871, 8, 79, 10, 79, 12, 79, 874, 9, 79, 1,
    80, 1, 80, 1, 80, 1, 81, 1, 81, 1, 82, 1, 82, 1, 83, 1, 83, 1, 84, 1, 84, 4, 84, 887, 8, 84, 11, 84,
    12, 84, 888, 1, 84, 1, 84, 4, 84, 893, 8, 84, 11, 84, 12, 84, 894, 1, 84, 1, 84, 5, 84, 899, 8, 84,
    10, 84, 12, 84, 902, 9, 84, 3, 84, 904, 8, 84, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 86, 1, 86, 1,
    86, 3, 86, 914, 8, 86, 1, 86, 1, 86, 1, 87, 1, 87, 3, 87, 920, 8, 87, 1, 88, 1, 88, 1, 89, 1, 89, 1,
    89, 1, 89, 1, 89, 1, 89, 1, 89, 1, 89, 1, 89, 1, 89, 1, 89, 3, 89, 935, 8, 89, 1, 90, 1, 90, 1, 91,
    1, 91, 1, 92, 1, 92, 1, 93, 1, 93, 1, 93, 1, 93, 5, 93, 947, 8, 93, 10, 93, 12, 93, 950, 9, 93, 1,
    94, 1, 94, 1, 95, 1, 95, 1, 96, 1, 96, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 3, 97, 964, 8, 97,
    1, 98, 1, 98, 1, 98, 1, 98, 3, 98, 970, 8, 98, 1, 99, 1, 99, 1, 100, 1, 100, 1, 100, 1, 100, 1, 101,
    1, 101, 1, 102, 1, 102, 1, 103, 1, 103, 3, 103, 984, 8, 103, 1, 104, 1, 104, 3, 104, 988, 8, 104,
    1, 105, 1, 105, 1, 105, 1, 106, 1, 106, 1, 106, 1, 106, 1, 107, 1, 107, 1, 108, 1, 108, 1, 108,
    1, 108, 1, 108, 1, 108, 1, 109, 1, 109, 1, 109, 5, 109, 1008, 8, 109, 10, 109, 12, 109, 1011,
    9, 109, 1, 110, 1, 110, 1, 110, 1, 111, 3, 111, 1017, 8, 111, 1, 111, 3, 111, 1020, 8, 111, 1,
    112, 1, 112, 1, 113, 1, 113, 1, 114, 1, 114, 1, 114, 1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 1,
    115, 3, 115, 1035, 8, 115, 1, 116, 1, 116, 1, 117, 1, 117, 1, 118, 1, 118, 1, 119, 1, 119, 1, 119,
    1, 120, 1, 120, 1, 121, 1, 121, 1, 121, 1, 122, 1, 122, 1, 123, 1, 123, 1, 124, 1, 124, 1, 124,
    1, 124, 1, 125, 1, 125, 1, 126, 1, 126, 1, 126, 1, 126, 1, 126, 5, 126, 1066, 8, 126, 10, 126,
    12, 126, 1069, 9, 126, 1, 126, 1, 126, 3, 126, 1073, 8, 126, 1, 127, 1, 127, 1, 127, 1, 127, 1,
    128, 1, 128, 3, 128, 1081, 8, 128, 1, 129, 1, 129, 3, 129, 1085, 8, 129, 1, 130, 1, 130, 1, 130,
    3, 130, 1090, 8, 130, 1, 131, 1, 131, 1, 131, 3, 131, 1095, 8, 131, 1, 131, 3, 131, 1098, 8, 131,
    1, 132, 1, 132, 1, 132, 3, 132, 1103, 8, 132, 1, 133, 1, 133, 3, 133, 1107, 8, 133, 1, 134, 1,
    134, 1, 134, 5, 134, 1112, 8, 134, 10, 134, 12, 134, 1115, 9, 134, 1, 135, 1, 135, 4, 135, 1119,
    8, 135, 11, 135, 12, 135, 1120, 1, 135, 1, 135, 1, 136, 1, 136, 3, 136, 1127, 8, 136, 1, 137,
    1, 137, 4, 137, 1131, 8, 137, 11, 137, 12, 137, 1132, 1, 137, 1, 137, 1, 138, 1, 138, 3, 138,
    1139, 8, 138, 1, 139, 1, 139, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 141, 1, 141, 1, 142, 1,
    142, 1, 143, 1, 143, 5, 143, 1154, 8, 143, 10, 143, 12, 143, 1157, 9, 143, 1, 143, 1, 143, 1,
    144, 1, 144, 3, 144, 1163, 8, 144, 1, 145, 1, 145, 3, 145, 1167, 8, 145, 1, 146, 1, 146, 1, 146,
    1, 146, 1, 146, 1, 147, 1, 147, 1, 147, 1, 147, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148,
    1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 3, 148, 1190, 8, 148, 1, 149, 1, 149, 3, 149, 1194,
    8, 149, 1, 150, 1, 150, 1, 150, 1, 150, 1, 151, 1, 151, 3, 151, 1202, 8, 151, 1, 152, 1, 152, 3,
    152, 1206, 8, 152, 1, 153, 1, 153, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 5, 154,
    1217, 8, 154, 10, 154, 12, 154, 1220, 9, 154, 1, 154, 1, 154, 1, 155, 1, 155, 1, 155, 1, 156,
    1, 156, 1, 156, 5, 156, 1230, 8, 156, 10, 156, 12, 156, 1233, 9, 156, 1, 157, 1, 157, 1, 157,
    1, 158, 1, 158, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 160, 1, 160, 1, 160, 1, 160, 5, 160,
    1249, 8, 160, 10, 160, 12, 160, 1252, 9, 160, 1, 160, 1, 160, 1, 161, 1, 161, 1, 161, 1, 161,
    1, 161, 3, 161, 1261, 8, 161, 1, 162, 1, 162, 1, 163, 1, 163, 3, 163, 1267, 8, 163, 1, 164, 1,
    164, 1, 165, 1, 165, 1, 165, 1, 165, 1, 166, 1, 166, 1, 166, 1, 167, 1, 167, 1, 168, 1, 168, 1,
    168, 1, 168, 5, 168, 1284, 8, 168, 10, 168, 12, 168, 1287, 9, 168, 1, 168, 1, 168, 1, 169, 1,
    169, 1, 169, 3, 169, 1294, 8, 169, 1, 170, 1, 170, 1, 171, 1, 171, 1, 172, 1, 172, 1, 172, 3, 172,
    1303, 8, 172, 1, 173, 1, 173, 1, 174, 1, 174, 1, 175, 1, 175, 1, 176, 1, 176, 3, 176, 1313, 8,
    176, 1, 177, 3, 177, 1316, 8, 177, 1, 177, 1, 177, 1, 178, 4, 178, 1321, 8, 178, 11, 178, 12,
    178, 1322, 1, 179, 1, 179, 1, 179, 1, 179, 5, 179, 1329, 8, 179, 10, 179, 12, 179, 1332, 9, 179,
    1, 179, 1, 179, 1, 180, 1, 180, 1, 180, 3, 180, 1339, 8, 180, 1, 181, 1, 181, 1, 181, 1, 181, 1,
    182, 1, 182, 1, 183, 1, 183, 1, 184, 3, 184, 1350, 8, 184, 1, 184, 3, 184, 1353, 8, 184, 1, 184,
    3, 184, 1356, 8, 184, 1, 185, 4, 185, 1359, 8, 185, 11, 185, 12, 185, 1360, 1, 186, 1, 186, 3,
    186, 1365, 8, 186, 1, 187, 1, 187, 1, 188, 1, 188, 1, 188, 1, 189, 1, 189, 1, 189, 1, 189, 1, 189,
    1, 190, 1, 190, 3, 190, 1379, 8, 190, 1, 191, 1, 191, 1, 191, 1, 191, 1, 191, 1, 191, 1, 191, 1,
    191, 1, 191, 1, 192, 1, 192, 1, 193, 1, 193, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 1, 194, 3,
    194, 1400, 8, 194, 1, 195, 1, 195, 3, 195, 1404, 8, 195, 1, 196, 1, 196, 1, 196, 1, 196, 1, 196,
    5, 196, 1411, 8, 196, 10, 196, 12, 196, 1414, 9, 196, 1, 196, 1, 196, 1, 197, 1, 197, 1, 198,
    1, 198, 1, 199, 1, 199, 1, 199, 0, 0, 200, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,
    30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76,
    78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118,
    120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154,
    156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190,
    192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226,
    228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262,
    264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298,
    300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334,
    336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370,
    372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 0, 5, 1, 0, 130, 132,
    2, 0, 96, 97, 105, 105, 3, 0, 22, 22, 76, 76, 92, 92, 1, 0, 130, 131, 2, 0, 116, 116, 118, 118,
    1377, 0, 403, 1, 0, 0, 0, 2, 407, 1, 0, 0, 0, 4, 409, 1, 0, 0, 0, 6, 411, 1, 0, 0, 0, 8, 413, 1, 0, 0,
    0, 10, 415, 1, 0, 0, 0, 12, 427, 1, 0, 0, 0, 14, 434, 1, 0, 0, 0, 16, 441, 1, 0, 0, 0, 18, 445, 1, 0,
    0, 0, 20, 447, 1, 0, 0, 0, 22, 452, 1, 0, 0, 0, 24, 456, 1, 0, 0, 0, 26, 458, 1, 0, 0, 0, 28, 463, 1,
    0, 0, 0, 30, 471, 1, 0, 0, 0, 32, 474, 1, 0, 0, 0, 34, 481, 1, 0, 0, 0, 36, 487, 1, 0, 0, 0, 38, 489,
    1, 0, 0, 0, 40, 495, 1, 0, 0, 0, 42, 498, 1, 0, 0, 0, 44, 502, 1, 0, 0, 0, 46, 506, 1, 0, 0, 0, 48, 508,
    1, 0, 0, 0, 50, 518, 1, 0, 0, 0, 52, 522, 1, 0, 0, 0, 54, 525, 1, 0, 0, 0, 56, 535, 1, 0, 0, 0, 58, 543,
    1, 0, 0, 0, 60, 547, 1, 0, 0, 0, 62, 549, 1, 0, 0, 0, 64, 553, 1, 0, 0, 0, 66, 557, 1, 0, 0, 0, 68, 561,
    1, 0, 0, 0, 70, 569, 1, 0, 0, 0, 72, 583, 1, 0, 0, 0, 74, 587, 1, 0, 0, 0, 76, 589, 1, 0, 0, 0, 78, 592,
    1, 0, 0, 0, 80, 596, 1, 0, 0, 0, 82, 598, 1, 0, 0, 0, 84, 606, 1, 0, 0, 0, 86, 608, 1, 0, 0, 0, 88, 616,
    1, 0, 0, 0, 90, 624, 1, 0, 0, 0, 92, 628, 1, 0, 0, 0, 94, 630, 1, 0, 0, 0, 96, 651, 1, 0, 0, 0, 98, 653,
    1, 0, 0, 0, 100, 655, 1, 0, 0, 0, 102, 657, 1, 0, 0, 0, 104, 667, 1, 0, 0, 0, 106, 677, 1, 0, 0, 0,
    108, 679, 1, 0, 0, 0, 110, 687, 1, 0, 0, 0, 112, 692, 1, 0, 0, 0, 114, 694, 1, 0, 0, 0, 116, 697,
    1, 0, 0, 0, 118, 715, 1, 0, 0, 0, 120, 722, 1, 0, 0, 0, 122, 724, 1, 0, 0, 0, 124, 771, 1, 0, 0, 0,
    126, 773, 1, 0, 0, 0, 128, 775, 1, 0, 0, 0, 130, 778, 1, 0, 0, 0, 132, 781, 1, 0, 0, 0, 134, 791,
    1, 0, 0, 0, 136, 793, 1, 0, 0, 0, 138, 800, 1, 0, 0, 0, 140, 819, 1, 0, 0, 0, 142, 827, 1, 0, 0, 0,
    144, 829, 1, 0, 0, 0, 146, 844, 1, 0, 0, 0, 148, 846, 1, 0, 0, 0, 150, 848, 1, 0, 0, 0, 152, 851,
    1, 0, 0, 0, 154, 861, 1, 0, 0, 0, 156, 863, 1, 0, 0, 0, 158, 867, 1, 0, 0, 0, 160, 875, 1, 0, 0, 0,
    162, 878, 1, 0, 0, 0, 164, 880, 1, 0, 0, 0, 166, 882, 1, 0, 0, 0, 168, 903, 1, 0, 0, 0, 170, 905,
    1, 0, 0, 0, 172, 910, 1, 0, 0, 0, 174, 919, 1, 0, 0, 0, 176, 921, 1, 0, 0, 0, 178, 934, 1, 0, 0, 0,
    180, 936, 1, 0, 0, 0, 182, 938, 1, 0, 0, 0, 184, 940, 1, 0, 0, 0, 186, 942, 1, 0, 0, 0, 188, 951,
    1, 0, 0, 0, 190, 953, 1, 0, 0, 0, 192, 955, 1, 0, 0, 0, 194, 963, 1, 0, 0, 0, 196, 969, 1, 0, 0, 0,
    198, 971, 1, 0, 0, 0, 200, 973, 1, 0, 0, 0, 202, 977, 1, 0, 0, 0, 204, 979, 1, 0, 0, 0, 206, 983,
    1, 0, 0, 0, 208, 987, 1, 0, 0, 0, 210, 989, 1, 0, 0, 0, 212, 992, 1, 0, 0, 0, 214, 996, 1, 0, 0, 0,
    216, 998, 1, 0, 0, 0, 218, 1004, 1, 0, 0, 0, 220, 1012, 1, 0, 0, 0, 222, 1016, 1, 0, 0, 0, 224, 1021,
    1, 0, 0, 0, 226, 1023, 1, 0, 0, 0, 228, 1025, 1, 0, 0, 0, 230, 1034, 1, 0, 0, 0, 232, 1036, 1, 0,
    0, 0, 234, 1038, 1, 0, 0, 0, 236, 1040, 1, 0, 0, 0, 238, 1042, 1, 0, 0, 0, 240, 1045, 1, 0, 0, 0,
    242, 1047, 1, 0, 0, 0, 244, 1050, 1, 0, 0, 0, 246, 1052, 1, 0, 0, 0, 248, 1054, 1, 0, 0, 0, 250,
    1058, 1, 0, 0, 0, 252, 1060, 1, 0, 0, 0, 254, 1074, 1, 0, 0, 0, 256, 1080, 1, 0, 0, 0, 258, 1082,
    1, 0, 0, 0, 260, 1089, 1, 0, 0, 0, 262, 1091, 1, 0, 0, 0, 264, 1102, 1, 0, 0, 0, 266, 1106, 1, 0,
    0, 0, 268, 1108, 1, 0, 0, 0, 270, 1116, 1, 0, 0, 0, 272, 1126, 1, 0, 0, 0, 274, 1128, 1, 0, 0, 0,
    276, 1138, 1, 0, 0, 0, 278, 1140, 1, 0, 0, 0, 280, 1142, 1, 0, 0, 0, 282, 1147, 1, 0, 0, 0, 284,
    1149, 1, 0, 0, 0, 286, 1151, 1, 0, 0, 0, 288, 1162, 1, 0, 0, 0, 290, 1166, 1, 0, 0, 0, 292, 1168,
    1, 0, 0, 0, 294, 1173, 1, 0, 0, 0, 296, 1189, 1, 0, 0, 0, 298, 1193, 1, 0, 0, 0, 300, 1195, 1, 0,
    0, 0, 302, 1201, 1, 0, 0, 0, 304, 1205, 1, 0, 0, 0, 306, 1207, 1, 0, 0, 0, 308, 1209, 1, 0, 0, 0,
    310, 1223, 1, 0, 0, 0, 312, 1226, 1, 0, 0, 0, 314, 1234, 1, 0, 0, 0, 316, 1237, 1, 0, 0, 0, 318,
    1239, 1, 0, 0, 0, 320, 1244, 1, 0, 0, 0, 322, 1260, 1, 0, 0, 0, 324, 1262, 1, 0, 0, 0, 326, 1266,
    1, 0, 0, 0, 328, 1268, 1, 0, 0, 0, 330, 1270, 1, 0, 0, 0, 332, 1274, 1, 0, 0, 0, 334, 1277, 1, 0,
    0, 0, 336, 1279, 1, 0, 0, 0, 338, 1293, 1, 0, 0, 0, 340, 1295, 1, 0, 0, 0, 342, 1297, 1, 0, 0, 0,
    344, 1302, 1, 0, 0, 0, 346, 1304, 1, 0, 0, 0, 348, 1306, 1, 0, 0, 0, 350, 1308, 1, 0, 0, 0, 352,
    1312, 1, 0, 0, 0, 354, 1315, 1, 0, 0, 0, 356, 1320, 1, 0, 0, 0, 358, 1324, 1, 0, 0, 0, 360, 1335,
    1, 0, 0, 0, 362, 1340, 1, 0, 0, 0, 364, 1344, 1, 0, 0, 0, 366, 1346, 1, 0, 0, 0, 368, 1349, 1, 0,
    0, 0, 370, 1358, 1, 0, 0, 0, 372, 1364, 1, 0, 0, 0, 374, 1366, 1, 0, 0, 0, 376, 1368, 1, 0, 0, 0,
    378, 1371, 1, 0, 0, 0, 380, 1378, 1, 0, 0, 0, 382, 1380, 1, 0, 0, 0, 384, 1389, 1, 0, 0, 0, 386,
    1391, 1, 0, 0, 0, 388, 1393, 1, 0, 0, 0, 390, 1403, 1, 0, 0, 0, 392, 1405, 1, 0, 0, 0, 394, 1417,
    1, 0, 0, 0, 396, 1419, 1, 0, 0, 0, 398, 1421, 1, 0, 0, 0, 400, 404, 3, 10, 5, 0, 401, 404, 3, 12,
    6, 0, 402, 404, 3, 14, 7, 0, 403, 400, 1, 0, 0, 0, 403, 401, 1, 0, 0, 0, 403, 402, 1, 0, 0, 0, 404,
    405, 1, 0, 0, 0, 405, 403, 1, 0, 0, 0, 405, 406, 1, 0, 0, 0, 406, 1, 1, 0, 0, 0, 407, 408, 7, 0, 0,
    0, 408, 3, 1, 0, 0, 0, 409, 410, 5, 133, 0, 0, 410, 5, 1, 0, 0, 0, 411, 412, 5, 133, 0, 0, 412, 7,
    1, 0, 0, 0, 413, 414, 3, 2, 1, 0, 414, 9, 1, 0, 0, 0, 415, 416, 3, 16, 8, 0, 416, 418, 5, 102, 0, 0,
    417, 419, 3, 30, 15, 0, 418, 417, 1, 0, 0, 0, 418, 419, 1, 0, 0, 0, 419, 420, 1, 0, 0, 0, 420, 421,
    5, 1, 0, 0, 421, 423, 5, 42, 0, 0, 422, 424, 3, 32, 16, 0, 423, 422, 1, 0, 0, 0, 423, 424, 1, 0, 0,
    0, 424, 425, 1, 0, 0, 0, 425, 426, 5, 31, 0, 0, 426, 11, 1, 0, 0, 0, 427, 428, 3, 16, 8, 0, 428, 429,
    5, 124, 0, 0, 429, 430, 5, 1, 0, 0, 430, 431, 5, 42, 0, 0, 431, 432, 3, 354, 177, 0, 432, 433, 5,
    31, 0, 0, 433, 13, 1, 0, 0, 0, 434, 435, 3, 16, 8, 0, 435, 436, 5, 121, 0, 0, 436, 437, 5, 1, 0, 0,
    437, 438, 5, 42, 0, 0, 438, 439, 3, 368, 184, 0, 439, 440, 5, 31, 0, 0, 440, 15, 1, 0, 0, 0, 441,
    443, 3, 8, 4, 0, 442, 444, 3, 18, 9, 0, 443, 442, 1, 0, 0, 0, 443, 444, 1, 0, 0, 0, 444, 17, 1, 0,
    0, 0, 445, 446, 3, 20, 10, 0, 446, 19, 1, 0, 0, 0, 447, 448, 5, 6, 0, 0, 448, 449, 3, 22, 11, 0, 449,
    450, 5, 7, 0, 0, 450, 21, 1, 0, 0, 0, 451, 453, 3, 24, 12, 0, 452, 451, 1, 0, 0, 0, 453, 454, 1, 0,
    0, 0, 454, 452, 1, 0, 0, 0, 454, 455, 1, 0, 0, 0, 455, 23, 1, 0, 0, 0, 456, 457, 3, 26, 13, 0, 457,
    25, 1, 0, 0, 0, 458, 459, 3, 4, 2, 0, 459, 460, 5, 10, 0, 0, 460, 461, 3, 28, 14, 0, 461, 462, 5,
    11, 0, 0, 462, 27, 1, 0, 0, 0, 463, 464, 5, 134, 0, 0, 464, 29, 1, 0, 0, 0, 465, 466, 5, 43, 0, 0,
    466, 472, 5, 53, 0, 0, 467, 468, 5, 87, 0, 0, 468, 472, 5, 53, 0, 0, 469, 470, 5, 38, 0, 0, 470,
    472, 5, 53, 0, 0, 471, 465, 1, 0, 0, 0, 471, 467, 1, 0, 0, 0, 471, 469, 1, 0, 0, 0, 472, 31, 1, 0,
    0, 0, 473, 475, 3, 34, 17, 0, 474, 473, 1, 0, 0, 0, 474, 475, 1, 0, 0, 0, 475, 477, 1, 0, 0, 0, 476,
    478, 3, 38, 19, 0, 477, 476, 1, 0, 0, 0, 477, 478, 1, 0, 0, 0, 478, 479, 1, 0, 0, 0, 479, 480, 3,
    54, 27, 0, 480, 33, 1, 0, 0, 0, 481, 483, 5, 47, 0, 0, 482, 484, 3, 36, 18, 0, 483, 482, 1, 0, 0,
    0, 483, 484, 1, 0, 0, 0, 484, 485, 1, 0, 0, 0, 485, 486, 5, 16, 0, 0, 486, 35, 1, 0, 0, 0, 487, 488,
    3, 48, 24, 0, 488, 37, 1, 0, 0, 0, 489, 491, 5, 95, 0, 0, 490, 492, 3, 40, 20, 0, 491, 490, 1, 0,
    0, 0, 491, 492, 1, 0, 0, 0, 492, 493, 1, 0, 0, 0, 493, 494, 5, 16, 0, 0, 494, 39, 1, 0, 0, 0, 495,
    496, 3, 42, 21, 0, 496, 41, 1, 0, 0, 0, 497, 499, 3, 44, 22, 0, 498, 497, 1, 0, 0, 0, 499, 500, 1,
    0, 0, 0, 500, 498, 1, 0, 0, 0, 500, 501, 1, 0, 0, 0, 501, 43, 1, 0, 0, 0, 502, 503, 3, 48, 24, 0, 503,
    504, 5, 63, 0, 0, 504, 505, 3, 46, 23, 0, 505, 45, 1, 0, 0, 0, 506, 507, 3, 8, 4, 0, 507, 47, 1, 0,
    0, 0, 508, 513, 3, 50, 25, 0, 509, 510, 5, 8, 0, 0, 510, 512, 3, 50, 25, 0, 511, 509, 1, 0, 0, 0,
    512, 515, 1, 0, 0, 0, 513, 511, 1, 0, 0, 0, 513, 514, 1, 0, 0, 0, 514, 49, 1, 0, 0, 0, 515, 513, 1,
    0, 0, 0, 516, 519, 3, 52, 26, 0, 517, 519, 3, 330, 165, 0, 518, 516, 1, 0, 0, 0, 518, 517, 1, 0,
    0, 0, 519, 51, 1, 0, 0, 0, 520, 523, 3, 2, 1, 0, 521, 523, 3, 6, 3, 0, 522, 520, 1, 0, 0, 0, 522, 521,
    1, 0, 0, 0, 523, 53, 1, 0, 0, 0, 524, 526, 3, 56, 28, 0, 525, 524, 1, 0, 0, 0, 526, 527, 1, 0, 0, 0,
    527, 525, 1, 0, 0, 0, 527, 528, 1, 0, 0, 0, 528, 55, 1, 0, 0, 0, 529, 536, 3, 66, 33, 0, 530, 536,
    3, 68, 34, 0, 531, 536, 3, 248, 124, 0, 532, 536, 3, 280, 140, 0, 533, 536, 3, 292, 146, 0, 534,
    536, 3, 316, 158, 0, 535, 529, 1, 0, 0, 0, 535, 530, 1, 0, 0, 0, 535, 531, 1, 0, 0, 0, 535, 532,
    1, 0, 0, 0, 535, 533, 1, 0, 0, 0, 535, 534, 1, 0, 0, 0, 536, 538, 1, 0, 0, 0, 537, 539, 5, 128, 0,
    0, 538, 537, 1, 0, 0, 0, 538, 539, 1, 0, 0, 0, 539, 57, 1, 0, 0, 0, 540, 544, 3, 62, 31, 0, 541, 544,
    3, 2, 1, 0, 542, 544, 3, 332, 166, 0, 543, 540, 1, 0, 0, 0, 543, 541, 1, 0, 0, 0, 543, 542, 1, 0,
    0, 0, 544, 59, 1, 0, 0, 0, 545, 548, 3, 64, 32, 0, 546, 548, 3, 6, 3, 0, 547, 545, 1, 0, 0, 0, 547,
    546, 1, 0, 0, 0, 548, 61, 1, 0, 0, 0, 549, 550, 3, 8, 4, 0, 550, 551, 5, 9, 0, 0, 551, 552, 3, 2, 1,
    0, 552, 63, 1, 0, 0, 0, 553, 554, 3, 8, 4, 0, 554, 555, 5, 9, 0, 0, 555, 556, 3, 6, 3, 0, 556, 65,
    1, 0, 0, 0, 557, 558, 3, 2, 1, 0, 558, 559, 5, 1, 0, 0, 559, 560, 3, 70, 35, 0, 560, 67, 1, 0, 0, 0,
    561, 562, 3, 6, 3, 0, 562, 563, 3, 70, 35, 0, 563, 564, 5, 1, 0, 0, 564, 565, 3, 78, 39, 0, 565,
    69, 1, 0, 0, 0, 566, 570, 3, 72, 36, 0, 567, 570, 3, 74, 37, 0, 568, 570, 3, 168, 84, 0, 569, 566,
    1, 0, 0, 0, 569, 567, 1, 0, 0, 0, 569, 568, 1, 0, 0, 0, 570, 71, 1, 0, 0, 0, 571, 584, 3, 106, 53,
    0, 572, 584, 3, 82, 41, 0, 573, 584, 3, 162, 81, 0, 574, 584, 3, 144, 72, 0, 575, 584, 3, 94, 47,
    0, 576, 584, 3, 84, 42, 0, 577, 584, 3, 116, 58, 0, 578, 584, 3, 300, 150, 0, 579, 584, 3, 160,
    80, 0, 580, 584, 3, 114, 57, 0, 581, 584, 3, 118, 59, 0, 582, 584, 3, 142, 71, 0, 583, 571, 1,
    0, 0, 0, 583, 572, 1, 0, 0, 0, 583, 573, 1, 0, 0, 0, 583, 574, 1, 0, 0, 0, 583, 575, 1, 0, 0, 0, 583,
    576, 1, 0, 0, 0, 583, 577, 1, 0, 0, 0, 583, 578, 1, 0, 0, 0, 583, 579, 1, 0, 0, 0, 583, 580, 1, 0,
    0, 0, 583, 581, 1, 0, 0, 0, 583, 582, 1, 0, 0, 0, 584, 73, 1, 0, 0, 0, 585, 588, 3, 58, 29, 0, 586,
    588, 3, 166, 83, 0, 587, 585, 1, 0, 0, 0, 587, 586, 1, 0, 0, 0, 588, 75, 1, 0, 0, 0, 589, 590, 3,
    4, 2, 0, 590, 591, 3, 70, 35, 0, 591, 77, 1, 0, 0, 0, 592, 593, 3, 80, 40, 0, 593, 79, 1, 0, 0, 0,
    594, 597, 3, 112, 56, 0, 595, 597, 3, 92, 46, 0, 596, 594, 1, 0, 0, 0, 596, 595, 1, 0, 0, 0, 597,
    81, 1, 0, 0, 0, 598, 599, 5, 54, 0, 0, 599, 83, 1, 0, 0, 0, 600, 607, 5, 111, 0, 0, 601, 602, 5, 111,
    0, 0, 602, 603, 5, 6, 0, 0, 603, 604, 3, 86, 43, 0, 604, 605, 5, 7, 0, 0, 605, 607, 1, 0, 0, 0, 606,
    600, 1, 0, 0, 0, 606, 601, 1, 0, 0, 0, 607, 85, 1, 0, 0, 0, 608, 613, 3, 88, 44, 0, 609, 610, 5, 8,
    0, 0, 610, 612, 3, 88, 44, 0, 611, 609, 1, 0, 0, 0, 612, 615, 1, 0, 0, 0, 613, 611, 1, 0, 0, 0, 613,
    614, 1, 0, 0, 0, 614, 87, 1, 0, 0, 0, 615, 613, 1, 0, 0, 0, 616, 617, 3, 4, 2, 0, 617, 618, 5, 10,
    0, 0, 618, 619, 3, 90, 45, 0, 619, 620, 5, 11, 0, 0, 620, 89, 1, 0, 0, 0, 621, 625, 5, 134, 0, 0,
    622, 623, 5, 14, 0, 0, 623, 625, 5, 134, 0, 0, 624, 621, 1, 0, 0, 0, 624, 622, 1, 0, 0, 0, 625, 91,
    1, 0, 0, 0, 626, 629, 3, 90, 45, 0, 627, 629, 3, 6, 3, 0, 628, 626, 1, 0, 0, 0, 628, 627, 1, 0, 0,
    0, 629, 93, 1, 0, 0, 0, 630, 631, 5, 35, 0, 0, 631, 632, 5, 6, 0, 0, 632, 633, 3, 96, 48, 0, 633,
    634, 5, 7, 0, 0, 634, 95, 1, 0, 0, 0, 635, 652, 3, 98, 49, 0, 636, 637, 3, 98, 49, 0, 637, 638, 5,
    8, 0, 0, 638, 640, 5, 2, 0, 0, 639, 641, 3, 228, 114, 0, 640, 639, 1, 0, 0, 0, 640, 641, 1, 0, 0,
    0, 641, 652, 1, 0, 0, 0, 642, 643, 3, 98, 49, 0, 643, 644, 5, 8, 0, 0, 644, 646, 5, 2, 0, 0, 645,
    647, 3, 228, 114, 0, 646, 645, 1, 0, 0, 0, 646, 647, 1, 0, 0, 0, 647, 648, 1, 0, 0, 0, 648, 649,
    5, 8, 0, 0, 649, 650, 3, 100, 50, 0, 650, 652, 1, 0, 0, 0, 651, 635, 1, 0, 0, 0, 651, 636, 1, 0, 0,
    0, 651, 642, 1, 0, 0, 0, 652, 97, 1, 0, 0, 0, 653, 654, 3, 102, 51, 0, 654, 99, 1, 0, 0, 0, 655, 656,
    3, 102, 51, 0, 656, 101, 1, 0, 0, 0, 657, 662, 3, 104, 52, 0, 658, 659, 5, 8, 0, 0, 659, 661, 3,
    104, 52, 0, 660, 658, 1, 0, 0, 0, 661, 664, 1, 0, 0, 0, 662, 660, 1, 0, 0, 0, 662, 663, 1, 0, 0, 0,
    663, 103, 1, 0, 0, 0, 664, 662, 1, 0, 0, 0, 665, 668, 3, 4, 2, 0, 666, 668, 3, 88, 44, 0, 667, 665,
    1, 0, 0, 0, 667, 666, 1, 0, 0, 0, 668, 105, 1, 0, 0, 0, 669, 670, 5, 46, 0, 0, 670, 678, 5, 41, 0,
    0, 671, 672, 5, 46, 0, 0, 672, 673, 5, 41, 0, 0, 673, 674, 5, 6, 0, 0, 674, 675, 3, 108, 54, 0, 675,
    676, 5, 7, 0, 0, 676, 678, 1, 0, 0, 0, 677, 669, 1, 0, 0, 0, 677, 671, 1, 0, 0, 0, 678, 107, 1, 0,
    0, 0, 679, 684, 3, 110, 55, 0, 680, 681, 5, 8, 0, 0, 681, 683, 3, 110, 55, 0, 682, 680, 1, 0, 0,
    0, 683, 686, 1, 0, 0, 0, 684, 682, 1, 0, 0, 0, 684, 685, 1, 0, 0, 0, 685, 109, 1, 0, 0, 0, 686, 684,
    1, 0, 0, 0, 687, 688, 3, 4, 2, 0, 688, 689, 5, 10, 0, 0, 689, 690, 5, 134, 0, 0, 690, 691, 5, 11,
    0, 0, 691, 111, 1, 0, 0, 0, 692, 693, 5, 135, 0, 0, 693, 113, 1, 0, 0, 0, 694, 695, 5, 64, 0, 0, 695,
    696, 5, 41, 0, 0, 696, 115, 1, 0, 0, 0, 697, 698, 5, 48, 0, 0, 698, 117, 1, 0, 0, 0, 699, 700, 5,
    25, 0, 0, 700, 701, 5, 6, 0, 0, 701, 716, 5, 7, 0, 0, 702, 703, 5, 25, 0, 0, 703, 704, 5, 6, 0, 0,
    704, 706, 3, 120, 60, 0, 705, 707, 3, 122, 61, 0, 706, 705, 1, 0, 0, 0, 706, 707, 1, 0, 0, 0, 707,
    708, 1, 0, 0, 0, 708, 709, 5, 7, 0, 0, 709, 716, 1, 0, 0, 0, 710, 711, 5, 25, 0, 0, 711, 712, 5, 6,
    0, 0, 712, 713, 3, 124, 62, 0, 713, 714, 5, 7, 0, 0, 714, 716, 1, 0, 0, 0, 715, 699, 1, 0, 0, 0, 715,
    702, 1, 0, 0, 0, 715, 710, 1, 0, 0, 0, 716, 119, 1, 0, 0, 0, 717, 723, 5, 2, 0, 0, 718, 720, 5, 2,
    0, 0, 719, 721, 3, 228, 114, 0, 720, 719, 1, 0, 0, 0, 720, 721, 1, 0, 0, 0, 721, 723, 1, 0, 0, 0,
    722, 717, 1, 0, 0, 0, 722, 718, 1, 0, 0, 0, 723, 121, 1, 0, 0, 0, 724, 725, 5, 8, 0, 0, 725, 726,
    5, 2, 0, 0, 726, 123, 1, 0, 0, 0, 727, 729, 3, 126, 63, 0, 728, 730, 5, 128, 0, 0, 729, 728, 1, 0,
    0, 0, 729, 730, 1, 0, 0, 0, 730, 772, 1, 0, 0, 0, 731, 732, 3, 126, 63, 0, 732, 734, 5, 8, 0, 0, 733,
    735, 5, 128, 0, 0, 734, 733, 1, 0, 0, 0, 734, 735, 1, 0, 0, 0, 735, 736, 1, 0, 0, 0, 736, 738, 3,
    120, 60, 0, 737, 739, 3, 130, 65, 0, 738, 737, 1, 0, 0, 0, 738, 739, 1, 0, 0, 0, 739, 741, 1, 0,
    0, 0, 740, 742, 3, 122, 61, 0, 741, 740, 1, 0, 0, 0, 741, 742, 1, 0, 0, 0, 742, 772, 1, 0, 0, 0, 743,
    744, 3, 126, 63, 0, 744, 746, 5, 8, 0, 0, 745, 747, 5, 128, 0, 0, 746, 745, 1, 0, 0, 0, 746, 747,
    1, 0, 0, 0, 747, 748, 1, 0, 0, 0, 748, 750, 3, 120, 60, 0, 749, 751, 3, 130, 65, 0, 750, 749, 1,
    0, 0, 0, 750, 751, 1, 0, 0, 0, 751, 752, 1, 0, 0, 0, 752, 753, 3, 128, 64, 0, 753, 754, 5, 8, 0, 0,
    754, 755, 3, 126, 63, 0, 755, 772, 1, 0, 0, 0, 756, 758, 3, 120, 60, 0, 757, 759, 3, 130, 65, 0,
    758, 757, 1, 0, 0, 0, 758, 759, 1, 0, 0, 0, 759, 760, 1, 0, 0, 0, 760, 761, 3, 128, 64, 0, 761, 762,
    5, 8, 0, 0, 762, 763, 3, 126, 63, 0, 763, 772, 1, 0, 0, 0, 764, 766, 3, 120, 60, 0, 765, 767, 3,
    130, 65, 0, 766, 765, 1, 0, 0, 0, 766, 767, 1, 0, 0, 0, 767, 769, 1, 0, 0, 0, 768, 770, 3, 122, 61,
    0, 769, 768, 1, 0, 0, 0, 769, 770, 1, 0, 0, 0, 770, 772, 1, 0, 0, 0, 771, 727, 1, 0, 0, 0, 771, 731,
    1, 0, 0, 0, 771, 743, 1, 0, 0, 0, 771, 756, 1, 0, 0, 0, 771, 764, 1, 0, 0, 0, 772, 125, 1, 0, 0, 0,
    773, 774, 3, 138, 69, 0, 774, 127, 1, 0, 0, 0, 775, 776, 5, 8, 0, 0, 776, 777, 5, 2, 0, 0, 777, 129,
    1, 0, 0, 0, 778, 779, 5, 8, 0, 0, 779, 780, 3, 132, 66, 0, 780, 131, 1, 0, 0, 0, 781, 786, 3, 134,
    67, 0, 782, 783, 5, 8, 0, 0, 783, 785, 3, 134, 67, 0, 784, 782, 1, 0, 0, 0, 785, 788, 1, 0, 0, 0,
    786, 784, 1, 0, 0, 0, 786, 787, 1, 0, 0, 0, 787, 133, 1, 0, 0, 0, 788, 786, 1, 0, 0, 0, 789, 792,
    3, 140, 70, 0, 790, 792, 3, 136, 68, 0, 791, 789, 1, 0, 0, 0, 791, 790, 1, 0, 0, 0, 792, 135, 1,
    0, 0, 0, 793, 794, 5, 4, 0, 0, 794, 796, 3, 138, 69, 0, 795, 797, 5, 128, 0, 0, 796, 795, 1, 0, 0,
    0, 796, 797, 1, 0, 0, 0, 797, 798, 1, 0, 0, 0, 798, 799, 5, 5, 0, 0, 799, 137, 1, 0, 0, 0, 800, 808,
    3, 140, 70, 0, 801, 803, 5, 8, 0, 0, 802, 804, 5, 128, 0, 0, 803, 802, 1, 0, 0, 0, 803, 804, 1, 0,
    0, 0, 804, 805, 1, 0, 0, 0, 805, 807, 3, 140, 70, 0, 806, 801, 1, 0, 0, 0, 807, 810, 1, 0, 0, 0, 808,
    806, 1, 0, 0, 0, 808, 809, 1, 0, 0, 0, 809, 139, 1, 0, 0, 0, 810, 808, 1, 0, 0, 0, 811, 820, 3, 76,
    38, 0, 812, 813, 3, 76, 38, 0, 813, 814, 5, 76, 0, 0, 814, 820, 1, 0, 0, 0, 815, 816, 3, 76, 38,
    0, 816, 817, 5, 98, 0, 0, 817, 818, 3, 78, 39, 0, 818, 820, 1, 0, 0, 0, 819, 811, 1, 0, 0, 0, 819,
    812, 1, 0, 0, 0, 819, 815, 1, 0, 0, 0, 820, 141, 1, 0, 0, 0, 821, 822, 5, 25, 0, 0, 822, 823, 5, 68,
    0, 0, 823, 828, 3, 70, 35, 0, 824, 825, 5, 25, 0, 0, 825, 826, 5, 68, 0, 0, 826, 828, 3, 76, 38,
    0, 827, 821, 1, 0, 0, 0, 827, 824, 1, 0, 0, 0, 828, 143, 1, 0, 0, 0, 829, 830, 5, 66, 0, 0, 830, 831,
    5, 6, 0, 0, 831, 832, 3, 146, 73, 0, 832, 833, 5, 7, 0, 0, 833, 145, 1, 0, 0, 0, 834, 845, 3, 148,
    74, 0, 835, 836, 3, 148, 74, 0, 836, 837, 5, 8, 0, 0, 837, 839, 3, 120, 60, 0, 838, 840, 3, 150,
    75, 0, 839, 838, 1, 0, 0, 0, 839, 840, 1, 0, 0, 0, 840, 842, 1, 0, 0, 0, 841, 843, 3, 122, 61, 0,
    842, 841, 1, 0, 0, 0, 842, 843, 1, 0, 0, 0, 843, 845, 1, 0, 0, 0, 844, 834, 1, 0, 0, 0, 844, 835,
    1, 0, 0, 0, 845, 147, 1, 0, 0, 0, 846, 847, 3, 158, 79, 0, 847, 149, 1, 0, 0, 0, 848, 849, 5, 8, 0,
    0, 849, 850, 3, 152, 76, 0, 850, 151, 1, 0, 0, 0, 851, 856, 3, 154, 77, 0, 852, 853, 5, 8, 0, 0,
    853, 855, 3, 154, 77, 0, 854, 852, 1, 0, 0, 0, 855, 858, 1, 0, 0, 0, 856, 854, 1, 0, 0, 0, 856, 857,
    1, 0, 0, 0, 857, 153, 1, 0, 0, 0, 858, 856, 1, 0, 0, 0, 859, 862, 3, 156, 78, 0, 860, 862, 3, 76,
    38, 0, 861, 859, 1, 0, 0, 0, 861, 860, 1, 0, 0, 0, 862, 155, 1, 0, 0, 0, 863, 864, 5, 4, 0, 0, 864,
    865, 3, 158, 79, 0, 865, 866, 5, 5, 0, 0, 866, 157, 1, 0, 0, 0, 867, 872, 3, 76, 38, 0, 868, 869,
    5, 8, 0, 0, 869, 871, 3, 76, 38, 0, 870, 868, 1, 0, 0, 0, 871, 874, 1, 0, 0, 0, 872, 870, 1, 0, 0,
    0, 872, 873, 1, 0, 0, 0, 873, 159, 1, 0, 0, 0, 874, 872, 1, 0, 0, 0, 875, 876, 5, 56, 0, 0, 876, 877,
    5, 83, 0, 0, 877, 161, 1, 0, 0, 0, 878, 879, 3, 164, 82, 0, 879, 163, 1, 0, 0, 0, 880, 881, 7, 1,
    0, 0, 881, 165, 1, 0, 0, 0, 882, 883, 5, 93, 0, 0, 883, 167, 1, 0, 0, 0, 884, 886, 3, 72, 36, 0, 885,
    887, 3, 172, 86, 0, 886, 885, 1, 0, 0, 0, 887, 888, 1, 0, 0, 0, 888, 886, 1, 0, 0, 0, 888, 889, 1,
    0, 0, 0, 889, 904, 1, 0, 0, 0, 890, 892, 3, 74, 37, 0, 891, 893, 3, 172, 86, 0, 892, 891, 1, 0, 0,
    0, 893, 894, 1, 0, 0, 0, 894, 892, 1, 0, 0, 0, 894, 895, 1, 0, 0, 0, 895, 904, 1, 0, 0, 0, 896, 900,
    3, 170, 85, 0, 897, 899, 3, 172, 86, 0, 898, 897, 1, 0, 0, 0, 899, 902, 1, 0, 0, 0, 900, 898, 1,
    0, 0, 0, 900, 901, 1, 0, 0, 0, 901, 904, 1, 0, 0, 0, 902, 900, 1, 0, 0, 0, 903, 884, 1, 0, 0, 0, 903,
    890, 1, 0, 0, 0, 903, 896, 1, 0, 0, 0, 904, 169, 1, 0, 0, 0, 905, 906, 5, 25, 0, 0, 906, 907, 3, 172,
    86, 0, 907, 908, 5, 68, 0, 0, 908, 909, 3, 70, 35, 0, 909, 171, 1, 0, 0, 0, 910, 911, 5, 10, 0, 0,
    911, 913, 3, 174, 87, 0, 912, 914, 3, 228, 114, 0, 913, 912, 1, 0, 0, 0, 913, 914, 1, 0, 0, 0, 914,
    915, 1, 0, 0, 0, 915, 916, 5, 11, 0, 0, 916, 173, 1, 0, 0, 0, 917, 920, 3, 176, 88, 0, 918, 920,
    3, 302, 151, 0, 919, 917, 1, 0, 0, 0, 919, 918, 1, 0, 0, 0, 920, 175, 1, 0, 0, 0, 921, 922, 3, 178,
    89, 0, 922, 177, 1, 0, 0, 0, 923, 935, 3, 180, 90, 0, 924, 925, 3, 180, 90, 0, 925, 926, 5, 8, 0,
    0, 926, 927, 5, 2, 0, 0, 927, 935, 1, 0, 0, 0, 928, 929, 3, 180, 90, 0, 929, 930, 5, 8, 0, 0, 930,
    931, 5, 2, 0, 0, 931, 932, 5, 8, 0, 0, 932, 933, 3, 182, 91, 0, 933, 935, 1, 0, 0, 0, 934, 923, 1,
    0, 0, 0, 934, 924, 1, 0, 0, 0, 934, 928, 1, 0, 0, 0, 935, 179, 1, 0, 0, 0, 936, 937, 3, 184, 92, 0,
    937, 181, 1, 0, 0, 0, 938, 939, 3, 184, 92, 0, 939, 183, 1, 0, 0, 0, 940, 941, 3, 186, 93, 0, 941,
    185, 1, 0, 0, 0, 942, 948, 3, 188, 94, 0, 943, 944, 3, 192, 96, 0, 944, 945, 3, 188, 94, 0, 945,
    947, 1, 0, 0, 0, 946, 943, 1, 0, 0, 0, 947, 950, 1, 0, 0, 0, 948, 946, 1, 0, 0, 0, 948, 949, 1, 0,
    0, 0, 949, 187, 1, 0, 0, 0, 950, 948, 1, 0, 0, 0, 951, 952, 3, 190, 95, 0, 952, 189, 1, 0, 0, 0, 953,
    954, 3, 194, 97, 0, 954, 191, 1, 0, 0, 0, 955, 956, 5, 18, 0, 0, 956, 193, 1, 0, 0, 0, 957, 964,
    3, 196, 98, 0, 958, 964, 3, 298, 149, 0, 959, 960, 5, 10, 0, 0, 960, 961, 3, 184, 92, 0, 961, 962,
    5, 11, 0, 0, 962, 964, 1, 0, 0, 0, 963, 957, 1, 0, 0, 0, 963, 958, 1, 0, 0, 0, 963, 959, 1, 0, 0, 0,
    964, 195, 1, 0, 0, 0, 965, 970, 3, 198, 99, 0, 966, 970, 3, 200, 100, 0, 967, 970, 3, 210, 105,
    0, 968, 970, 3, 212, 106, 0, 969, 965, 1, 0, 0, 0, 969, 966, 1, 0, 0, 0, 969, 967, 1, 0, 0, 0, 969,
    968, 1, 0, 0, 0, 970, 197, 1, 0, 0, 0, 971, 972, 3, 78, 39, 0, 972, 199, 1, 0, 0, 0, 973, 974, 3,
    202, 101, 0, 974, 975, 5, 3, 0, 0, 975, 976, 3, 204, 102, 0, 976, 201, 1, 0, 0, 0, 977, 978, 3,
    206, 103, 0, 978, 203, 1, 0, 0, 0, 979, 980, 3, 208, 104, 0, 980, 205, 1, 0, 0, 0, 981, 984, 3,
    78, 39, 0, 982, 984, 5, 36, 0, 0, 983, 981, 1, 0, 0, 0, 983, 982, 1, 0, 0, 0, 984, 207, 1, 0, 0, 0,
    985, 988, 3, 78, 39, 0, 986, 988, 5, 32, 0, 0, 987, 985, 1, 0, 0, 0, 987, 986, 1, 0, 0, 0, 988, 209,
    1, 0, 0, 0, 989, 990, 5, 37, 0, 0, 990, 991, 3, 172, 86, 0, 991, 211, 1, 0, 0, 0, 992, 993, 5, 109,
    0, 0, 993, 994, 5, 78, 0, 0, 994, 995, 3, 214, 107, 0, 995, 213, 1, 0, 0, 0, 996, 997, 3, 216, 108,
    0, 997, 215, 1, 0, 0, 0, 998, 999, 5, 6, 0, 0, 999, 1000, 5, 2, 0, 0, 1000, 1001, 5, 8, 0, 0, 1001,
    1002, 3, 218, 109, 0, 1002, 1003, 5, 7, 0, 0, 1003, 217, 1, 0, 0, 0, 1004, 1009, 3, 220, 110,
    0, 1005, 1006, 5, 8, 0, 0, 1006, 1008, 3, 220, 110, 0, 1007, 1005, 1, 0, 0, 0, 1008, 1011, 1,
    0, 0, 0, 1009, 1007, 1, 0, 0, 0, 1009, 1010, 1, 0, 0, 0, 1010, 219, 1, 0, 0, 0, 1011, 1009, 1, 0,
    0, 0, 1012, 1013, 3, 4, 2, 0, 1013, 1014, 3, 222, 111, 0, 1014, 221, 1, 0, 0, 0, 1015, 1017, 3,
    224, 112, 0, 1016, 1015, 1, 0, 0, 0, 1016, 1017, 1, 0, 0, 0, 1017, 1019, 1, 0, 0, 0, 1018, 1020,
    3, 226, 113, 0, 1019, 1018, 1, 0, 0, 0, 1019, 1020, 1, 0, 0, 0, 1020, 223, 1, 0, 0, 0, 1021, 1022,
    3, 172, 86, 0, 1022, 225, 1, 0, 0, 0, 1023, 1024, 7, 2, 0, 0, 1024, 227, 1, 0, 0, 0, 1025, 1026,
    5, 19, 0, 0, 1026, 1027, 3, 230, 115, 0, 1027, 229, 1, 0, 0, 0, 1028, 1035, 3, 90, 45, 0, 1029,
    1035, 3, 60, 30, 0, 1030, 1031, 3, 70, 35, 0, 1031, 1032, 5, 15, 0, 0, 1032, 1033, 3, 78, 39,
    0, 1033, 1035, 1, 0, 0, 0, 1034, 1028, 1, 0, 0, 0, 1034, 1029, 1, 0, 0, 0, 1034, 1030, 1, 0, 0,
    0, 1035, 231, 1, 0, 0, 0, 1036, 1037, 7, 3, 0, 0, 1037, 233, 1, 0, 0, 0, 1038, 1039, 3, 2, 1, 0,
    1039, 235, 1, 0, 0, 0, 1040, 1041, 5, 133, 0, 0, 1041, 237, 1, 0, 0, 0, 1042, 1043, 5, 20, 0, 0,
    1043, 1044, 5, 133, 0, 0, 1044, 239, 1, 0, 0, 0, 1045, 1046, 5, 130, 0, 0, 1046, 241, 1, 0, 0,
    0, 1047, 1048, 5, 20, 0, 0, 1048, 1049, 3, 2, 1, 0, 1049, 243, 1, 0, 0, 0, 1050, 1051, 3, 232,
    116, 0, 1051, 245, 1, 0, 0, 0, 1052, 1053, 3, 234, 117, 0, 1053, 247, 1, 0, 0, 0, 1054, 1055,
    3, 232, 116, 0, 1055, 1056, 5, 1, 0, 0, 1056, 1057, 3, 250, 125, 0, 1057, 249, 1, 0, 0, 0, 1058,
    1059, 3, 252, 126, 0, 1059, 251, 1, 0, 0, 0, 1060, 1061, 5, 70, 0, 0, 1061, 1062, 5, 6, 0, 0, 1062,
    1067, 3, 256, 128, 0, 1063, 1064, 5, 8, 0, 0, 1064, 1066, 3, 256, 128, 0, 1065, 1063, 1, 0, 0,
    0, 1066, 1069, 1, 0, 0, 0, 1067, 1065, 1, 0, 0, 0, 1067, 1068, 1, 0, 0, 0, 1068, 1070, 1, 0, 0,
    0, 1069, 1067, 1, 0, 0, 0, 1070, 1072, 5, 7, 0, 0, 1071, 1073, 3, 254, 127, 0, 1072, 1071, 1,
    0, 0, 0, 1072, 1073, 1, 0, 0, 0, 1073, 253, 1, 0, 0, 0, 1074, 1075, 5, 109, 0, 0, 1075, 1076, 5,
    45, 0, 0, 1076, 1077, 3, 270, 135, 0, 1077, 255, 1, 0, 0, 0, 1078, 1081, 3, 258, 129, 0, 1079,
    1081, 3, 262, 131, 0, 1080, 1078, 1, 0, 0, 0, 1080, 1079, 1, 0, 0, 0, 1081, 257, 1, 0, 0, 0, 1082,
    1084, 3, 242, 121, 0, 1083, 1085, 3, 260, 130, 0, 1084, 1083, 1, 0, 0, 0, 1084, 1085, 1, 0, 0,
    0, 1085, 259, 1, 0, 0, 0, 1086, 1090, 5, 76, 0, 0, 1087, 1088, 5, 98, 0, 0, 1088, 1090, 3, 70,
    35, 0, 1089, 1086, 1, 0, 0, 0, 1089, 1087, 1, 0, 0, 0, 1090, 261, 1, 0, 0, 0, 1091, 1092, 3, 238,
    119, 0, 1092, 1094, 3, 70, 35, 0, 1093, 1095, 5, 81, 0, 0, 1094, 1093, 1, 0, 0, 0, 1094, 1095,
    1, 0, 0, 0, 1095, 1097, 1, 0, 0, 0, 1096, 1098, 3, 264, 132, 0, 1097, 1096, 1, 0, 0, 0, 1097, 1098,
    1, 0, 0, 0, 1098, 263, 1, 0, 0, 0, 1099, 1103, 5, 76, 0, 0, 1100, 1101, 5, 98, 0, 0, 1101, 1103,
    3, 78, 39, 0, 1102, 1099, 1, 0, 0, 0, 1102, 1100, 1, 0, 0, 0, 1103, 265, 1, 0, 0, 0, 1104, 1107,
    3, 242, 121, 0, 1105, 1107, 3, 238, 119, 0, 1106, 1104, 1, 0, 0, 0, 1106, 1105, 1, 0, 0, 0, 1107,
    267, 1, 0, 0, 0, 1108, 1113, 3, 266, 133, 0, 1109, 1110, 5, 9, 0, 0, 1110, 1112, 3, 266, 133,
    0, 1111, 1109, 1, 0, 0, 0, 1112, 1115, 1, 0, 0, 0, 1113, 1111, 1, 0, 0, 0, 1113, 1114, 1, 0, 0,
    0, 1114, 269, 1, 0, 0, 0, 1115, 1113, 1, 0, 0, 0, 1116, 1118, 5, 6, 0, 0, 1117, 1119, 3, 272, 136,
    0, 1118, 1117, 1, 0, 0, 0, 1119, 1120, 1, 0, 0, 0, 1120, 1118, 1, 0, 0, 0, 1120, 1121, 1, 0, 0,
    0, 1121, 1122, 1, 0, 0, 0, 1122, 1123, 5, 7, 0, 0, 1123, 271, 1, 0, 0, 0, 1124, 1127, 3, 276, 138,
    0, 1125, 1127, 3, 274, 137, 0, 1126, 1124, 1, 0, 0, 0, 1126, 1125, 1, 0, 0, 0, 1127, 273, 1, 0,
    0, 0, 1128, 1130, 5, 12, 0, 0, 1129, 1131, 3, 272, 136, 0, 1130, 1129, 1, 0, 0, 0, 1131, 1132,
    1, 0, 0, 0, 1132, 1130, 1, 0, 0, 0, 1132, 1133, 1, 0, 0, 0, 1133, 1134, 1, 0, 0, 0, 1134, 1135,
    5, 13, 0, 0, 1135, 275, 1, 0, 0, 0, 1136, 1139, 3, 278, 139, 0, 1137, 1139, 3, 266, 133, 0, 1138,
    1136, 1, 0, 0, 0, 1138, 1137, 1, 0, 0, 0, 1139, 277, 1, 0, 0, 0, 1140, 1141, 3, 240, 120, 0, 1141,
    279, 1, 0, 0, 0, 1142, 1143, 3, 236, 118, 0, 1143, 1144, 3, 244, 122, 0, 1144, 1145, 5, 1, 0,
    0, 1145, 1146, 3, 282, 141, 0, 1146, 281, 1, 0, 0, 0, 1147, 1148, 3, 284, 142, 0, 1148, 283,
    1, 0, 0, 0, 1149, 1150, 3, 286, 143, 0, 1150, 285, 1, 0, 0, 0, 1151, 1155, 5, 6, 0, 0, 1152, 1154,
    3, 288, 144, 0, 1153, 1152, 1, 0, 0, 0, 1154, 1157, 1, 0, 0, 0, 1155, 1153, 1, 0, 0, 0, 1155, 1156,
    1, 0, 0, 0, 1156, 1158, 1, 0, 0, 0, 1157, 1155, 1, 0, 0, 0, 1158, 1159, 5, 7, 0, 0, 1159, 287, 1,
    0, 0, 0, 1160, 1163, 3, 278, 139, 0, 1161, 1163, 3, 290, 145, 0, 1162, 1160, 1, 0, 0, 0, 1162,
    1161, 1, 0, 0, 0, 1163, 289, 1, 0, 0, 0, 1164, 1167, 3, 70, 35, 0, 1165, 1167, 3, 78, 39, 0, 1166,
    1164, 1, 0, 0, 0, 1166, 1165, 1, 0, 0, 0, 1167, 291, 1, 0, 0, 0, 1168, 1169, 3, 234, 117, 0, 1169,
    1170, 3, 244, 122, 0, 1170, 1171, 5, 1, 0, 0, 1171, 1172, 3, 294, 147, 0, 1172, 293, 1, 0, 0,
    0, 1173, 1174, 5, 6, 0, 0, 1174, 1175, 3, 296, 148, 0, 1175, 1176, 5, 7, 0, 0, 1176, 295, 1, 0,
    0, 0, 1177, 1190, 3, 180, 90, 0, 1178, 1179, 3, 180, 90, 0, 1179, 1180, 5, 8, 0, 0, 1180, 1181,
    5, 2, 0, 0, 1181, 1190, 1, 0, 0, 0, 1182, 1190, 5, 2, 0, 0, 1183, 1184, 3, 180, 90, 0, 1184, 1185,
    5, 8, 0, 0, 1185, 1186, 5, 2, 0, 0, 1186, 1187, 5, 8, 0, 0, 1187, 1188, 3, 182, 91, 0, 1188, 1190,
    1, 0, 0, 0, 1189, 1177, 1, 0, 0, 0, 1189, 1178, 1, 0, 0, 0, 1189, 1182, 1, 0, 0, 0, 1189, 1183,
    1, 0, 0, 0, 1190, 297, 1, 0, 0, 0, 1191, 1194, 3, 282, 141, 0, 1192, 1194, 3, 246, 123, 0, 1193,
    1191, 1, 0, 0, 0, 1193, 1192, 1, 0, 0, 0, 1194, 299, 1, 0, 0, 0, 1195, 1196, 3, 244, 122, 0, 1196,
    1197, 5, 9, 0, 0, 1197, 1198, 3, 268, 134, 0, 1198, 301, 1, 0, 0, 0, 1199, 1202, 3, 304, 152,
    0, 1200, 1202, 3, 314, 157, 0, 1201, 1199, 1, 0, 0, 0, 1201, 1200, 1, 0, 0, 0, 1202, 303, 1, 0,
    0, 0, 1203, 1206, 3, 306, 153, 0, 1204, 1206, 3, 308, 154, 0, 1205, 1203, 1, 0, 0, 0, 1205, 1204,
    1, 0, 0, 0, 1206, 305, 1, 0, 0, 0, 1207, 1208, 3, 294, 147, 0, 1208, 307, 1, 0, 0, 0, 1209, 1210,
    5, 6, 0, 0, 1210, 1211, 3, 246, 123, 0, 1211, 1212, 5, 7, 0, 0, 1212, 1213, 5, 6, 0, 0, 1213, 1218,
    3, 310, 155, 0, 1214, 1215, 5, 8, 0, 0, 1215, 1217, 3, 310, 155, 0, 1216, 1214, 1, 0, 0, 0, 1217,
    1220, 1, 0, 0, 0, 1218, 1216, 1, 0, 0, 0, 1218, 1219, 1, 0, 0, 0, 1219, 1221, 1, 0, 0, 0, 1220,
    1218, 1, 0, 0, 0, 1221, 1222, 5, 7, 0, 0, 1222, 309, 1, 0, 0, 0, 1223, 1224, 5, 17, 0, 0, 1224,
    1225, 3, 312, 156, 0, 1225, 311, 1, 0, 0, 0, 1226, 1231, 3, 4, 2, 0, 1227, 1228, 5, 9, 0, 0, 1228,
    1230, 3, 4, 2, 0, 1229, 1227, 1, 0, 0, 0, 1230, 1233, 1, 0, 0, 0, 1231, 1229, 1, 0, 0, 0, 1231,
    1232, 1, 0, 0, 0, 1232, 313, 1, 0, 0, 0, 1233, 1231, 1, 0, 0, 0, 1234, 1235, 5, 86, 0, 0, 1235,
    1236, 3, 70, 35, 0, 1236, 315, 1, 0, 0, 0, 1237, 1238, 3, 318, 159, 0, 1238, 317, 1, 0, 0, 0, 1239,
    1240, 3, 2, 1, 0, 1240, 1241, 3, 320, 160, 0, 1241, 1242, 5, 1, 0, 0, 1242, 1243, 3, 70, 35, 0,
    1243, 319, 1, 0, 0, 0, 1244, 1245, 5, 6, 0, 0, 1245, 1250, 3, 322, 161, 0, 1246, 1247, 5, 8, 0,
    0, 1247, 1249, 3, 322, 161, 0, 1248, 1246, 1, 0, 0, 0, 1249, 1252, 1, 0, 0, 0, 1250, 1248, 1,
    0, 0, 0, 1250, 1251, 1, 0, 0, 0, 1251, 1253, 1, 0, 0, 0, 1252, 1250, 1, 0, 0, 0, 1253, 1254, 5,
    7, 0, 0, 1254, 321, 1, 0, 0, 0, 1255, 1256, 3, 324, 162, 0, 1256, 1257, 5, 15, 0, 0, 1257, 1258,
    3, 328, 164, 0, 1258, 1261, 1, 0, 0, 0, 1259, 1261, 3, 328, 164, 0, 1260, 1255, 1, 0, 0, 0, 1260,
    1259, 1, 0, 0, 0, 1261, 323, 1, 0, 0, 0, 1262, 1263, 3, 326, 163, 0, 1263, 325, 1, 0, 0, 0, 1264,
    1267, 3, 70, 35, 0, 1265, 1267, 3, 244, 122, 0, 1266, 1264, 1, 0, 0, 0, 1266, 1265, 1, 0, 0, 0,
    1267, 327, 1, 0, 0, 0, 1268, 1269, 3, 52, 26, 0, 1269, 329, 1, 0, 0, 0, 1270, 1271, 3, 52, 26,
    0, 1271, 1272, 5, 6, 0, 0, 1272, 1273, 5, 7, 0, 0, 1273, 331, 1, 0, 0, 0, 1274, 1275, 3, 334, 167,
    0, 1275, 1276, 3, 336, 168, 0, 1276, 333, 1, 0, 0, 0, 1277, 1278, 3, 2, 1, 0, 1278, 335, 1, 0,
    0, 0, 1279, 1280, 5, 6, 0, 0, 1280, 1285, 3, 338, 169, 0, 1281, 1282, 5, 8, 0, 0, 1282, 1284,
    3, 338, 169, 0, 1283, 1281, 1, 0, 0, 0, 1284, 1287, 1, 0, 0, 0, 1285, 1283, 1, 0, 0, 0, 1285, 1286,
    1, 0, 0, 0, 1286, 1288, 1, 0, 0, 0, 1287, 1285, 1, 0, 0, 0, 1288, 1289, 5, 7, 0, 0, 1289, 337, 1,
    0, 0, 0, 1290, 1294, 3, 70, 35, 0, 1291, 1294, 3, 78, 39, 0, 1292, 1294, 3, 294, 147, 0, 1293,
    1290, 1, 0, 0, 0, 1293, 1291, 1, 0, 0, 0, 1293, 1292, 1, 0, 0, 0, 1294, 339, 1, 0, 0, 0, 1295, 1296,
    5, 133, 0, 0, 1296, 341, 1, 0, 0, 0, 1297, 1298, 3, 2, 1, 0, 1298, 343, 1, 0, 0, 0, 1299, 1300,
    5, 21, 0, 0, 1300, 1303, 3, 2, 1, 0, 1301, 1303, 3, 2, 1, 0, 1302, 1299, 1, 0, 0, 0, 1302, 1301,
    1, 0, 0, 0, 1303, 345, 1, 0, 0, 0, 1304, 1305, 3, 374, 187, 0, 1305, 347, 1, 0, 0, 0, 1306, 1307,
    3, 340, 170, 0, 1307, 349, 1, 0, 0, 0, 1308, 1309, 3, 342, 171, 0, 1309, 351, 1, 0, 0, 0, 1310,
    1313, 3, 350, 175, 0, 1311, 1313, 3, 396, 198, 0, 1312, 1310, 1, 0, 0, 0, 1312, 1311, 1, 0, 0,
    0, 1313, 353, 1, 0, 0, 0, 1314, 1316, 3, 38, 19, 0, 1315, 1314, 1, 0, 0, 0, 1315, 1316, 1, 0, 0,
    0, 1316, 1317, 1, 0, 0, 0, 1317, 1318, 3, 356, 178, 0, 1318, 355, 1, 0, 0, 0, 1319, 1321, 3, 358,
    179, 0, 1320, 1319, 1, 0, 0, 0, 1321, 1322, 1, 0, 0, 0, 1322, 1320, 1, 0, 0, 0, 1322, 1323, 1,
    0, 0, 0, 1323, 357, 1, 0, 0, 0, 1324, 1325, 5, 115, 0, 0, 1325, 1330, 3, 398, 199, 0, 1326, 1327,
    5, 8, 0, 0, 1327, 1329, 3, 398, 199, 0, 1328, 1326, 1, 0, 0, 0, 1329, 1332, 1, 0, 0, 0, 1330, 1328,
    1, 0, 0, 0, 1330, 1331, 1, 0, 0, 0, 1331, 1333, 1, 0, 0, 0, 1332, 1330, 1, 0, 0, 0, 1333, 1334,
    3, 360, 180, 0, 1334, 359, 1, 0, 0, 0, 1335, 1336, 5, 109, 0, 0, 1336, 1338, 3, 364, 182, 0, 1337,
    1339, 3, 362, 181, 0, 1338, 1337, 1, 0, 0, 0, 1338, 1339, 1, 0, 0, 0, 1339, 361, 1, 0, 0, 0, 1340,
    1341, 5, 114, 0, 0, 1341, 1342, 5, 58, 0, 0, 1342, 1343, 3, 366, 183, 0, 1343, 363, 1, 0, 0, 0,
    1344, 1345, 3, 390, 195, 0, 1345, 365, 1, 0, 0, 0, 1346, 1347, 3, 390, 195, 0, 1347, 367, 1,
    0, 0, 0, 1348, 1350, 3, 34, 17, 0, 1349, 1348, 1, 0, 0, 0, 1349, 1350, 1, 0, 0, 0, 1350, 1352,
    1, 0, 0, 0, 1351, 1353, 3, 38, 19, 0, 1352, 1351, 1, 0, 0, 0, 1352, 1353, 1, 0, 0, 0, 1353, 1355,
    1, 0, 0, 0, 1354, 1356, 3, 370, 185, 0, 1355, 1354, 1, 0, 0, 0, 1355, 1356, 1, 0, 0, 0, 1356, 369,
    1, 0, 0, 0, 1357, 1359, 3, 372, 186, 0, 1358, 1357, 1, 0, 0, 0, 1359, 1360, 1, 0, 0, 0, 1360, 1358,
    1, 0, 0, 0, 1360, 1361, 1, 0, 0, 0, 1361, 371, 1, 0, 0, 0, 1362, 1365, 3, 378, 189, 0, 1363, 1365,
    3, 388, 194, 0, 1364, 1362, 1, 0, 0, 0, 1364, 1363, 1, 0, 0, 0, 1365, 373, 1, 0, 0, 0, 1366, 1367,
    3, 376, 188, 0, 1367, 375, 1, 0, 0, 0, 1368, 1369, 5, 21, 0, 0, 1369, 1370, 5, 126, 0, 0, 1370,
    377, 1, 0, 0, 0, 1371, 1372, 3, 340, 170, 0, 1372, 1373, 3, 346, 173, 0, 1373, 1374, 5, 1, 0,
    0, 1374, 1375, 3, 380, 190, 0, 1375, 379, 1, 0, 0, 0, 1376, 1379, 3, 382, 191, 0, 1377, 1379,
    3, 286, 143, 0, 1378, 1376, 1, 0, 0, 0, 1378, 1377, 1, 0, 0, 0, 1379, 381, 1, 0, 0, 0, 1380, 1381,
    5, 6, 0, 0, 1381, 1382, 7, 4, 0, 0, 1382, 1383, 3, 384, 192, 0, 1383, 1384, 5, 119, 0, 0, 1384,
    1385, 5, 113, 0, 0, 1385, 1386, 5, 123, 0, 0, 1386, 1387, 3, 386, 193, 0, 1387, 1388, 5, 7, 0,
    0, 1388, 383, 1, 0, 0, 0, 1389, 1390, 3, 380, 190, 0, 1390, 385, 1, 0, 0, 0, 1391, 1392, 3, 380,
    190, 0, 1392, 387, 1, 0, 0, 0, 1393, 1394, 3, 342, 171, 0, 1394, 1395, 5, 21, 0, 0, 1395, 1396,
    5, 122, 0, 0, 1396, 1397, 5, 1, 0, 0, 1397, 1399, 3, 390, 195, 0, 1398, 1400, 3, 362, 181, 0,
    1399, 1398, 1, 0, 0, 0, 1399, 1400, 1, 0, 0, 0, 1400, 389, 1, 0, 0, 0, 1401, 1404, 3, 352, 176,
    0, 1402, 1404, 3, 392, 196, 0, 1403, 1401, 1, 0, 0, 0, 1403, 1402, 1, 0, 0, 0, 1404, 391, 1, 0,
    0, 0, 1405, 1406, 5, 6, 0, 0, 1406, 1412, 3, 394, 197, 0, 1407, 1408, 3, 192, 96, 0, 1408, 1409,
    3, 394, 197, 0, 1409, 1411, 1, 0, 0, 0, 1410, 1407, 1, 0, 0, 0, 1411, 1414, 1, 0, 0, 0, 1412, 1410,
    1, 0, 0, 0, 1412, 1413, 1, 0, 0, 0, 1413, 1415, 1, 0, 0, 0, 1414, 1412, 1, 0, 0, 0, 1415, 1416,
    5, 7, 0, 0, 1416, 393, 1, 0, 0, 0, 1417, 1418, 3, 348, 174, 0, 1418, 395, 1, 0, 0, 0, 1419, 1420,
    5, 125, 0, 0, 1420, 397, 1, 0, 0, 0, 1421, 1422, 3, 344, 172, 0, 1422, 399, 1, 0, 0, 0, 121, 403,
    405, 418, 423, 443, 454, 471, 474, 477, 483, 491, 500, 513, 518, 522, 527, 535, 538, 543,
    547, 569, 583, 587, 596, 606, 613, 624, 628, 640, 646, 651, 662, 667, 677, 684, 706, 715,
    720, 722, 729, 734, 738, 741, 746, 750, 758, 766, 769, 771, 786, 791, 796, 803, 808, 819,
    827, 839, 842, 844, 856, 861, 872, 888, 894, 900, 903, 913, 919, 934, 948, 963, 969, 983,
    987, 1009, 1016, 1019, 1034, 1067, 1072, 1080, 1084, 1089, 1094, 1097, 1102, 1106, 1113,
    1120, 1126, 1132, 1138, 1155, 1162, 1166, 1189, 1193, 1201, 1205, 1218, 1231, 1250, 1260,
    1266, 1285, 1293, 1302, 1312, 1315, 1322, 1330, 1338, 1349, 1352, 1355, 1360, 1364, 1378,
    1399, 1403, 1412];
const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new antlr4.dfa.DFA(ds, index));
const sharedContextCache = new antlr4.PredictionContextCache();
export default class grammar3rdParser extends antlr4.Parser {
    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = grammar3rdParser.ruleNames;
        this.literalNames = grammar3rdParser.literalNames;
        this.symbolicNames = grammar3rdParser.symbolicNames;
    }
    get atn() {
        return atn;
    }
    moduleDefinitions() {
        let localctx = new ModuleDefinitionsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 0, grammar3rdParser.RULE_moduleDefinitions);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 403;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 403;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);
                switch (la_) {
                    case 1:
                        this.state = 400;
                        this.moduleDefinition();
                        break;
                    case 2:
                        this.state = 401;
                        this.elmDefinition();
                        break;
                    case 3:
                        this.state = 402;
                        this.edmDefinition();
                        break;
                }
                this.state = 405;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)))) !== 0));
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeReference() {
        let localctx = new TypeReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 2, grammar3rdParser.RULE_typeReference);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 407;
            _la = this._input.LA(1);
            if (!(((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    identifier() {
        let localctx = new IdentifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 4, grammar3rdParser.RULE_identifier);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 409;
            this.match(grammar3rdParser.IdentifierL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    valueReference() {
        let localctx = new ValueReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 6, grammar3rdParser.RULE_valueReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 411;
            this.match(grammar3rdParser.IdentifierL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    moduleReference() {
        let localctx = new ModuleReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 8, grammar3rdParser.RULE_moduleReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 413;
            this.typeReference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    moduleDefinition() {
        let localctx = new ModuleDefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 10, grammar3rdParser.RULE_moduleDefinition);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 415;
            this.moduleIdentifier();
            this.state = 416;
            this.match(grammar3rdParser.DEFINITIONS_LITERAL);
            this.state = 418;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.AUTOMATIC_LITERAL || _la === grammar3rdParser.EXPLICIT_LITERAL || _la === grammar3rdParser.IMPLICIT_LITERAL) {
                this.state = 417;
                this.tagDefault();
            }
            this.state = 420;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 421;
            this.match(grammar3rdParser.BEGIN_LITERAL);
            this.state = 423;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.EXPORTS_LITERAL || _la === grammar3rdParser.IMPORTS_LITERAL || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)))) !== 0)) {
                this.state = 422;
                this.moduleBody();
            }
            this.state = 425;
            this.match(grammar3rdParser.END_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elmDefinition() {
        let localctx = new ElmDefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 12, grammar3rdParser.RULE_elmDefinition);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 427;
            this.moduleIdentifier();
            this.state = 428;
            this.match(grammar3rdParser.LINK_DEFINITIONS_LITERAL);
            this.state = 429;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 430;
            this.match(grammar3rdParser.BEGIN_LITERAL);
            this.state = 431;
            this.elmModuleBody();
            this.state = 432;
            this.match(grammar3rdParser.END_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    edmDefinition() {
        let localctx = new EdmDefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 14, grammar3rdParser.RULE_edmDefinition);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 434;
            this.moduleIdentifier();
            this.state = 435;
            this.match(grammar3rdParser.ENCODING_DEFINITIONS_LITERAL);
            this.state = 436;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 437;
            this.match(grammar3rdParser.BEGIN_LITERAL);
            this.state = 438;
            this.edmModuleBody();
            this.state = 439;
            this.match(grammar3rdParser.END_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    moduleIdentifier() {
        let localctx = new ModuleIdentifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 16, grammar3rdParser.RULE_moduleIdentifier);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 441;
            this.moduleReference();
            this.state = 443;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.L_BRACE) {
                this.state = 442;
                this.definitiveIdentification();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definitiveIdentification() {
        let localctx = new DefinitiveIdentificationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 18, grammar3rdParser.RULE_definitiveIdentification);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 445;
            this.definitiveOid();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definitiveOid() {
        let localctx = new DefinitiveOidContext(this, this._ctx, this.state);
        this.enterRule(localctx, 20, grammar3rdParser.RULE_definitiveOid);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 447;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 448;
            this.definitiveObjIdComponentList();
            this.state = 449;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definitiveObjIdComponentList() {
        let localctx = new DefinitiveObjIdComponentListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 22, grammar3rdParser.RULE_definitiveObjIdComponentList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 452;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 451;
                this.definitiveObjIdComponent();
                this.state = 454;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === grammar3rdParser.IdentifierL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definitiveObjIdComponent() {
        let localctx = new DefinitiveObjIdComponentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 24, grammar3rdParser.RULE_definitiveObjIdComponent);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 456;
            this.definitiveNameAndNumberForm();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definitiveNameAndNumberForm() {
        let localctx = new DefinitiveNameAndNumberFormContext(this, this._ctx, this.state);
        this.enterRule(localctx, 26, grammar3rdParser.RULE_definitiveNameAndNumberForm);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 458;
            this.identifier();
            this.state = 459;
            this.match(grammar3rdParser.L_PAREN);
            this.state = 460;
            this.definitiveNumberForm();
            this.state = 461;
            this.match(grammar3rdParser.R_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definitiveNumberForm() {
        let localctx = new DefinitiveNumberFormContext(this, this._ctx, this.state);
        this.enterRule(localctx, 28, grammar3rdParser.RULE_definitiveNumberForm);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 463;
            this.match(grammar3rdParser.Number);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tagDefault() {
        let localctx = new TagDefaultContext(this, this._ctx, this.state);
        this.enterRule(localctx, 30, grammar3rdParser.RULE_tagDefault);
        try {
            this.state = 471;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.EXPLICIT_LITERAL:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 465;
                    this.match(grammar3rdParser.EXPLICIT_LITERAL);
                    this.state = 466;
                    this.match(grammar3rdParser.TAGS_LITERAL);
                    break;
                case grammar3rdParser.IMPLICIT_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 467;
                    this.match(grammar3rdParser.IMPLICIT_LITERAL);
                    this.state = 468;
                    this.match(grammar3rdParser.TAGS_LITERAL);
                    break;
                case grammar3rdParser.AUTOMATIC_LITERAL:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 469;
                    this.match(grammar3rdParser.AUTOMATIC_LITERAL);
                    this.state = 470;
                    this.match(grammar3rdParser.TAGS_LITERAL);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    moduleBody() {
        let localctx = new ModuleBodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 32, grammar3rdParser.RULE_moduleBody);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 474;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.EXPORTS_LITERAL) {
                this.state = 473;
                this.exports();
            }
            this.state = 477;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.IMPORTS_LITERAL) {
                this.state = 476;
                this.imports();
            }
            this.state = 479;
            this.assignmentList();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    exports() {
        let localctx = new ExportsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 34, grammar3rdParser.RULE_exports);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 481;
            this.match(grammar3rdParser.EXPORTS_LITERAL);
            this.state = 483;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)))) !== 0)) {
                this.state = 482;
                this.symbolsExported();
            }
            this.state = 485;
            this.match(grammar3rdParser.SEMICOLON_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    symbolsExported() {
        let localctx = new SymbolsExportedContext(this, this._ctx, this.state);
        this.enterRule(localctx, 36, grammar3rdParser.RULE_symbolsExported);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 487;
            this.symbolList();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    imports() {
        let localctx = new ImportsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 38, grammar3rdParser.RULE_imports);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 489;
            this.match(grammar3rdParser.IMPORTS_LITERAL);
            this.state = 491;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)))) !== 0)) {
                this.state = 490;
                this.symbolsImported();
            }
            this.state = 493;
            this.match(grammar3rdParser.SEMICOLON_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    symbolsImported() {
        let localctx = new SymbolsImportedContext(this, this._ctx, this.state);
        this.enterRule(localctx, 40, grammar3rdParser.RULE_symbolsImported);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 495;
            this.symbolsFromModuleList();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    symbolsFromModuleList() {
        let localctx = new SymbolsFromModuleListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 42, grammar3rdParser.RULE_symbolsFromModuleList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 498;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 497;
                this.symbolsFromModule();
                this.state = 500;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)))) !== 0));
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    symbolsFromModule() {
        let localctx = new SymbolsFromModuleContext(this, this._ctx, this.state);
        this.enterRule(localctx, 44, grammar3rdParser.RULE_symbolsFromModule);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 502;
            this.symbolList();
            this.state = 503;
            this.match(grammar3rdParser.FROM_LITERAL);
            this.state = 504;
            this.globalModuleReference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    globalModuleReference() {
        let localctx = new GlobalModuleReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 46, grammar3rdParser.RULE_globalModuleReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 506;
            this.moduleReference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    symbolList() {
        let localctx = new SymbolListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 48, grammar3rdParser.RULE_symbolList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 508;
            this.symbol();
            this.state = 513;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 509;
                this.match(grammar3rdParser.COMMA);
                this.state = 510;
                this.symbol();
                this.state = 515;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    symbol() {
        let localctx = new SymbolContext(this, this._ctx, this.state);
        this.enterRule(localctx, 50, grammar3rdParser.RULE_symbol);
        try {
            this.state = 518;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 13, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 516;
                    this.reference();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 517;
                    this.parameterizedReference();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    reference() {
        let localctx = new ReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 52, grammar3rdParser.RULE_reference);
        try {
            this.state = 522;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 520;
                    this.typeReference();
                    break;
                case grammar3rdParser.IdentifierL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 521;
                    this.valueReference();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    assignmentList() {
        let localctx = new AssignmentListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 54, grammar3rdParser.RULE_assignmentList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 525;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 524;
                this.assignment();
                this.state = 527;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)))) !== 0));
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    assignment() {
        let localctx = new AssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 56, grammar3rdParser.RULE_assignment);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 535;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 16, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 529;
                    this.typeAssignment();
                    break;
                case 2:
                    this.state = 530;
                    this.valueAssignment();
                    break;
                case 3:
                    this.state = 531;
                    this.objectClassAssignment();
                    break;
                case 4:
                    this.state = 532;
                    this.objectAssignment();
                    break;
                case 5:
                    this.state = 533;
                    this.objectSetAssignment();
                    break;
                case 6:
                    this.state = 534;
                    this.parameterizedAssignment();
                    break;
            }
            this.state = 538;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.Tag) {
                this.state = 537;
                this.match(grammar3rdParser.Tag);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedType() {
        let localctx = new DefinedTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 58, grammar3rdParser.RULE_definedType);
        try {
            this.state = 543;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 18, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 540;
                    this.externalTypeReference();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 541;
                    this.typeReference();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 542;
                    this.parameterizedTypeAmbiguous();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedValue() {
        let localctx = new DefinedValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 60, grammar3rdParser.RULE_definedValue);
        try {
            this.state = 547;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 545;
                    this.externalValueReference();
                    break;
                case grammar3rdParser.IdentifierL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 546;
                    this.valueReference();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    externalTypeReference() {
        let localctx = new ExternalTypeReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 62, grammar3rdParser.RULE_externalTypeReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 549;
            this.moduleReference();
            this.state = 550;
            this.match(grammar3rdParser.PERIOD);
            this.state = 551;
            this.typeReference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    externalValueReference() {
        let localctx = new ExternalValueReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 64, grammar3rdParser.RULE_externalValueReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 553;
            this.moduleReference();
            this.state = 554;
            this.match(grammar3rdParser.PERIOD);
            this.state = 555;
            this.valueReference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeAssignment() {
        let localctx = new TypeAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 66, grammar3rdParser.RULE_typeAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 557;
            this.typeReference();
            this.state = 558;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 559;
            this.type();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    valueAssignment() {
        let localctx = new ValueAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 68, grammar3rdParser.RULE_valueAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 561;
            this.valueReference();
            this.state = 562;
            this.type();
            this.state = 563;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 564;
            this.value();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    type() {
        let localctx = new TypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 70, grammar3rdParser.RULE_type);
        try {
            this.state = 569;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 20, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 566;
                    this.builtinType();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 567;
                    this.referencedType();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 568;
                    this.constrainedType();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    builtinType() {
        let localctx = new BuiltinTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 72, grammar3rdParser.RULE_builtinType);
        try {
            this.state = 583;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 21, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 571;
                    this.bitStringType();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 572;
                    this.booleanType();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 573;
                    this.characterStringType();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 574;
                    this.choiceType();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 575;
                    this.enumeratedType();
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 576;
                    this.integerType();
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 577;
                    this.nullType();
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 578;
                    this.objectClassFieldType();
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    this.state = 579;
                    this.objectIdentifierType();
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    this.state = 580;
                    this.octetStringType();
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    this.state = 581;
                    this.sequenceType();
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    this.state = 582;
                    this.sequenceOfType();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    referencedType() {
        let localctx = new ReferencedTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 74, grammar3rdParser.RULE_referencedType);
        try {
            this.state = 587;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 585;
                    this.definedType();
                    break;
                case grammar3rdParser.UTCTime_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 586;
                    this.usefulType();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namedType() {
        let localctx = new NamedTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 76, grammar3rdParser.RULE_namedType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 589;
            this.identifier();
            this.state = 590;
            this.type();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    value() {
        let localctx = new ValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 78, grammar3rdParser.RULE_value);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 592;
            this.builtinValue();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    builtinValue() {
        let localctx = new BuiltinValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 80, grammar3rdParser.RULE_builtinValue);
        try {
            this.state = 596;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.Bstring:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 594;
                    this.bitStringValue();
                    break;
                case grammar3rdParser.HYPHEN_MINUS:
                case grammar3rdParser.IdentifierL:
                case grammar3rdParser.Number:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 595;
                    this.integerValue();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    booleanType() {
        let localctx = new BooleanTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 82, grammar3rdParser.RULE_booleanType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 598;
            this.match(grammar3rdParser.BOOLEAN_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    integerType() {
        let localctx = new IntegerTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 84, grammar3rdParser.RULE_integerType);
        try {
            this.state = 606;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 24, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 600;
                    this.match(grammar3rdParser.INTEGER_LITERAL);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 601;
                    this.match(grammar3rdParser.INTEGER_LITERAL);
                    this.state = 602;
                    this.match(grammar3rdParser.L_BRACE);
                    this.state = 603;
                    this.namedNumberList();
                    this.state = 604;
                    this.match(grammar3rdParser.R_BRACE);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namedNumberList() {
        let localctx = new NamedNumberListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 86, grammar3rdParser.RULE_namedNumberList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 608;
            this.namedNumber();
            this.state = 613;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 609;
                this.match(grammar3rdParser.COMMA);
                this.state = 610;
                this.namedNumber();
                this.state = 615;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namedNumber() {
        let localctx = new NamedNumberContext(this, this._ctx, this.state);
        this.enterRule(localctx, 88, grammar3rdParser.RULE_namedNumber);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 616;
            this.identifier();
            this.state = 617;
            this.match(grammar3rdParser.L_PAREN);
            this.state = 618;
            this.signedNumber();
            this.state = 619;
            this.match(grammar3rdParser.R_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    signedNumber() {
        let localctx = new SignedNumberContext(this, this._ctx, this.state);
        this.enterRule(localctx, 90, grammar3rdParser.RULE_signedNumber);
        try {
            this.state = 624;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.Number:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 621;
                    this.match(grammar3rdParser.Number);
                    break;
                case grammar3rdParser.HYPHEN_MINUS:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 622;
                    this.match(grammar3rdParser.HYPHEN_MINUS);
                    this.state = 623;
                    this.match(grammar3rdParser.Number);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    integerValue() {
        let localctx = new IntegerValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 92, grammar3rdParser.RULE_integerValue);
        try {
            this.state = 628;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.HYPHEN_MINUS:
                case grammar3rdParser.Number:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 626;
                    this.signedNumber();
                    break;
                case grammar3rdParser.IdentifierL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 627;
                    this.valueReference();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enumeratedType() {
        let localctx = new EnumeratedTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 94, grammar3rdParser.RULE_enumeratedType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 630;
            this.match(grammar3rdParser.ENUMERATED_LITERAL);
            this.state = 631;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 632;
            this.enumerations();
            this.state = 633;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enumerations() {
        let localctx = new EnumerationsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 96, grammar3rdParser.RULE_enumerations);
        var _la = 0; // Token type
        try {
            this.state = 651;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 30, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 635;
                    this.rootEnumeration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 636;
                    this.rootEnumeration();
                    this.state = 637;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 638;
                    this.match(grammar3rdParser.ELLIPSIS);
                    this.state = 640;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.EXCLAM) {
                        this.state = 639;
                        this.exceptionSpec();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 642;
                    this.rootEnumeration();
                    this.state = 643;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 644;
                    this.match(grammar3rdParser.ELLIPSIS);
                    this.state = 646;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.EXCLAM) {
                        this.state = 645;
                        this.exceptionSpec();
                    }
                    this.state = 648;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 649;
                    this.additionalEnumeration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    rootEnumeration() {
        let localctx = new RootEnumerationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 98, grammar3rdParser.RULE_rootEnumeration);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 653;
            this.enumeration();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    additionalEnumeration() {
        let localctx = new AdditionalEnumerationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 100, grammar3rdParser.RULE_additionalEnumeration);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 655;
            this.enumeration();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enumeration() {
        let localctx = new EnumerationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 102, grammar3rdParser.RULE_enumeration);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 657;
            this.enumerationItem();
            this.state = 662;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 31, this._ctx);
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 658;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 659;
                    this.enumerationItem();
                }
                this.state = 664;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 31, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enumerationItem() {
        let localctx = new EnumerationItemContext(this, this._ctx, this.state);
        this.enterRule(localctx, 104, grammar3rdParser.RULE_enumerationItem);
        try {
            this.state = 667;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 32, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 665;
                    this.identifier();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 666;
                    this.namedNumber();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    bitStringType() {
        let localctx = new BitStringTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 106, grammar3rdParser.RULE_bitStringType);
        try {
            this.state = 677;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 33, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 669;
                    this.match(grammar3rdParser.BIT_LITERAL);
                    this.state = 670;
                    this.match(grammar3rdParser.STRING_LITERAL);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 671;
                    this.match(grammar3rdParser.BIT_LITERAL);
                    this.state = 672;
                    this.match(grammar3rdParser.STRING_LITERAL);
                    this.state = 673;
                    this.match(grammar3rdParser.L_BRACE);
                    this.state = 674;
                    this.namedBitList();
                    this.state = 675;
                    this.match(grammar3rdParser.R_BRACE);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namedBitList() {
        let localctx = new NamedBitListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 108, grammar3rdParser.RULE_namedBitList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 679;
            this.namedBit();
            this.state = 684;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 680;
                this.match(grammar3rdParser.COMMA);
                this.state = 681;
                this.namedBit();
                this.state = 686;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namedBit() {
        let localctx = new NamedBitContext(this, this._ctx, this.state);
        this.enterRule(localctx, 110, grammar3rdParser.RULE_namedBit);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 687;
            this.identifier();
            this.state = 688;
            this.match(grammar3rdParser.L_PAREN);
            this.state = 689;
            this.match(grammar3rdParser.Number);
            this.state = 690;
            this.match(grammar3rdParser.R_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    bitStringValue() {
        let localctx = new BitStringValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 112, grammar3rdParser.RULE_bitStringValue);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 692;
            this.match(grammar3rdParser.Bstring);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    octetStringType() {
        let localctx = new OctetStringTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 114, grammar3rdParser.RULE_octetStringType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 694;
            this.match(grammar3rdParser.OCTET_LITERAL);
            this.state = 695;
            this.match(grammar3rdParser.STRING_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    nullType() {
        let localctx = new NullTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 116, grammar3rdParser.RULE_nullType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 697;
            this.match(grammar3rdParser.NULL_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    sequenceType() {
        let localctx = new SequenceTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 118, grammar3rdParser.RULE_sequenceType);
        var _la = 0; // Token type
        try {
            this.state = 715;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 36, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 699;
                    this.match(grammar3rdParser.SEQUENCE_LITERAL);
                    this.state = 700;
                    this.match(grammar3rdParser.L_BRACE);
                    this.state = 701;
                    this.match(grammar3rdParser.R_BRACE);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 702;
                    this.match(grammar3rdParser.SEQUENCE_LITERAL);
                    this.state = 703;
                    this.match(grammar3rdParser.L_BRACE);
                    this.state = 704;
                    this.extensionAndException();
                    this.state = 706;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.COMMA) {
                        this.state = 705;
                        this.optionalExtensionMarker();
                    }
                    this.state = 708;
                    this.match(grammar3rdParser.R_BRACE);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 710;
                    this.match(grammar3rdParser.SEQUENCE_LITERAL);
                    this.state = 711;
                    this.match(grammar3rdParser.L_BRACE);
                    this.state = 712;
                    this.componentTypeLists();
                    this.state = 713;
                    this.match(grammar3rdParser.R_BRACE);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAndException() {
        let localctx = new ExtensionAndExceptionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 120, grammar3rdParser.RULE_extensionAndException);
        var _la = 0; // Token type
        try {
            this.state = 722;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 38, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 717;
                    this.match(grammar3rdParser.ELLIPSIS);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 718;
                    this.match(grammar3rdParser.ELLIPSIS);
                    this.state = 720;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.EXCLAM) {
                        this.state = 719;
                        this.exceptionSpec();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    optionalExtensionMarker() {
        let localctx = new OptionalExtensionMarkerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 122, grammar3rdParser.RULE_optionalExtensionMarker);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 724;
            this.match(grammar3rdParser.COMMA);
            this.state = 725;
            this.match(grammar3rdParser.ELLIPSIS);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    componentTypeLists() {
        let localctx = new ComponentTypeListsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 124, grammar3rdParser.RULE_componentTypeLists);
        var _la = 0; // Token type
        try {
            this.state = 771;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 48, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 727;
                    this.rootComponentTypeList();
                    this.state = 729;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.Tag) {
                        this.state = 728;
                        this.match(grammar3rdParser.Tag);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 731;
                    this.rootComponentTypeList();
                    this.state = 732;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 734;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.Tag) {
                        this.state = 733;
                        this.match(grammar3rdParser.Tag);
                    }
                    this.state = 736;
                    this.extensionAndException();
                    this.state = 738;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 41, this._ctx);
                    if (la_ === 1) {
                        this.state = 737;
                        this.extensionAdditions();
                    }
                    this.state = 741;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.COMMA) {
                        this.state = 740;
                        this.optionalExtensionMarker();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 743;
                    this.rootComponentTypeList();
                    this.state = 744;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 746;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.Tag) {
                        this.state = 745;
                        this.match(grammar3rdParser.Tag);
                    }
                    this.state = 748;
                    this.extensionAndException();
                    this.state = 750;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 44, this._ctx);
                    if (la_ === 1) {
                        this.state = 749;
                        this.extensionAdditions();
                    }
                    this.state = 752;
                    this.extensionEndMarker();
                    this.state = 753;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 754;
                    this.rootComponentTypeList();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 756;
                    this.extensionAndException();
                    this.state = 758;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 45, this._ctx);
                    if (la_ === 1) {
                        this.state = 757;
                        this.extensionAdditions();
                    }
                    this.state = 760;
                    this.extensionEndMarker();
                    this.state = 761;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 762;
                    this.rootComponentTypeList();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 764;
                    this.extensionAndException();
                    this.state = 766;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 46, this._ctx);
                    if (la_ === 1) {
                        this.state = 765;
                        this.extensionAdditions();
                    }
                    this.state = 769;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.COMMA) {
                        this.state = 768;
                        this.optionalExtensionMarker();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    rootComponentTypeList() {
        let localctx = new RootComponentTypeListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 126, grammar3rdParser.RULE_rootComponentTypeList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 773;
            this.componentTypeList();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionEndMarker() {
        let localctx = new ExtensionEndMarkerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 128, grammar3rdParser.RULE_extensionEndMarker);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 775;
            this.match(grammar3rdParser.COMMA);
            this.state = 776;
            this.match(grammar3rdParser.ELLIPSIS);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAdditions() {
        let localctx = new ExtensionAdditionsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 130, grammar3rdParser.RULE_extensionAdditions);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 778;
            this.match(grammar3rdParser.COMMA);
            this.state = 779;
            this.extensionAdditionList();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAdditionList() {
        let localctx = new ExtensionAdditionListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 132, grammar3rdParser.RULE_extensionAdditionList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 781;
            this.extensionAddition();
            this.state = 786;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 49, this._ctx);
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 782;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 783;
                    this.extensionAddition();
                }
                this.state = 788;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 49, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAddition() {
        let localctx = new ExtensionAdditionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 134, grammar3rdParser.RULE_extensionAddition);
        try {
            this.state = 791;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.IdentifierL:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 789;
                    this.componentType();
                    break;
                case grammar3rdParser.L_VERSION_BRACKET:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 790;
                    this.extensionAdditionGroup();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAdditionGroup() {
        let localctx = new ExtensionAdditionGroupContext(this, this._ctx, this.state);
        this.enterRule(localctx, 136, grammar3rdParser.RULE_extensionAdditionGroup);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 793;
            this.match(grammar3rdParser.L_VERSION_BRACKET);
            this.state = 794;
            this.componentTypeList();
            this.state = 796;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.Tag) {
                this.state = 795;
                this.match(grammar3rdParser.Tag);
            }
            this.state = 798;
            this.match(grammar3rdParser.R_VERSION_BRACKET);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    componentTypeList() {
        let localctx = new ComponentTypeListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 138, grammar3rdParser.RULE_componentTypeList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 800;
            this.componentType();
            this.state = 808;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 53, this._ctx);
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 801;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 803;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.Tag) {
                        this.state = 802;
                        this.match(grammar3rdParser.Tag);
                    }
                    this.state = 805;
                    this.componentType();
                }
                this.state = 810;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 53, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    componentType() {
        let localctx = new ComponentTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 140, grammar3rdParser.RULE_componentType);
        try {
            this.state = 819;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 54, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 811;
                    this.namedType();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 812;
                    this.namedType();
                    this.state = 813;
                    this.match(grammar3rdParser.OPTIONAL_LITERAL);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 815;
                    this.namedType();
                    this.state = 816;
                    this.match(grammar3rdParser.DEFAULT_LITERAL);
                    this.state = 817;
                    this.value();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    sequenceOfType() {
        let localctx = new SequenceOfTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 142, grammar3rdParser.RULE_sequenceOfType);
        try {
            this.state = 827;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 55, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 821;
                    this.match(grammar3rdParser.SEQUENCE_LITERAL);
                    this.state = 822;
                    this.match(grammar3rdParser.OF_LITERAL);
                    this.state = 823;
                    this.type();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 824;
                    this.match(grammar3rdParser.SEQUENCE_LITERAL);
                    this.state = 825;
                    this.match(grammar3rdParser.OF_LITERAL);
                    this.state = 826;
                    this.namedType();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    choiceType() {
        let localctx = new ChoiceTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 144, grammar3rdParser.RULE_choiceType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 829;
            this.match(grammar3rdParser.CHOICE_LITERAL);
            this.state = 830;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 831;
            this.alternativeTypeLists();
            this.state = 832;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    alternativeTypeLists() {
        let localctx = new AlternativeTypeListsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 146, grammar3rdParser.RULE_alternativeTypeLists);
        var _la = 0; // Token type
        try {
            this.state = 844;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 58, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 834;
                    this.rootAlternativeTypeList();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 835;
                    this.rootAlternativeTypeList();
                    this.state = 836;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 837;
                    this.extensionAndException();
                    this.state = 839;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 56, this._ctx);
                    if (la_ === 1) {
                        this.state = 838;
                        this.extensionAdditionAlternatives();
                    }
                    this.state = 842;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.COMMA) {
                        this.state = 841;
                        this.optionalExtensionMarker();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    rootAlternativeTypeList() {
        let localctx = new RootAlternativeTypeListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 148, grammar3rdParser.RULE_rootAlternativeTypeList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 846;
            this.alternativeTypeList();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAdditionAlternatives() {
        let localctx = new ExtensionAdditionAlternativesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 150, grammar3rdParser.RULE_extensionAdditionAlternatives);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 848;
            this.match(grammar3rdParser.COMMA);
            this.state = 849;
            this.extensionAdditionAlternativesList();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAdditionAlternativesList() {
        let localctx = new ExtensionAdditionAlternativesListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 152, grammar3rdParser.RULE_extensionAdditionAlternativesList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 851;
            this.extensionAdditionAlternative();
            this.state = 856;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 59, this._ctx);
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 852;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 853;
                    this.extensionAdditionAlternative();
                }
                this.state = 858;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 59, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAdditionAlternative() {
        let localctx = new ExtensionAdditionAlternativeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 154, grammar3rdParser.RULE_extensionAdditionAlternative);
        try {
            this.state = 861;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.L_VERSION_BRACKET:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 859;
                    this.extensionAdditionAlternativesGroup();
                    break;
                case grammar3rdParser.IdentifierL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 860;
                    this.namedType();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAdditionAlternativesGroup() {
        let localctx = new ExtensionAdditionAlternativesGroupContext(this, this._ctx, this.state);
        this.enterRule(localctx, 156, grammar3rdParser.RULE_extensionAdditionAlternativesGroup);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 863;
            this.match(grammar3rdParser.L_VERSION_BRACKET);
            this.state = 864;
            this.alternativeTypeList();
            this.state = 865;
            this.match(grammar3rdParser.R_VERSION_BRACKET);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    alternativeTypeList() {
        let localctx = new AlternativeTypeListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 158, grammar3rdParser.RULE_alternativeTypeList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 867;
            this.namedType();
            this.state = 872;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 61, this._ctx);
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 868;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 869;
                    this.namedType();
                }
                this.state = 874;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 61, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectIdentifierType() {
        let localctx = new ObjectIdentifierTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 160, grammar3rdParser.RULE_objectIdentifierType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 875;
            this.match(grammar3rdParser.OBJECT_LITERAL);
            this.state = 876;
            this.match(grammar3rdParser.IDENTIFIER_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    characterStringType() {
        let localctx = new CharacterStringTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 162, grammar3rdParser.RULE_characterStringType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 878;
            this.restrictedCharacterStringType();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    restrictedCharacterStringType() {
        let localctx = new RestrictedCharacterStringTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 164, grammar3rdParser.RULE_restrictedCharacterStringType);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 880;
            _la = this._input.LA(1);
            if (!(((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (grammar3rdParser.PrintableString_LITERAL - 96)) | (1 << (grammar3rdParser.UTF8String_LITERAL - 96)) | (1 << (grammar3rdParser.VisibleString_LITERAL - 96)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    usefulType() {
        let localctx = new UsefulTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 166, grammar3rdParser.RULE_usefulType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 882;
            this.match(grammar3rdParser.UTCTime_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constrainedType() {
        let localctx = new ConstrainedTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 168, grammar3rdParser.RULE_constrainedType);
        try {
            this.state = 903;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 65, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 884;
                    this.builtinType();
                    this.state = 886;
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                this.state = 885;
                                this.constraint();
                                break;
                            default:
                                throw new antlr4.error.NoViableAltException(this);
                        }
                        this.state = 888;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 62, this._ctx);
                    } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 890;
                    this.referencedType();
                    this.state = 892;
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                this.state = 891;
                                this.constraint();
                                break;
                            default:
                                throw new antlr4.error.NoViableAltException(this);
                        }
                        this.state = 894;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 63, this._ctx);
                    } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 896;
                    this.typeWithConstraint();
                    this.state = 900;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 64, this._ctx);
                    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 897;
                            this.constraint();
                        }
                        this.state = 902;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 64, this._ctx);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeWithConstraint() {
        let localctx = new TypeWithConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 170, grammar3rdParser.RULE_typeWithConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 905;
            this.match(grammar3rdParser.SEQUENCE_LITERAL);
            this.state = 906;
            this.constraint();
            this.state = 907;
            this.match(grammar3rdParser.OF_LITERAL);
            this.state = 908;
            this.type();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constraint() {
        let localctx = new ConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 172, grammar3rdParser.RULE_constraint);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 910;
            this.match(grammar3rdParser.L_PAREN);
            this.state = 911;
            this.constraintSpec();
            this.state = 913;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.EXCLAM) {
                this.state = 912;
                this.exceptionSpec();
            }
            this.state = 915;
            this.match(grammar3rdParser.R_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constraintSpec() {
        let localctx = new ConstraintSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 174, grammar3rdParser.RULE_constraintSpec);
        try {
            this.state = 919;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 67, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 917;
                    this.subtypeConstraint();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 918;
                    this.generalConstraint();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    subtypeConstraint() {
        let localctx = new SubtypeConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 176, grammar3rdParser.RULE_subtypeConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 921;
            this.elementSetSpecs();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elementSetSpecs() {
        let localctx = new ElementSetSpecsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 178, grammar3rdParser.RULE_elementSetSpecs);
        try {
            this.state = 934;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 68, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 923;
                    this.rootElementSetSpec();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 924;
                    this.rootElementSetSpec();
                    this.state = 925;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 926;
                    this.match(grammar3rdParser.ELLIPSIS);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 928;
                    this.rootElementSetSpec();
                    this.state = 929;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 930;
                    this.match(grammar3rdParser.ELLIPSIS);
                    this.state = 931;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 932;
                    this.additionalElementSetSpec();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    rootElementSetSpec() {
        let localctx = new RootElementSetSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 180, grammar3rdParser.RULE_rootElementSetSpec);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 936;
            this.elementSetSpec();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    additionalElementSetSpec() {
        let localctx = new AdditionalElementSetSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 182, grammar3rdParser.RULE_additionalElementSetSpec);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 938;
            this.elementSetSpec();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elementSetSpec() {
        let localctx = new ElementSetSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 184, grammar3rdParser.RULE_elementSetSpec);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 940;
            this.unions();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    unions() {
        let localctx = new UnionsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 186, grammar3rdParser.RULE_unions);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 942;
            this.intersections();
            this.state = 948;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.PIPE) {
                this.state = 943;
                this.unionMark();
                this.state = 944;
                this.intersections();
                this.state = 950;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    intersections() {
        let localctx = new IntersectionsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 188, grammar3rdParser.RULE_intersections);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 951;
            this.intersectionElements();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    intersectionElements() {
        let localctx = new IntersectionElementsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 190, grammar3rdParser.RULE_intersectionElements);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 953;
            this.elements();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    unionMark() {
        let localctx = new UnionMarkContext(this, this._ctx, this.state);
        this.enterRule(localctx, 192, grammar3rdParser.RULE_unionMark);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 955;
            this.match(grammar3rdParser.PIPE);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elements() {
        let localctx = new ElementsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 194, grammar3rdParser.RULE_elements);
        try {
            this.state = 963;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.HYPHEN_MINUS:
                case grammar3rdParser.MIN_LITERAL:
                case grammar3rdParser.SIZE_LITERAL:
                case grammar3rdParser.WITH_LITERAL:
                case grammar3rdParser.IdentifierL:
                case grammar3rdParser.Number:
                case grammar3rdParser.Bstring:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 957;
                    this.subtypeElements();
                    break;
                case grammar3rdParser.L_BRACE:
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 958;
                    this.objectSetElements();
                    break;
                case grammar3rdParser.L_PAREN:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 959;
                    this.match(grammar3rdParser.L_PAREN);
                    this.state = 960;
                    this.elementSetSpec();
                    this.state = 961;
                    this.match(grammar3rdParser.R_PAREN);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    subtypeElements() {
        let localctx = new SubtypeElementsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 196, grammar3rdParser.RULE_subtypeElements);
        try {
            this.state = 969;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 71, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 965;
                    this.singleValue();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 966;
                    this.valueRange();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 967;
                    this.sizeConstraint();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 968;
                    this.innerTypeConstraints();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    singleValue() {
        let localctx = new SingleValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 198, grammar3rdParser.RULE_singleValue);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 971;
            this.value();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    valueRange() {
        let localctx = new ValueRangeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 200, grammar3rdParser.RULE_valueRange);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 973;
            this.lowerEndpoint();
            this.state = 974;
            this.match(grammar3rdParser.RANGE_SEPARATOR);
            this.state = 975;
            this.upperEndpoint();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lowerEndpoint() {
        let localctx = new LowerEndpointContext(this, this._ctx, this.state);
        this.enterRule(localctx, 202, grammar3rdParser.RULE_lowerEndpoint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 977;
            this.lowerEndValue();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    upperEndpoint() {
        let localctx = new UpperEndpointContext(this, this._ctx, this.state);
        this.enterRule(localctx, 204, grammar3rdParser.RULE_upperEndpoint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 979;
            this.upperEndValue();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lowerEndValue() {
        let localctx = new LowerEndValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 206, grammar3rdParser.RULE_lowerEndValue);
        try {
            this.state = 983;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.HYPHEN_MINUS:
                case grammar3rdParser.IdentifierL:
                case grammar3rdParser.Number:
                case grammar3rdParser.Bstring:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 981;
                    this.value();
                    break;
                case grammar3rdParser.MIN_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 982;
                    this.match(grammar3rdParser.MIN_LITERAL);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    upperEndValue() {
        let localctx = new UpperEndValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 208, grammar3rdParser.RULE_upperEndValue);
        try {
            this.state = 987;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.HYPHEN_MINUS:
                case grammar3rdParser.IdentifierL:
                case grammar3rdParser.Number:
                case grammar3rdParser.Bstring:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 985;
                    this.value();
                    break;
                case grammar3rdParser.MAX_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 986;
                    this.match(grammar3rdParser.MAX_LITERAL);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    sizeConstraint() {
        let localctx = new SizeConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 210, grammar3rdParser.RULE_sizeConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 989;
            this.match(grammar3rdParser.SIZE_LITERAL);
            this.state = 990;
            this.constraint();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    innerTypeConstraints() {
        let localctx = new InnerTypeConstraintsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 212, grammar3rdParser.RULE_innerTypeConstraints);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 992;
            this.match(grammar3rdParser.WITH_LITERAL);
            this.state = 993;
            this.match(grammar3rdParser.COMPONENTS_LITERAL);
            this.state = 994;
            this.multipleTypeConstraints();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    multipleTypeConstraints() {
        let localctx = new MultipleTypeConstraintsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 214, grammar3rdParser.RULE_multipleTypeConstraints);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 996;
            this.partialSpecification();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    partialSpecification() {
        let localctx = new PartialSpecificationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 216, grammar3rdParser.RULE_partialSpecification);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 998;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 999;
            this.match(grammar3rdParser.ELLIPSIS);
            this.state = 1000;
            this.match(grammar3rdParser.COMMA);
            this.state = 1001;
            this.typeConstraints();
            this.state = 1002;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeConstraints() {
        let localctx = new TypeConstraintsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 218, grammar3rdParser.RULE_typeConstraints);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1004;
            this.namedConstraint();
            this.state = 1009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 1005;
                this.match(grammar3rdParser.COMMA);
                this.state = 1006;
                this.namedConstraint();
                this.state = 1011;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namedConstraint() {
        let localctx = new NamedConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 220, grammar3rdParser.RULE_namedConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1012;
            this.identifier();
            this.state = 1013;
            this.componentConstraint();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    componentConstraint() {
        let localctx = new ComponentConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 222, grammar3rdParser.RULE_componentConstraint);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1016;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.L_PAREN) {
                this.state = 1015;
                this.valueConstraint();
            }
            this.state = 1019;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.ABSENT_LITERAL || _la === grammar3rdParser.OPTIONAL_LITERAL || _la === grammar3rdParser.PRESENT_LITERAL) {
                this.state = 1018;
                this.presenceConstraint();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    valueConstraint() {
        let localctx = new ValueConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 224, grammar3rdParser.RULE_valueConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1021;
            this.constraint();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    presenceConstraint() {
        let localctx = new PresenceConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 226, grammar3rdParser.RULE_presenceConstraint);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1023;
            _la = this._input.LA(1);
            if (!(_la === grammar3rdParser.ABSENT_LITERAL || _la === grammar3rdParser.OPTIONAL_LITERAL || _la === grammar3rdParser.PRESENT_LITERAL)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    exceptionSpec() {
        let localctx = new ExceptionSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 228, grammar3rdParser.RULE_exceptionSpec);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1025;
            this.match(grammar3rdParser.EXCLAM);
            this.state = 1026;
            this.exceptionIdentification();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    exceptionIdentification() {
        let localctx = new ExceptionIdentificationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 230, grammar3rdParser.RULE_exceptionIdentification);
        try {
            this.state = 1034;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 77, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1028;
                    this.signedNumber();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1029;
                    this.definedValue();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1030;
                    this.type();
                    this.state = 1031;
                    this.match(grammar3rdParser.COLON);
                    this.state = 1032;
                    this.value();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectClassReference() {
        let localctx = new ObjectClassReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 232, grammar3rdParser.RULE_objectClassReference);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1036;
            _la = this._input.LA(1);
            if (!(_la === grammar3rdParser.Word || _la === grammar3rdParser.ObjectClassReference)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectSetReference() {
        let localctx = new ObjectSetReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 234, grammar3rdParser.RULE_objectSetReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1038;
            this.typeReference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectReference() {
        let localctx = new ObjectReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 236, grammar3rdParser.RULE_objectReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1040;
            this.match(grammar3rdParser.IdentifierL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    valueFieldReference() {
        let localctx = new ValueFieldReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 238, grammar3rdParser.RULE_valueFieldReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1042;
            this.match(grammar3rdParser.AMP);
            this.state = 1043;
            this.match(grammar3rdParser.IdentifierL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    word() {
        let localctx = new WordContext(this, this._ctx, this.state);
        this.enterRule(localctx, 240, grammar3rdParser.RULE_word);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1045;
            this.match(grammar3rdParser.Word);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeFieldReference() {
        let localctx = new TypeFieldReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 242, grammar3rdParser.RULE_typeFieldReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1047;
            this.match(grammar3rdParser.AMP);
            this.state = 1048;
            this.typeReference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedObjectClass() {
        let localctx = new DefinedObjectClassContext(this, this._ctx, this.state);
        this.enterRule(localctx, 244, grammar3rdParser.RULE_definedObjectClass);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1050;
            this.objectClassReference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedObjectSet() {
        let localctx = new DefinedObjectSetContext(this, this._ctx, this.state);
        this.enterRule(localctx, 246, grammar3rdParser.RULE_definedObjectSet);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1052;
            this.objectSetReference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectClassAssignment() {
        let localctx = new ObjectClassAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 248, grammar3rdParser.RULE_objectClassAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1054;
            this.objectClassReference();
            this.state = 1055;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 1056;
            this.objectClass();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectClass() {
        let localctx = new ObjectClassContext(this, this._ctx, this.state);
        this.enterRule(localctx, 250, grammar3rdParser.RULE_objectClass);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1058;
            this.objectClassDefn();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectClassDefn() {
        let localctx = new ObjectClassDefnContext(this, this._ctx, this.state);
        this.enterRule(localctx, 252, grammar3rdParser.RULE_objectClassDefn);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1060;
            this.match(grammar3rdParser.CLASS_LITERAL);
            this.state = 1061;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1062;
            this.fieldSpec();
            this.state = 1067;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 1063;
                this.match(grammar3rdParser.COMMA);
                this.state = 1064;
                this.fieldSpec();
                this.state = 1069;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1070;
            this.match(grammar3rdParser.R_BRACE);
            this.state = 1072;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.WITH_LITERAL) {
                this.state = 1071;
                this.withSyntaxSpec();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    withSyntaxSpec() {
        let localctx = new WithSyntaxSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 254, grammar3rdParser.RULE_withSyntaxSpec);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1074;
            this.match(grammar3rdParser.WITH_LITERAL);
            this.state = 1075;
            this.match(grammar3rdParser.SYNTAX_LITERAL);
            this.state = 1076;
            this.syntaxList();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fieldSpec() {
        let localctx = new FieldSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 256, grammar3rdParser.RULE_fieldSpec);
        try {
            this.state = 1080;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 80, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1078;
                    this.typeFieldSpec();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1079;
                    this.fixedTypeValueFieldSpec();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeFieldSpec() {
        let localctx = new TypeFieldSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 258, grammar3rdParser.RULE_typeFieldSpec);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1082;
            this.typeFieldReference();
            this.state = 1084;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.OPTIONAL_LITERAL || _la === grammar3rdParser.DEFAULT_LITERAL) {
                this.state = 1083;
                this.typeOptionalitySpec();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeOptionalitySpec() {
        let localctx = new TypeOptionalitySpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 260, grammar3rdParser.RULE_typeOptionalitySpec);
        try {
            this.state = 1089;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.OPTIONAL_LITERAL:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1086;
                    this.match(grammar3rdParser.OPTIONAL_LITERAL);
                    break;
                case grammar3rdParser.DEFAULT_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1087;
                    this.match(grammar3rdParser.DEFAULT_LITERAL);
                    this.state = 1088;
                    this.type();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fixedTypeValueFieldSpec() {
        let localctx = new FixedTypeValueFieldSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 262, grammar3rdParser.RULE_fixedTypeValueFieldSpec);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1091;
            this.valueFieldReference();
            this.state = 1092;
            this.type();
            this.state = 1094;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.UNIQUE_LITERAL) {
                this.state = 1093;
                this.match(grammar3rdParser.UNIQUE_LITERAL);
            }
            this.state = 1097;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.OPTIONAL_LITERAL || _la === grammar3rdParser.DEFAULT_LITERAL) {
                this.state = 1096;
                this.valueOptionalitySpec();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    valueOptionalitySpec() {
        let localctx = new ValueOptionalitySpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 264, grammar3rdParser.RULE_valueOptionalitySpec);
        try {
            this.state = 1102;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.OPTIONAL_LITERAL:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1099;
                    this.match(grammar3rdParser.OPTIONAL_LITERAL);
                    break;
                case grammar3rdParser.DEFAULT_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1100;
                    this.match(grammar3rdParser.DEFAULT_LITERAL);
                    this.state = 1101;
                    this.value();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    primitiveFieldName() {
        let localctx = new PrimitiveFieldNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 266, grammar3rdParser.RULE_primitiveFieldName);
        try {
            this.state = 1106;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 86, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1104;
                    this.typeFieldReference();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1105;
                    this.valueFieldReference();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fieldName() {
        let localctx = new FieldNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 268, grammar3rdParser.RULE_fieldName);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1108;
            this.primitiveFieldName();
            this.state = 1113;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.PERIOD) {
                this.state = 1109;
                this.match(grammar3rdParser.PERIOD);
                this.state = 1110;
                this.primitiveFieldName();
                this.state = 1115;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    syntaxList() {
        let localctx = new SyntaxListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 270, grammar3rdParser.RULE_syntaxList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1116;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1118;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1117;
                this.tokenOrGroupSpec();
                this.state = 1120;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === grammar3rdParser.L_BRACKET || _la === grammar3rdParser.AMP || _la === grammar3rdParser.Word);
            this.state = 1122;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tokenOrGroupSpec() {
        let localctx = new TokenOrGroupSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 272, grammar3rdParser.RULE_tokenOrGroupSpec);
        try {
            this.state = 1126;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.AMP:
                case grammar3rdParser.Word:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1124;
                    this.requiredToken();
                    break;
                case grammar3rdParser.L_BRACKET:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1125;
                    this.optionalGroup();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    optionalGroup() {
        let localctx = new OptionalGroupContext(this, this._ctx, this.state);
        this.enterRule(localctx, 274, grammar3rdParser.RULE_optionalGroup);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1128;
            this.match(grammar3rdParser.L_BRACKET);
            this.state = 1130;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1129;
                this.tokenOrGroupSpec();
                this.state = 1132;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === grammar3rdParser.L_BRACKET || _la === grammar3rdParser.AMP || _la === grammar3rdParser.Word);
            this.state = 1134;
            this.match(grammar3rdParser.R_BRACKET);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    requiredToken() {
        let localctx = new RequiredTokenContext(this, this._ctx, this.state);
        this.enterRule(localctx, 276, grammar3rdParser.RULE_requiredToken);
        try {
            this.state = 1138;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.Word:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1136;
                    this.literal();
                    break;
                case grammar3rdParser.AMP:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1137;
                    this.primitiveFieldName();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    literal() {
        let localctx = new LiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 278, grammar3rdParser.RULE_literal);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1140;
            this.word();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectAssignment() {
        let localctx = new ObjectAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 280, grammar3rdParser.RULE_objectAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1142;
            this.objectReference();
            this.state = 1143;
            this.definedObjectClass();
            this.state = 1144;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 1145;
            this.object();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    object() {
        let localctx = new ObjectContext(this, this._ctx, this.state);
        this.enterRule(localctx, 282, grammar3rdParser.RULE_object);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1147;
            this.objectDefn();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectDefn() {
        let localctx = new ObjectDefnContext(this, this._ctx, this.state);
        this.enterRule(localctx, 284, grammar3rdParser.RULE_objectDefn);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1149;
            this.definedSyntax();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedSyntax() {
        let localctx = new DefinedSyntaxContext(this, this._ctx, this.state);
        this.enterRule(localctx, 286, grammar3rdParser.RULE_definedSyntax);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1151;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1155;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.HYPHEN_MINUS || _la === grammar3rdParser.SEQUENCE_LITERAL || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (grammar3rdParser.ENUMERATED_LITERAL - 35)) | (1 << (grammar3rdParser.BIT_LITERAL - 35)) | (1 << (grammar3rdParser.NULL_LITERAL - 35)) | (1 << (grammar3rdParser.BOOLEAN_LITERAL - 35)) | (1 << (grammar3rdParser.OBJECT_LITERAL - 35)) | (1 << (grammar3rdParser.OCTET_LITERAL - 35)) | (1 << (grammar3rdParser.CHOICE_LITERAL - 35)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (grammar3rdParser.UTCTime_LITERAL - 93)) | (1 << (grammar3rdParser.PrintableString_LITERAL - 93)) | (1 << (grammar3rdParser.UTF8String_LITERAL - 93)) | (1 << (grammar3rdParser.VisibleString_LITERAL - 93)) | (1 << (grammar3rdParser.INTEGER_LITERAL - 93)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)) | (1 << (grammar3rdParser.Number - 130)) | (1 << (grammar3rdParser.Bstring - 130)))) !== 0)) {
                this.state = 1152;
                this.definedSyntaxToken();
                this.state = 1157;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1158;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedSyntaxToken() {
        let localctx = new DefinedSyntaxTokenContext(this, this._ctx, this.state);
        this.enterRule(localctx, 288, grammar3rdParser.RULE_definedSyntaxToken);
        try {
            this.state = 1162;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 93, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1160;
                    this.literal();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1161;
                    this.setting();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    setting() {
        let localctx = new SettingContext(this, this._ctx, this.state);
        this.enterRule(localctx, 290, grammar3rdParser.RULE_setting);
        try {
            this.state = 1166;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.SEQUENCE_LITERAL:
                case grammar3rdParser.ENUMERATED_LITERAL:
                case grammar3rdParser.BIT_LITERAL:
                case grammar3rdParser.NULL_LITERAL:
                case grammar3rdParser.BOOLEAN_LITERAL:
                case grammar3rdParser.OBJECT_LITERAL:
                case grammar3rdParser.OCTET_LITERAL:
                case grammar3rdParser.CHOICE_LITERAL:
                case grammar3rdParser.UTCTime_LITERAL:
                case grammar3rdParser.PrintableString_LITERAL:
                case grammar3rdParser.UTF8String_LITERAL:
                case grammar3rdParser.VisibleString_LITERAL:
                case grammar3rdParser.INTEGER_LITERAL:
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1164;
                    this.type();
                    break;
                case grammar3rdParser.HYPHEN_MINUS:
                case grammar3rdParser.IdentifierL:
                case grammar3rdParser.Number:
                case grammar3rdParser.Bstring:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1165;
                    this.value();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectSetAssignment() {
        let localctx = new ObjectSetAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 292, grammar3rdParser.RULE_objectSetAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1168;
            this.objectSetReference();
            this.state = 1169;
            this.definedObjectClass();
            this.state = 1170;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 1171;
            this.objectSet();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectSet() {
        let localctx = new ObjectSetContext(this, this._ctx, this.state);
        this.enterRule(localctx, 294, grammar3rdParser.RULE_objectSet);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1173;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1174;
            this.objectSetSpec();
            this.state = 1175;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectSetSpec() {
        let localctx = new ObjectSetSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 296, grammar3rdParser.RULE_objectSetSpec);
        try {
            this.state = 1189;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 95, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1177;
                    this.rootElementSetSpec();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1178;
                    this.rootElementSetSpec();
                    this.state = 1179;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 1180;
                    this.match(grammar3rdParser.ELLIPSIS);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1182;
                    this.match(grammar3rdParser.ELLIPSIS);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1183;
                    this.rootElementSetSpec();
                    this.state = 1184;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 1185;
                    this.match(grammar3rdParser.ELLIPSIS);
                    this.state = 1186;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 1187;
                    this.additionalElementSetSpec();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectSetElements() {
        let localctx = new ObjectSetElementsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 298, grammar3rdParser.RULE_objectSetElements);
        try {
            this.state = 1193;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.L_BRACE:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1191;
                    this.object();
                    break;
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1192;
                    this.definedObjectSet();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectClassFieldType() {
        let localctx = new ObjectClassFieldTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 300, grammar3rdParser.RULE_objectClassFieldType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1195;
            this.definedObjectClass();
            this.state = 1196;
            this.match(grammar3rdParser.PERIOD);
            this.state = 1197;
            this.fieldName();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    generalConstraint() {
        let localctx = new GeneralConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 302, grammar3rdParser.RULE_generalConstraint);
        try {
            this.state = 1201;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.L_BRACE:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1199;
                    this.tableConstraint();
                    break;
                case grammar3rdParser.CONTAINING_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1200;
                    this.contentsConstraint();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tableConstraint() {
        let localctx = new TableConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 304, grammar3rdParser.RULE_tableConstraint);
        try {
            this.state = 1205;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 98, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1203;
                    this.simpleTableConstraint();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1204;
                    this.componentRelationConstraint();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    simpleTableConstraint() {
        let localctx = new SimpleTableConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 306, grammar3rdParser.RULE_simpleTableConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1207;
            this.objectSet();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    componentRelationConstraint() {
        let localctx = new ComponentRelationConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 308, grammar3rdParser.RULE_componentRelationConstraint);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1209;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1210;
            this.definedObjectSet();
            this.state = 1211;
            this.match(grammar3rdParser.R_BRACE);
            this.state = 1212;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1213;
            this.atNotation();
            this.state = 1218;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 1214;
                this.match(grammar3rdParser.COMMA);
                this.state = 1215;
                this.atNotation();
                this.state = 1220;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1221;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    atNotation() {
        let localctx = new AtNotationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 310, grammar3rdParser.RULE_atNotation);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1223;
            this.match(grammar3rdParser.AT);
            this.state = 1224;
            this.componentIdList();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    componentIdList() {
        let localctx = new ComponentIdListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 312, grammar3rdParser.RULE_componentIdList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1226;
            this.identifier();
            this.state = 1231;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.PERIOD) {
                this.state = 1227;
                this.match(grammar3rdParser.PERIOD);
                this.state = 1228;
                this.identifier();
                this.state = 1233;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    contentsConstraint() {
        let localctx = new ContentsConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 314, grammar3rdParser.RULE_contentsConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1234;
            this.match(grammar3rdParser.CONTAINING_LITERAL);
            this.state = 1235;
            this.type();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterizedAssignment() {
        let localctx = new ParameterizedAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 316, grammar3rdParser.RULE_parameterizedAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1237;
            this.parameterizedTypeAssignment();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterizedTypeAssignment() {
        let localctx = new ParameterizedTypeAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 318, grammar3rdParser.RULE_parameterizedTypeAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1239;
            this.typeReference();
            this.state = 1240;
            this.parameterList();
            this.state = 1241;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 1242;
            this.type();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterList() {
        let localctx = new ParameterListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 320, grammar3rdParser.RULE_parameterList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1244;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1245;
            this.parameter();
            this.state = 1250;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 1246;
                this.match(grammar3rdParser.COMMA);
                this.state = 1247;
                this.parameter();
                this.state = 1252;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1253;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameter() {
        let localctx = new ParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 322, grammar3rdParser.RULE_parameter);
        try {
            this.state = 1260;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 102, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1255;
                    this.paramGovernor();
                    this.state = 1256;
                    this.match(grammar3rdParser.COLON);
                    this.state = 1257;
                    this.dummyReference();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1259;
                    this.dummyReference();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    paramGovernor() {
        let localctx = new ParamGovernorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 324, grammar3rdParser.RULE_paramGovernor);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1262;
            this.governor();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    governor() {
        let localctx = new GovernorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 326, grammar3rdParser.RULE_governor);
        try {
            this.state = 1266;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 103, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1264;
                    this.type();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1265;
                    this.definedObjectClass();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    dummyReference() {
        let localctx = new DummyReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 328, grammar3rdParser.RULE_dummyReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1268;
            this.reference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterizedReference() {
        let localctx = new ParameterizedReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 330, grammar3rdParser.RULE_parameterizedReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1270;
            this.reference();
            this.state = 1271;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1272;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterizedTypeAmbiguous() {
        let localctx = new ParameterizedTypeAmbiguousContext(this, this._ctx, this.state);
        this.enterRule(localctx, 332, grammar3rdParser.RULE_parameterizedTypeAmbiguous);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1274;
            this.simpleDefinedType();
            this.state = 1275;
            this.actualParameterList();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    simpleDefinedType() {
        let localctx = new SimpleDefinedTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 334, grammar3rdParser.RULE_simpleDefinedType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1277;
            this.typeReference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    actualParameterList() {
        let localctx = new ActualParameterListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 336, grammar3rdParser.RULE_actualParameterList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1279;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1280;
            this.actualParameter();
            this.state = 1285;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 1281;
                this.match(grammar3rdParser.COMMA);
                this.state = 1282;
                this.actualParameter();
                this.state = 1287;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1288;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    actualParameter() {
        let localctx = new ActualParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 338, grammar3rdParser.RULE_actualParameter);
        try {
            this.state = 1293;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.SEQUENCE_LITERAL:
                case grammar3rdParser.ENUMERATED_LITERAL:
                case grammar3rdParser.BIT_LITERAL:
                case grammar3rdParser.NULL_LITERAL:
                case grammar3rdParser.BOOLEAN_LITERAL:
                case grammar3rdParser.OBJECT_LITERAL:
                case grammar3rdParser.OCTET_LITERAL:
                case grammar3rdParser.CHOICE_LITERAL:
                case grammar3rdParser.UTCTime_LITERAL:
                case grammar3rdParser.PrintableString_LITERAL:
                case grammar3rdParser.UTF8String_LITERAL:
                case grammar3rdParser.VisibleString_LITERAL:
                case grammar3rdParser.INTEGER_LITERAL:
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1290;
                    this.type();
                    break;
                case grammar3rdParser.HYPHEN_MINUS:
                case grammar3rdParser.IdentifierL:
                case grammar3rdParser.Number:
                case grammar3rdParser.Bstring:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1291;
                    this.value();
                    break;
                case grammar3rdParser.L_BRACE:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1292;
                    this.objectSet();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObjectReference() {
        let localctx = new EncodingObjectReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 340, grammar3rdParser.RULE_encodingObjectReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1295;
            this.match(grammar3rdParser.IdentifierL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObjectSetReference() {
        let localctx = new EncodingObjectSetReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 342, grammar3rdParser.RULE_encodingObjectSetReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1297;
            this.typeReference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingClassReferenceVariant() {
        let localctx = new EncodingClassReferenceVariantContext(this, this._ctx, this.state);
        this.enterRule(localctx, 344, grammar3rdParser.RULE_encodingClassReferenceVariant);
        try {
            this.state = 1302;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.NUMBER_SIGN:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1299;
                    this.match(grammar3rdParser.NUMBER_SIGN);
                    this.state = 1300;
                    this.typeReference();
                    break;
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1301;
                    this.typeReference();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedOrBuiltinEncodingClass() {
        let localctx = new DefinedOrBuiltinEncodingClassContext(this, this._ctx, this.state);
        this.enterRule(localctx, 346, grammar3rdParser.RULE_definedOrBuiltinEncodingClass);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1304;
            this.builtinEncodingClassReference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedEncodingObject() {
        let localctx = new DefinedEncodingObjectContext(this, this._ctx, this.state);
        this.enterRule(localctx, 348, grammar3rdParser.RULE_definedEncodingObject);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1306;
            this.encodingObjectReference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedEncodingObjectSet() {
        let localctx = new DefinedEncodingObjectSetContext(this, this._ctx, this.state);
        this.enterRule(localctx, 350, grammar3rdParser.RULE_definedEncodingObjectSet);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1308;
            this.encodingObjectSetReference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedOrBuiltinEncodingObjectSet() {
        let localctx = new DefinedOrBuiltinEncodingObjectSetContext(this, this._ctx, this.state);
        this.enterRule(localctx, 352, grammar3rdParser.RULE_definedOrBuiltinEncodingObjectSet);
        try {
            this.state = 1312;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1310;
                    this.definedEncodingObjectSet();
                    break;
                case grammar3rdParser.PER_BASIC_UNALIGNED_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1311;
                    this.builtinEncodingObjectSetReference();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elmModuleBody() {
        let localctx = new ElmModuleBodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 354, grammar3rdParser.RULE_elmModuleBody);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1315;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.IMPORTS_LITERAL) {
                this.state = 1314;
                this.imports();
            }
            this.state = 1317;
            this.encodingApplicationList();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingApplicationList() {
        let localctx = new EncodingApplicationListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 356, grammar3rdParser.RULE_encodingApplicationList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1320;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1319;
                this.encodingApplication();
                this.state = 1322;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === grammar3rdParser.ENCODE_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingApplication() {
        let localctx = new EncodingApplicationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 358, grammar3rdParser.RULE_encodingApplication);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1324;
            this.match(grammar3rdParser.ENCODE_LITERAL);
            this.state = 1325;
            this.simpleDefinedEncodingClass();
            this.state = 1330;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 1326;
                this.match(grammar3rdParser.COMMA);
                this.state = 1327;
                this.simpleDefinedEncodingClass();
                this.state = 1332;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1333;
            this.combinedEncodings();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    combinedEncodings() {
        let localctx = new CombinedEncodingsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 360, grammar3rdParser.RULE_combinedEncodings);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1335;
            this.match(grammar3rdParser.WITH_LITERAL);
            this.state = 1336;
            this.primaryEncodings();
            this.state = 1338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.COMPLETED_LITERAL) {
                this.state = 1337;
                this.completionClause();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    completionClause() {
        let localctx = new CompletionClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 362, grammar3rdParser.RULE_completionClause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1340;
            this.match(grammar3rdParser.COMPLETED_LITERAL);
            this.state = 1341;
            this.match(grammar3rdParser.BY_LITERAL);
            this.state = 1342;
            this.secondaryEncodings();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    primaryEncodings() {
        let localctx = new PrimaryEncodingsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 364, grammar3rdParser.RULE_primaryEncodings);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1344;
            this.encodingObjectSet();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    secondaryEncodings() {
        let localctx = new SecondaryEncodingsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 366, grammar3rdParser.RULE_secondaryEncodings);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1346;
            this.encodingObjectSet();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    edmModuleBody() {
        let localctx = new EdmModuleBodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 368, grammar3rdParser.RULE_edmModuleBody);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.EXPORTS_LITERAL) {
                this.state = 1348;
                this.exports();
            }
            this.state = 1352;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.IMPORTS_LITERAL) {
                this.state = 1351;
                this.imports();
            }
            this.state = 1355;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)))) !== 0)) {
                this.state = 1354;
                this.edmAssignmentList();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    edmAssignmentList() {
        let localctx = new EdmAssignmentListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 370, grammar3rdParser.RULE_edmAssignmentList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1357;
                this.edmAssignment();
                this.state = 1360;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)))) !== 0));
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    edmAssignment() {
        let localctx = new EdmAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 372, grammar3rdParser.RULE_edmAssignment);
        try {
            this.state = 1364;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.IdentifierL:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1362;
                    this.encodingObjectAssignment();
                    break;
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1363;
                    this.encodingObjectSetAssignment();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    builtinEncodingClassReference() {
        let localctx = new BuiltinEncodingClassReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 374, grammar3rdParser.RULE_builtinEncodingClassReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1366;
            this.encodingProcedureClassReference();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingProcedureClassReference() {
        let localctx = new EncodingProcedureClassReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 376, grammar3rdParser.RULE_encodingProcedureClassReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1368;
            this.match(grammar3rdParser.NUMBER_SIGN);
            this.state = 1369;
            this.match(grammar3rdParser.OUTER_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObjectAssignment() {
        let localctx = new EncodingObjectAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 378, grammar3rdParser.RULE_encodingObjectAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1371;
            this.encodingObjectReference();
            this.state = 1372;
            this.definedOrBuiltinEncodingClass();
            this.state = 1373;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 1374;
            this.encodingObject();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObject() {
        let localctx = new EncodingObjectContext(this, this._ctx, this.state);
        this.enterRule(localctx, 380, grammar3rdParser.RULE_encodingObject);
        try {
            this.state = 1378;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 117, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1376;
                    this.differentialEncodeDecodeObjectVariant();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1377;
                    this.definedSyntax();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    differentialEncodeDecodeObjectVariant() {
        let localctx = new DifferentialEncodeDecodeObjectVariantContext(this, this._ctx, this.state);
        this.enterRule(localctx, 382, grammar3rdParser.RULE_differentialEncodeDecodeObjectVariant);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1380;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1381;
            _la = this._input.LA(1);
            if (!(_la === grammar3rdParser.ENCODE_DECODE_LITERAL || _la === grammar3rdParser.ENCODER_DECODER_LITERAL)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1382;
            this.specForEncoding();
            this.state = 1383;
            this.match(grammar3rdParser.DECODE_LITERAL);
            this.state = 1384;
            this.match(grammar3rdParser.AS_LITERAL);
            this.state = 1385;
            this.match(grammar3rdParser.IF_LITERAL);
            this.state = 1386;
            this.specForDecoders();
            this.state = 1387;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    specForEncoding() {
        let localctx = new SpecForEncodingContext(this, this._ctx, this.state);
        this.enterRule(localctx, 384, grammar3rdParser.RULE_specForEncoding);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1389;
            this.encodingObject();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    specForDecoders() {
        let localctx = new SpecForDecodersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 386, grammar3rdParser.RULE_specForDecoders);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1391;
            this.encodingObject();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObjectSetAssignment() {
        let localctx = new EncodingObjectSetAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 388, grammar3rdParser.RULE_encodingObjectSetAssignment);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1393;
            this.encodingObjectSetReference();
            this.state = 1394;
            this.match(grammar3rdParser.NUMBER_SIGN);
            this.state = 1395;
            this.match(grammar3rdParser.ENCODINGS_LITERAL);
            this.state = 1396;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 1397;
            this.encodingObjectSet();
            this.state = 1399;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.COMPLETED_LITERAL) {
                this.state = 1398;
                this.completionClause();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObjectSet() {
        let localctx = new EncodingObjectSetContext(this, this._ctx, this.state);
        this.enterRule(localctx, 390, grammar3rdParser.RULE_encodingObjectSet);
        try {
            this.state = 1403;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.PER_BASIC_UNALIGNED_LITERAL:
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1401;
                    this.definedOrBuiltinEncodingObjectSet();
                    break;
                case grammar3rdParser.L_BRACE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1402;
                    this.encodingObjectSetSpec();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObjectSetSpec() {
        let localctx = new EncodingObjectSetSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 392, grammar3rdParser.RULE_encodingObjectSetSpec);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1405;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1406;
            this.encodingObjects();
            this.state = 1412;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.PIPE) {
                this.state = 1407;
                this.unionMark();
                this.state = 1408;
                this.encodingObjects();
                this.state = 1414;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1415;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObjects() {
        let localctx = new EncodingObjectsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 394, grammar3rdParser.RULE_encodingObjects);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1417;
            this.definedEncodingObject();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    builtinEncodingObjectSetReference() {
        let localctx = new BuiltinEncodingObjectSetReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 396, grammar3rdParser.RULE_builtinEncodingObjectSetReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1419;
            this.match(grammar3rdParser.PER_BASIC_UNALIGNED_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    simpleDefinedEncodingClass() {
        let localctx = new SimpleDefinedEncodingClassContext(this, this._ctx, this.state);
        this.enterRule(localctx, 398, grammar3rdParser.RULE_simpleDefinedEncodingClass);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1421;
            this.encodingClassReferenceVariant();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
}
grammar3rdParser.grammarFileName = "grammar3rd.g4";
grammar3rdParser.literalNames = [null, "'::='", "'...'", "'..'", "'[['", "']]'",
    "'{'", "'}'", "','", "'.'", "'('", "')'", "'['",
    "']'", "'-'", "':'", "';'", "'@'", "'|'", "'!'",
    "'&'", "'#'", "'ABSENT'", "'ENCODED'", "'INTERSECTION'",
    "'SEQUENCE'", "'ABSTRACT-SYNTAX'", "'ENCODING-CONTROL'",
    "'ISO646String'", "'SET'", "'ALL'", "'END'",
    "'MAX'", "'SETTINGS'", "'APPLICATION'", "'ENUMERATED'",
    "'MIN'", "'SIZE'", "'AUTOMATIC'", "'EXCEPT'",
    "'MINUS-INFINITY'", "'STRING'", "'BEGIN'", "'EXPLICIT'",
    "'NOT-A-NUMBER'", "'SYNTAX'", "'BIT'", "'EXPORTS'",
    "'NULL'", "'T61String'", "'BMPString'", "'EXTENSIBILITY'",
    "'NumericString'", "'TAGS'", "'BOOLEAN'", "'EXTERNAL'",
    "'OBJECT'", "'TeletexString'", "'BY'", "'FALSE'",
    "'ObjectDescriptor'", "'TIME'", "'CHARACTER'",
    "'FROM'", "'OCTET'", "'TIME-OF-DAY'", "'CHOICE'",
    "'GeneralizedTime'", "'OF'", "'TRUE'", "'CLASS'",
    "'GeneralString'", "'OID-IRI'", "'TYPE-IDENTIFIER'",
    "'COMPONENT'", "'GraphicString'", "'OPTIONAL'",
    "'UNION'", "'COMPONENTS'", "'IA5String'", "'PATTERN'",
    "'UNIQUE'", "'CONSTRAINED'", "'IDENTIFIER'",
    "'PDV'", "'UNIVERSAL'", "'CONTAINING'", "'IMPLICIT'",
    "'PLUS-INFINITY'", "'UniversalString'", "'DATE'",
    "'IMPLIED'", "'PRESENT'", "'UTCTime'", "'DATE-TIME'",
    "'IMPORTS'", "'PrintableString'", "'UTF8String'",
    "'DEFAULT'", "'INCLUDES'", "'PRIVATE'", "'VideotexString'",
    "'DEFINITIONS'", "'INSTANCE'", "'REAL'", "'VisibleString'",
    "'DURATION'", "'INSTRUCTIONS'", "'RELATIVE-OID'",
    "'WITH'", "'EMBEDDED'", "'INTEGER'", "'RELATIVE-OID-IRI'",
    "'AS'", "'COMPLETED'", "'ENCODE'", "'ENCODE-DECODE'",
    "'ENCODER'", "'ENCODER-DECODER'", "'DECODE'",
    "'DECODER'", "'ENCODING-DEFINITIONS'", "'ENCODINGS'",
    "'IF'", "'LINK-DEFINITIONS'", "'PER-BASIC-UNALIGNED'",
    "'OUTER'"];
grammar3rdParser.symbolicNames = [null, "ASSIGNMENT", "ELLIPSIS", "RANGE_SEPARATOR",
    "L_VERSION_BRACKET", "R_VERSION_BRACKET", "L_BRACE",
    "R_BRACE", "COMMA", "PERIOD", "L_PAREN", "R_PAREN",
    "L_BRACKET", "R_BRACKET", "HYPHEN_MINUS", "COLON",
    "SEMICOLON_LITERAL", "AT", "PIPE", "EXCLAM",
    "AMP", "NUMBER_SIGN", "ABSENT_LITERAL", "ENCODED_LITERAL",
    "INTERSECTION_LITERAL", "SEQUENCE_LITERAL",
    "ABSTRACT_SYNTAX_LITERAL", "ENCODING_CONTROL_LITERAL",
    "ISO646String_LITERAL", "SET_LITERAL", "ALL_LITERAL",
    "END_LITERAL", "MAX_LITERAL", "SETTINGS_LITERAL",
    "APPLICATION_LITERAL", "ENUMERATED_LITERAL",
    "MIN_LITERAL", "SIZE_LITERAL", "AUTOMATIC_LITERAL",
    "EXCEPT_LITERAL", "MINUS_INFINITY_LITERAL",
    "STRING_LITERAL", "BEGIN_LITERAL", "EXPLICIT_LITERAL",
    "NOT_A_NUMBER_LITERAL", "SYNTAX_LITERAL", "BIT_LITERAL",
    "EXPORTS_LITERAL", "NULL_LITERAL", "T61String_LITERAL",
    "BMPString_LITERAL", "EXTENSIBILITY_LITERAL",
    "NumericString_LITERAL", "TAGS_LITERAL", "BOOLEAN_LITERAL",
    "EXTERNAL_LITERAL", "OBJECT_LITERAL", "TeletexString_LITERAL",
    "BY_LITERAL", "FALSE_LITERAL", "ObjectDescriptor_LITERAL",
    "TIME_LITERAL", "CHARACTER_LITERAL", "FROM_LITERAL",
    "OCTET_LITERAL", "TIME_OF_DAY_LITERAL", "CHOICE_LITERAL",
    "GeneralizedTime_LITERAL", "OF_LITERAL", "TRUE_LITERAL",
    "CLASS_LITERAL", "GeneralString_LITERAL", "OID_IRI_LITERAL",
    "TYPE_IDENTIFIER_LITERAL", "COMPONENT_LITERAL",
    "GraphicString_LITERAL", "OPTIONAL_LITERAL",
    "UNION_LITERAL", "COMPONENTS_LITERAL", "IA5String_LITERAL",
    "PATTERN_LITERAL", "UNIQUE_LITERAL", "CONSTRAINED_LITERAL",
    "IDENTIFIER_LITERAL", "PDV_LITERAL", "UNIVERSAL_LITERAL",
    "CONTAINING_LITERAL", "IMPLICIT_LITERAL", "PLUS_INFINITY_LITERAL",
    "UniversalString_LITERAL", "DATE_LITERAL",
    "IMPLIED_LITERAL", "PRESENT_LITERAL", "UTCTime_LITERAL",
    "DATE_TIME_LITERAL", "IMPORTS_LITERAL", "PrintableString_LITERAL",
    "UTF8String_LITERAL", "DEFAULT_LITERAL", "INCLUDES_LITERAL",
    "PRIVATE_LITERAL", "VideotexString_LITERAL",
    "DEFINITIONS_LITERAL", "INSTANCE_LITERAL",
    "REAL_LITERAL", "VisibleString_LITERAL", "DURATION_LITERAL",
    "INSTRUCTIONS_LITERAL", "RELATIVE_OID_LITERAL",
    "WITH_LITERAL", "EMBEDDED_LITERAL", "INTEGER_LITERAL",
    "RELATIVE_OID_IRI_LITERAL", "AS_LITERAL", "COMPLETED_LITERAL",
    "ENCODE_LITERAL", "ENCODE_DECODE_LITERAL",
    "ENCODER_LITERAL", "ENCODER_DECODER_LITERAL",
    "DECODE_LITERAL", "DECODER_LITERAL", "ENCODING_DEFINITIONS_LITERAL",
    "ENCODINGS_LITERAL", "IF_LITERAL", "LINK_DEFINITIONS_LITERAL",
    "PER_BASIC_UNALIGNED_LITERAL", "OUTER_LITERAL",
    "WS", "Tag", "Comment", "Word", "ObjectClassReference",
    "TypeReference", "IdentifierL", "Number", "Bstring"];
grammar3rdParser.ruleNames = ["moduleDefinitions", "typeReference", "identifier",
    "valueReference", "moduleReference", "moduleDefinition",
    "elmDefinition", "edmDefinition", "moduleIdentifier",
    "definitiveIdentification", "definitiveOid", "definitiveObjIdComponentList",
    "definitiveObjIdComponent", "definitiveNameAndNumberForm",
    "definitiveNumberForm", "tagDefault", "moduleBody",
    "exports", "symbolsExported", "imports", "symbolsImported",
    "symbolsFromModuleList", "symbolsFromModule", "globalModuleReference",
    "symbolList", "symbol", "reference", "assignmentList",
    "assignment", "definedType", "definedValue", "externalTypeReference",
    "externalValueReference", "typeAssignment", "valueAssignment",
    "type", "builtinType", "referencedType", "namedType",
    "value", "builtinValue", "booleanType", "integerType",
    "namedNumberList", "namedNumber", "signedNumber",
    "integerValue", "enumeratedType", "enumerations",
    "rootEnumeration", "additionalEnumeration", "enumeration",
    "enumerationItem", "bitStringType", "namedBitList",
    "namedBit", "bitStringValue", "octetStringType",
    "nullType", "sequenceType", "extensionAndException",
    "optionalExtensionMarker", "componentTypeLists",
    "rootComponentTypeList", "extensionEndMarker",
    "extensionAdditions", "extensionAdditionList",
    "extensionAddition", "extensionAdditionGroup",
    "componentTypeList", "componentType", "sequenceOfType",
    "choiceType", "alternativeTypeLists", "rootAlternativeTypeList",
    "extensionAdditionAlternatives", "extensionAdditionAlternativesList",
    "extensionAdditionAlternative", "extensionAdditionAlternativesGroup",
    "alternativeTypeList", "objectIdentifierType",
    "characterStringType", "restrictedCharacterStringType",
    "usefulType", "constrainedType", "typeWithConstraint",
    "constraint", "constraintSpec", "subtypeConstraint",
    "elementSetSpecs", "rootElementSetSpec", "additionalElementSetSpec",
    "elementSetSpec", "unions", "intersections", "intersectionElements",
    "unionMark", "elements", "subtypeElements", "singleValue",
    "valueRange", "lowerEndpoint", "upperEndpoint",
    "lowerEndValue", "upperEndValue", "sizeConstraint",
    "innerTypeConstraints", "multipleTypeConstraints",
    "partialSpecification", "typeConstraints", "namedConstraint",
    "componentConstraint", "valueConstraint", "presenceConstraint",
    "exceptionSpec", "exceptionIdentification", "objectClassReference",
    "objectSetReference", "objectReference", "valueFieldReference",
    "word", "typeFieldReference", "definedObjectClass",
    "definedObjectSet", "objectClassAssignment", "objectClass",
    "objectClassDefn", "withSyntaxSpec", "fieldSpec",
    "typeFieldSpec", "typeOptionalitySpec", "fixedTypeValueFieldSpec",
    "valueOptionalitySpec", "primitiveFieldName", "fieldName",
    "syntaxList", "tokenOrGroupSpec", "optionalGroup",
    "requiredToken", "literal", "objectAssignment",
    "object", "objectDefn", "definedSyntax", "definedSyntaxToken",
    "setting", "objectSetAssignment", "objectSet",
    "objectSetSpec", "objectSetElements", "objectClassFieldType",
    "generalConstraint", "tableConstraint", "simpleTableConstraint",
    "componentRelationConstraint", "atNotation", "componentIdList",
    "contentsConstraint", "parameterizedAssignment",
    "parameterizedTypeAssignment", "parameterList",
    "parameter", "paramGovernor", "governor", "dummyReference",
    "parameterizedReference", "parameterizedTypeAmbiguous",
    "simpleDefinedType", "actualParameterList", "actualParameter",
    "encodingObjectReference", "encodingObjectSetReference",
    "encodingClassReferenceVariant", "definedOrBuiltinEncodingClass",
    "definedEncodingObject", "definedEncodingObjectSet",
    "definedOrBuiltinEncodingObjectSet", "elmModuleBody",
    "encodingApplicationList", "encodingApplication",
    "combinedEncodings", "completionClause", "primaryEncodings",
    "secondaryEncodings", "edmModuleBody", "edmAssignmentList",
    "edmAssignment", "builtinEncodingClassReference",
    "encodingProcedureClassReference", "encodingObjectAssignment",
    "encodingObject", "differentialEncodeDecodeObjectVariant",
    "specForEncoding", "specForDecoders", "encodingObjectSetAssignment",
    "encodingObjectSet", "encodingObjectSetSpec", "encodingObjects",
    "builtinEncodingObjectSetReference", "simpleDefinedEncodingClass"];
grammar3rdParser.EOF = antlr4.Token.EOF;
grammar3rdParser.ASSIGNMENT = 1;
grammar3rdParser.ELLIPSIS = 2;
grammar3rdParser.RANGE_SEPARATOR = 3;
grammar3rdParser.L_VERSION_BRACKET = 4;
grammar3rdParser.R_VERSION_BRACKET = 5;
grammar3rdParser.L_BRACE = 6;
grammar3rdParser.R_BRACE = 7;
grammar3rdParser.COMMA = 8;
grammar3rdParser.PERIOD = 9;
grammar3rdParser.L_PAREN = 10;
grammar3rdParser.R_PAREN = 11;
grammar3rdParser.L_BRACKET = 12;
grammar3rdParser.R_BRACKET = 13;
grammar3rdParser.HYPHEN_MINUS = 14;
grammar3rdParser.COLON = 15;
grammar3rdParser.SEMICOLON_LITERAL = 16;
grammar3rdParser.AT = 17;
grammar3rdParser.PIPE = 18;
grammar3rdParser.EXCLAM = 19;
grammar3rdParser.AMP = 20;
grammar3rdParser.NUMBER_SIGN = 21;
grammar3rdParser.ABSENT_LITERAL = 22;
grammar3rdParser.ENCODED_LITERAL = 23;
grammar3rdParser.INTERSECTION_LITERAL = 24;
grammar3rdParser.SEQUENCE_LITERAL = 25;
grammar3rdParser.ABSTRACT_SYNTAX_LITERAL = 26;
grammar3rdParser.ENCODING_CONTROL_LITERAL = 27;
grammar3rdParser.ISO646String_LITERAL = 28;
grammar3rdParser.SET_LITERAL = 29;
grammar3rdParser.ALL_LITERAL = 30;
grammar3rdParser.END_LITERAL = 31;
grammar3rdParser.MAX_LITERAL = 32;
grammar3rdParser.SETTINGS_LITERAL = 33;
grammar3rdParser.APPLICATION_LITERAL = 34;
grammar3rdParser.ENUMERATED_LITERAL = 35;
grammar3rdParser.MIN_LITERAL = 36;
grammar3rdParser.SIZE_LITERAL = 37;
grammar3rdParser.AUTOMATIC_LITERAL = 38;
grammar3rdParser.EXCEPT_LITERAL = 39;
grammar3rdParser.MINUS_INFINITY_LITERAL = 40;
grammar3rdParser.STRING_LITERAL = 41;
grammar3rdParser.BEGIN_LITERAL = 42;
grammar3rdParser.EXPLICIT_LITERAL = 43;
grammar3rdParser.NOT_A_NUMBER_LITERAL = 44;
grammar3rdParser.SYNTAX_LITERAL = 45;
grammar3rdParser.BIT_LITERAL = 46;
grammar3rdParser.EXPORTS_LITERAL = 47;
grammar3rdParser.NULL_LITERAL = 48;
grammar3rdParser.T61String_LITERAL = 49;
grammar3rdParser.BMPString_LITERAL = 50;
grammar3rdParser.EXTENSIBILITY_LITERAL = 51;
grammar3rdParser.NumericString_LITERAL = 52;
grammar3rdParser.TAGS_LITERAL = 53;
grammar3rdParser.BOOLEAN_LITERAL = 54;
grammar3rdParser.EXTERNAL_LITERAL = 55;
grammar3rdParser.OBJECT_LITERAL = 56;
grammar3rdParser.TeletexString_LITERAL = 57;
grammar3rdParser.BY_LITERAL = 58;
grammar3rdParser.FALSE_LITERAL = 59;
grammar3rdParser.ObjectDescriptor_LITERAL = 60;
grammar3rdParser.TIME_LITERAL = 61;
grammar3rdParser.CHARACTER_LITERAL = 62;
grammar3rdParser.FROM_LITERAL = 63;
grammar3rdParser.OCTET_LITERAL = 64;
grammar3rdParser.TIME_OF_DAY_LITERAL = 65;
grammar3rdParser.CHOICE_LITERAL = 66;
grammar3rdParser.GeneralizedTime_LITERAL = 67;
grammar3rdParser.OF_LITERAL = 68;
grammar3rdParser.TRUE_LITERAL = 69;
grammar3rdParser.CLASS_LITERAL = 70;
grammar3rdParser.GeneralString_LITERAL = 71;
grammar3rdParser.OID_IRI_LITERAL = 72;
grammar3rdParser.TYPE_IDENTIFIER_LITERAL = 73;
grammar3rdParser.COMPONENT_LITERAL = 74;
grammar3rdParser.GraphicString_LITERAL = 75;
grammar3rdParser.OPTIONAL_LITERAL = 76;
grammar3rdParser.UNION_LITERAL = 77;
grammar3rdParser.COMPONENTS_LITERAL = 78;
grammar3rdParser.IA5String_LITERAL = 79;
grammar3rdParser.PATTERN_LITERAL = 80;
grammar3rdParser.UNIQUE_LITERAL = 81;
grammar3rdParser.CONSTRAINED_LITERAL = 82;
grammar3rdParser.IDENTIFIER_LITERAL = 83;
grammar3rdParser.PDV_LITERAL = 84;
grammar3rdParser.UNIVERSAL_LITERAL = 85;
grammar3rdParser.CONTAINING_LITERAL = 86;
grammar3rdParser.IMPLICIT_LITERAL = 87;
grammar3rdParser.PLUS_INFINITY_LITERAL = 88;
grammar3rdParser.UniversalString_LITERAL = 89;
grammar3rdParser.DATE_LITERAL = 90;
grammar3rdParser.IMPLIED_LITERAL = 91;
grammar3rdParser.PRESENT_LITERAL = 92;
grammar3rdParser.UTCTime_LITERAL = 93;
grammar3rdParser.DATE_TIME_LITERAL = 94;
grammar3rdParser.IMPORTS_LITERAL = 95;
grammar3rdParser.PrintableString_LITERAL = 96;
grammar3rdParser.UTF8String_LITERAL = 97;
grammar3rdParser.DEFAULT_LITERAL = 98;
grammar3rdParser.INCLUDES_LITERAL = 99;
grammar3rdParser.PRIVATE_LITERAL = 100;
grammar3rdParser.VideotexString_LITERAL = 101;
grammar3rdParser.DEFINITIONS_LITERAL = 102;
grammar3rdParser.INSTANCE_LITERAL = 103;
grammar3rdParser.REAL_LITERAL = 104;
grammar3rdParser.VisibleString_LITERAL = 105;
grammar3rdParser.DURATION_LITERAL = 106;
grammar3rdParser.INSTRUCTIONS_LITERAL = 107;
grammar3rdParser.RELATIVE_OID_LITERAL = 108;
grammar3rdParser.WITH_LITERAL = 109;
grammar3rdParser.EMBEDDED_LITERAL = 110;
grammar3rdParser.INTEGER_LITERAL = 111;
grammar3rdParser.RELATIVE_OID_IRI_LITERAL = 112;
grammar3rdParser.AS_LITERAL = 113;
grammar3rdParser.COMPLETED_LITERAL = 114;
grammar3rdParser.ENCODE_LITERAL = 115;
grammar3rdParser.ENCODE_DECODE_LITERAL = 116;
grammar3rdParser.ENCODER_LITERAL = 117;
grammar3rdParser.ENCODER_DECODER_LITERAL = 118;
grammar3rdParser.DECODE_LITERAL = 119;
grammar3rdParser.DECODER_LITERAL = 120;
grammar3rdParser.ENCODING_DEFINITIONS_LITERAL = 121;
grammar3rdParser.ENCODINGS_LITERAL = 122;
grammar3rdParser.IF_LITERAL = 123;
grammar3rdParser.LINK_DEFINITIONS_LITERAL = 124;
grammar3rdParser.PER_BASIC_UNALIGNED_LITERAL = 125;
grammar3rdParser.OUTER_LITERAL = 126;
grammar3rdParser.WS = 127;
grammar3rdParser.Tag = 128;
grammar3rdParser.Comment = 129;
grammar3rdParser.Word = 130;
grammar3rdParser.ObjectClassReference = 131;
grammar3rdParser.TypeReference = 132;
grammar3rdParser.IdentifierL = 133;
grammar3rdParser.Number = 134;
grammar3rdParser.Bstring = 135;
grammar3rdParser.RULE_moduleDefinitions = 0;
grammar3rdParser.RULE_typeReference = 1;
grammar3rdParser.RULE_identifier = 2;
grammar3rdParser.RULE_valueReference = 3;
grammar3rdParser.RULE_moduleReference = 4;
grammar3rdParser.RULE_moduleDefinition = 5;
grammar3rdParser.RULE_elmDefinition = 6;
grammar3rdParser.RULE_edmDefinition = 7;
grammar3rdParser.RULE_moduleIdentifier = 8;
grammar3rdParser.RULE_definitiveIdentification = 9;
grammar3rdParser.RULE_definitiveOid = 10;
grammar3rdParser.RULE_definitiveObjIdComponentList = 11;
grammar3rdParser.RULE_definitiveObjIdComponent = 12;
grammar3rdParser.RULE_definitiveNameAndNumberForm = 13;
grammar3rdParser.RULE_definitiveNumberForm = 14;
grammar3rdParser.RULE_tagDefault = 15;
grammar3rdParser.RULE_moduleBody = 16;
grammar3rdParser.RULE_exports = 17;
grammar3rdParser.RULE_symbolsExported = 18;
grammar3rdParser.RULE_imports = 19;
grammar3rdParser.RULE_symbolsImported = 20;
grammar3rdParser.RULE_symbolsFromModuleList = 21;
grammar3rdParser.RULE_symbolsFromModule = 22;
grammar3rdParser.RULE_globalModuleReference = 23;
grammar3rdParser.RULE_symbolList = 24;
grammar3rdParser.RULE_symbol = 25;
grammar3rdParser.RULE_reference = 26;
grammar3rdParser.RULE_assignmentList = 27;
grammar3rdParser.RULE_assignment = 28;
grammar3rdParser.RULE_definedType = 29;
grammar3rdParser.RULE_definedValue = 30;
grammar3rdParser.RULE_externalTypeReference = 31;
grammar3rdParser.RULE_externalValueReference = 32;
grammar3rdParser.RULE_typeAssignment = 33;
grammar3rdParser.RULE_valueAssignment = 34;
grammar3rdParser.RULE_type = 35;
grammar3rdParser.RULE_builtinType = 36;
grammar3rdParser.RULE_referencedType = 37;
grammar3rdParser.RULE_namedType = 38;
grammar3rdParser.RULE_value = 39;
grammar3rdParser.RULE_builtinValue = 40;
grammar3rdParser.RULE_booleanType = 41;
grammar3rdParser.RULE_integerType = 42;
grammar3rdParser.RULE_namedNumberList = 43;
grammar3rdParser.RULE_namedNumber = 44;
grammar3rdParser.RULE_signedNumber = 45;
grammar3rdParser.RULE_integerValue = 46;
grammar3rdParser.RULE_enumeratedType = 47;
grammar3rdParser.RULE_enumerations = 48;
grammar3rdParser.RULE_rootEnumeration = 49;
grammar3rdParser.RULE_additionalEnumeration = 50;
grammar3rdParser.RULE_enumeration = 51;
grammar3rdParser.RULE_enumerationItem = 52;
grammar3rdParser.RULE_bitStringType = 53;
grammar3rdParser.RULE_namedBitList = 54;
grammar3rdParser.RULE_namedBit = 55;
grammar3rdParser.RULE_bitStringValue = 56;
grammar3rdParser.RULE_octetStringType = 57;
grammar3rdParser.RULE_nullType = 58;
grammar3rdParser.RULE_sequenceType = 59;
grammar3rdParser.RULE_extensionAndException = 60;
grammar3rdParser.RULE_optionalExtensionMarker = 61;
grammar3rdParser.RULE_componentTypeLists = 62;
grammar3rdParser.RULE_rootComponentTypeList = 63;
grammar3rdParser.RULE_extensionEndMarker = 64;
grammar3rdParser.RULE_extensionAdditions = 65;
grammar3rdParser.RULE_extensionAdditionList = 66;
grammar3rdParser.RULE_extensionAddition = 67;
grammar3rdParser.RULE_extensionAdditionGroup = 68;
grammar3rdParser.RULE_componentTypeList = 69;
grammar3rdParser.RULE_componentType = 70;
grammar3rdParser.RULE_sequenceOfType = 71;
grammar3rdParser.RULE_choiceType = 72;
grammar3rdParser.RULE_alternativeTypeLists = 73;
grammar3rdParser.RULE_rootAlternativeTypeList = 74;
grammar3rdParser.RULE_extensionAdditionAlternatives = 75;
grammar3rdParser.RULE_extensionAdditionAlternativesList = 76;
grammar3rdParser.RULE_extensionAdditionAlternative = 77;
grammar3rdParser.RULE_extensionAdditionAlternativesGroup = 78;
grammar3rdParser.RULE_alternativeTypeList = 79;
grammar3rdParser.RULE_objectIdentifierType = 80;
grammar3rdParser.RULE_characterStringType = 81;
grammar3rdParser.RULE_restrictedCharacterStringType = 82;
grammar3rdParser.RULE_usefulType = 83;
grammar3rdParser.RULE_constrainedType = 84;
grammar3rdParser.RULE_typeWithConstraint = 85;
grammar3rdParser.RULE_constraint = 86;
grammar3rdParser.RULE_constraintSpec = 87;
grammar3rdParser.RULE_subtypeConstraint = 88;
grammar3rdParser.RULE_elementSetSpecs = 89;
grammar3rdParser.RULE_rootElementSetSpec = 90;
grammar3rdParser.RULE_additionalElementSetSpec = 91;
grammar3rdParser.RULE_elementSetSpec = 92;
grammar3rdParser.RULE_unions = 93;
grammar3rdParser.RULE_intersections = 94;
grammar3rdParser.RULE_intersectionElements = 95;
grammar3rdParser.RULE_unionMark = 96;
grammar3rdParser.RULE_elements = 97;
grammar3rdParser.RULE_subtypeElements = 98;
grammar3rdParser.RULE_singleValue = 99;
grammar3rdParser.RULE_valueRange = 100;
grammar3rdParser.RULE_lowerEndpoint = 101;
grammar3rdParser.RULE_upperEndpoint = 102;
grammar3rdParser.RULE_lowerEndValue = 103;
grammar3rdParser.RULE_upperEndValue = 104;
grammar3rdParser.RULE_sizeConstraint = 105;
grammar3rdParser.RULE_innerTypeConstraints = 106;
grammar3rdParser.RULE_multipleTypeConstraints = 107;
grammar3rdParser.RULE_partialSpecification = 108;
grammar3rdParser.RULE_typeConstraints = 109;
grammar3rdParser.RULE_namedConstraint = 110;
grammar3rdParser.RULE_componentConstraint = 111;
grammar3rdParser.RULE_valueConstraint = 112;
grammar3rdParser.RULE_presenceConstraint = 113;
grammar3rdParser.RULE_exceptionSpec = 114;
grammar3rdParser.RULE_exceptionIdentification = 115;
grammar3rdParser.RULE_objectClassReference = 116;
grammar3rdParser.RULE_objectSetReference = 117;
grammar3rdParser.RULE_objectReference = 118;
grammar3rdParser.RULE_valueFieldReference = 119;
grammar3rdParser.RULE_word = 120;
grammar3rdParser.RULE_typeFieldReference = 121;
grammar3rdParser.RULE_definedObjectClass = 122;
grammar3rdParser.RULE_definedObjectSet = 123;
grammar3rdParser.RULE_objectClassAssignment = 124;
grammar3rdParser.RULE_objectClass = 125;
grammar3rdParser.RULE_objectClassDefn = 126;
grammar3rdParser.RULE_withSyntaxSpec = 127;
grammar3rdParser.RULE_fieldSpec = 128;
grammar3rdParser.RULE_typeFieldSpec = 129;
grammar3rdParser.RULE_typeOptionalitySpec = 130;
grammar3rdParser.RULE_fixedTypeValueFieldSpec = 131;
grammar3rdParser.RULE_valueOptionalitySpec = 132;
grammar3rdParser.RULE_primitiveFieldName = 133;
grammar3rdParser.RULE_fieldName = 134;
grammar3rdParser.RULE_syntaxList = 135;
grammar3rdParser.RULE_tokenOrGroupSpec = 136;
grammar3rdParser.RULE_optionalGroup = 137;
grammar3rdParser.RULE_requiredToken = 138;
grammar3rdParser.RULE_literal = 139;
grammar3rdParser.RULE_objectAssignment = 140;
grammar3rdParser.RULE_object = 141;
grammar3rdParser.RULE_objectDefn = 142;
grammar3rdParser.RULE_definedSyntax = 143;
grammar3rdParser.RULE_definedSyntaxToken = 144;
grammar3rdParser.RULE_setting = 145;
grammar3rdParser.RULE_objectSetAssignment = 146;
grammar3rdParser.RULE_objectSet = 147;
grammar3rdParser.RULE_objectSetSpec = 148;
grammar3rdParser.RULE_objectSetElements = 149;
grammar3rdParser.RULE_objectClassFieldType = 150;
grammar3rdParser.RULE_generalConstraint = 151;
grammar3rdParser.RULE_tableConstraint = 152;
grammar3rdParser.RULE_simpleTableConstraint = 153;
grammar3rdParser.RULE_componentRelationConstraint = 154;
grammar3rdParser.RULE_atNotation = 155;
grammar3rdParser.RULE_componentIdList = 156;
grammar3rdParser.RULE_contentsConstraint = 157;
grammar3rdParser.RULE_parameterizedAssignment = 158;
grammar3rdParser.RULE_parameterizedTypeAssignment = 159;
grammar3rdParser.RULE_parameterList = 160;
grammar3rdParser.RULE_parameter = 161;
grammar3rdParser.RULE_paramGovernor = 162;
grammar3rdParser.RULE_governor = 163;
grammar3rdParser.RULE_dummyReference = 164;
grammar3rdParser.RULE_parameterizedReference = 165;
grammar3rdParser.RULE_parameterizedTypeAmbiguous = 166;
grammar3rdParser.RULE_simpleDefinedType = 167;
grammar3rdParser.RULE_actualParameterList = 168;
grammar3rdParser.RULE_actualParameter = 169;
grammar3rdParser.RULE_encodingObjectReference = 170;
grammar3rdParser.RULE_encodingObjectSetReference = 171;
grammar3rdParser.RULE_encodingClassReferenceVariant = 172;
grammar3rdParser.RULE_definedOrBuiltinEncodingClass = 173;
grammar3rdParser.RULE_definedEncodingObject = 174;
grammar3rdParser.RULE_definedEncodingObjectSet = 175;
grammar3rdParser.RULE_definedOrBuiltinEncodingObjectSet = 176;
grammar3rdParser.RULE_elmModuleBody = 177;
grammar3rdParser.RULE_encodingApplicationList = 178;
grammar3rdParser.RULE_encodingApplication = 179;
grammar3rdParser.RULE_combinedEncodings = 180;
grammar3rdParser.RULE_completionClause = 181;
grammar3rdParser.RULE_primaryEncodings = 182;
grammar3rdParser.RULE_secondaryEncodings = 183;
grammar3rdParser.RULE_edmModuleBody = 184;
grammar3rdParser.RULE_edmAssignmentList = 185;
grammar3rdParser.RULE_edmAssignment = 186;
grammar3rdParser.RULE_builtinEncodingClassReference = 187;
grammar3rdParser.RULE_encodingProcedureClassReference = 188;
grammar3rdParser.RULE_encodingObjectAssignment = 189;
grammar3rdParser.RULE_encodingObject = 190;
grammar3rdParser.RULE_differentialEncodeDecodeObjectVariant = 191;
grammar3rdParser.RULE_specForEncoding = 192;
grammar3rdParser.RULE_specForDecoders = 193;
grammar3rdParser.RULE_encodingObjectSetAssignment = 194;
grammar3rdParser.RULE_encodingObjectSet = 195;
grammar3rdParser.RULE_encodingObjectSetSpec = 196;
grammar3rdParser.RULE_encodingObjects = 197;
grammar3rdParser.RULE_builtinEncodingObjectSetReference = 198;
grammar3rdParser.RULE_simpleDefinedEncodingClass = 199;
export class ModuleDefinitionsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.moduleDefinition = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ModuleDefinitionContext);
            }
            else {
                return this.getTypedRuleContext(ModuleDefinitionContext, i);
            }
        };
        this.elmDefinition = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ElmDefinitionContext);
            }
            else {
                return this.getTypedRuleContext(ElmDefinitionContext, i);
            }
        };
        this.edmDefinition = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EdmDefinitionContext);
            }
            else {
                return this.getTypedRuleContext(EdmDefinitionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_moduleDefinitions;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterModuleDefinitions(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitModuleDefinitions(this);
        }
    }
}
class TypeReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_typeReference;
    }
    Word() {
        return this.getToken(grammar3rdParser.Word, 0);
    }
    ;
    ObjectClassReference() {
        return this.getToken(grammar3rdParser.ObjectClassReference, 0);
    }
    ;
    TypeReference() {
        return this.getToken(grammar3rdParser.TypeReference, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterTypeReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitTypeReference(this);
        }
    }
}
class IdentifierContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_identifier;
    }
    IdentifierL() {
        return this.getToken(grammar3rdParser.IdentifierL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterIdentifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitIdentifier(this);
        }
    }
}
class ValueReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_valueReference;
    }
    IdentifierL() {
        return this.getToken(grammar3rdParser.IdentifierL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterValueReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitValueReference(this);
        }
    }
}
class ModuleReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_moduleReference;
    }
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterModuleReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitModuleReference(this);
        }
    }
}
class ModuleDefinitionContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_moduleDefinition;
    }
    moduleIdentifier() {
        return this.getTypedRuleContext(ModuleIdentifierContext, 0);
    }
    ;
    DEFINITIONS_LITERAL() {
        return this.getToken(grammar3rdParser.DEFINITIONS_LITERAL, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    BEGIN_LITERAL() {
        return this.getToken(grammar3rdParser.BEGIN_LITERAL, 0);
    }
    ;
    END_LITERAL() {
        return this.getToken(grammar3rdParser.END_LITERAL, 0);
    }
    ;
    tagDefault() {
        return this.getTypedRuleContext(TagDefaultContext, 0);
    }
    ;
    moduleBody() {
        return this.getTypedRuleContext(ModuleBodyContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterModuleDefinition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitModuleDefinition(this);
        }
    }
}
class ElmDefinitionContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_elmDefinition;
    }
    moduleIdentifier() {
        return this.getTypedRuleContext(ModuleIdentifierContext, 0);
    }
    ;
    LINK_DEFINITIONS_LITERAL() {
        return this.getToken(grammar3rdParser.LINK_DEFINITIONS_LITERAL, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    BEGIN_LITERAL() {
        return this.getToken(grammar3rdParser.BEGIN_LITERAL, 0);
    }
    ;
    elmModuleBody() {
        return this.getTypedRuleContext(ElmModuleBodyContext, 0);
    }
    ;
    END_LITERAL() {
        return this.getToken(grammar3rdParser.END_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterElmDefinition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitElmDefinition(this);
        }
    }
}
class EdmDefinitionContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_edmDefinition;
    }
    moduleIdentifier() {
        return this.getTypedRuleContext(ModuleIdentifierContext, 0);
    }
    ;
    ENCODING_DEFINITIONS_LITERAL() {
        return this.getToken(grammar3rdParser.ENCODING_DEFINITIONS_LITERAL, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    BEGIN_LITERAL() {
        return this.getToken(grammar3rdParser.BEGIN_LITERAL, 0);
    }
    ;
    edmModuleBody() {
        return this.getTypedRuleContext(EdmModuleBodyContext, 0);
    }
    ;
    END_LITERAL() {
        return this.getToken(grammar3rdParser.END_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEdmDefinition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEdmDefinition(this);
        }
    }
}
class ModuleIdentifierContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_moduleIdentifier;
    }
    moduleReference() {
        return this.getTypedRuleContext(ModuleReferenceContext, 0);
    }
    ;
    definitiveIdentification() {
        return this.getTypedRuleContext(DefinitiveIdentificationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterModuleIdentifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitModuleIdentifier(this);
        }
    }
}
class DefinitiveIdentificationContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definitiveIdentification;
    }
    definitiveOid() {
        return this.getTypedRuleContext(DefinitiveOidContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinitiveIdentification(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinitiveIdentification(this);
        }
    }
}
class DefinitiveOidContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definitiveOid;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    definitiveObjIdComponentList() {
        return this.getTypedRuleContext(DefinitiveObjIdComponentListContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinitiveOid(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinitiveOid(this);
        }
    }
}
class DefinitiveObjIdComponentListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.definitiveObjIdComponent = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(DefinitiveObjIdComponentContext);
            }
            else {
                return this.getTypedRuleContext(DefinitiveObjIdComponentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definitiveObjIdComponentList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinitiveObjIdComponentList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinitiveObjIdComponentList(this);
        }
    }
}
class DefinitiveObjIdComponentContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definitiveObjIdComponent;
    }
    definitiveNameAndNumberForm() {
        return this.getTypedRuleContext(DefinitiveNameAndNumberFormContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinitiveObjIdComponent(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinitiveObjIdComponent(this);
        }
    }
}
class DefinitiveNameAndNumberFormContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definitiveNameAndNumberForm;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    L_PAREN() {
        return this.getToken(grammar3rdParser.L_PAREN, 0);
    }
    ;
    definitiveNumberForm() {
        return this.getTypedRuleContext(DefinitiveNumberFormContext, 0);
    }
    ;
    R_PAREN() {
        return this.getToken(grammar3rdParser.R_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinitiveNameAndNumberForm(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinitiveNameAndNumberForm(this);
        }
    }
}
class DefinitiveNumberFormContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definitiveNumberForm;
    }
    Number() {
        return this.getToken(grammar3rdParser.Number, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinitiveNumberForm(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinitiveNumberForm(this);
        }
    }
}
class TagDefaultContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_tagDefault;
    }
    EXPLICIT_LITERAL() {
        return this.getToken(grammar3rdParser.EXPLICIT_LITERAL, 0);
    }
    ;
    TAGS_LITERAL() {
        return this.getToken(grammar3rdParser.TAGS_LITERAL, 0);
    }
    ;
    IMPLICIT_LITERAL() {
        return this.getToken(grammar3rdParser.IMPLICIT_LITERAL, 0);
    }
    ;
    AUTOMATIC_LITERAL() {
        return this.getToken(grammar3rdParser.AUTOMATIC_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterTagDefault(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitTagDefault(this);
        }
    }
}
class ModuleBodyContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_moduleBody;
    }
    assignmentList() {
        return this.getTypedRuleContext(AssignmentListContext, 0);
    }
    ;
    exports() {
        return this.getTypedRuleContext(ExportsContext, 0);
    }
    ;
    imports() {
        return this.getTypedRuleContext(ImportsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterModuleBody(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitModuleBody(this);
        }
    }
}
class ExportsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_exports;
    }
    EXPORTS_LITERAL() {
        return this.getToken(grammar3rdParser.EXPORTS_LITERAL, 0);
    }
    ;
    SEMICOLON_LITERAL() {
        return this.getToken(grammar3rdParser.SEMICOLON_LITERAL, 0);
    }
    ;
    symbolsExported() {
        return this.getTypedRuleContext(SymbolsExportedContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterExports(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitExports(this);
        }
    }
}
class SymbolsExportedContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_symbolsExported;
    }
    symbolList() {
        return this.getTypedRuleContext(SymbolListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSymbolsExported(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSymbolsExported(this);
        }
    }
}
class ImportsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_imports;
    }
    IMPORTS_LITERAL() {
        return this.getToken(grammar3rdParser.IMPORTS_LITERAL, 0);
    }
    ;
    SEMICOLON_LITERAL() {
        return this.getToken(grammar3rdParser.SEMICOLON_LITERAL, 0);
    }
    ;
    symbolsImported() {
        return this.getTypedRuleContext(SymbolsImportedContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterImports(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitImports(this);
        }
    }
}
class SymbolsImportedContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_symbolsImported;
    }
    symbolsFromModuleList() {
        return this.getTypedRuleContext(SymbolsFromModuleListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSymbolsImported(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSymbolsImported(this);
        }
    }
}
class SymbolsFromModuleListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.symbolsFromModule = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SymbolsFromModuleContext);
            }
            else {
                return this.getTypedRuleContext(SymbolsFromModuleContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_symbolsFromModuleList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSymbolsFromModuleList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSymbolsFromModuleList(this);
        }
    }
}
class SymbolsFromModuleContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_symbolsFromModule;
    }
    symbolList() {
        return this.getTypedRuleContext(SymbolListContext, 0);
    }
    ;
    FROM_LITERAL() {
        return this.getToken(grammar3rdParser.FROM_LITERAL, 0);
    }
    ;
    globalModuleReference() {
        return this.getTypedRuleContext(GlobalModuleReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSymbolsFromModule(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSymbolsFromModule(this);
        }
    }
}
class GlobalModuleReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_globalModuleReference;
    }
    moduleReference() {
        return this.getTypedRuleContext(ModuleReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterGlobalModuleReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitGlobalModuleReference(this);
        }
    }
}
class SymbolListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.symbol = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SymbolContext);
            }
            else {
                return this.getTypedRuleContext(SymbolContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_symbolList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSymbolList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSymbolList(this);
        }
    }
}
class SymbolContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_symbol;
    }
    reference() {
        return this.getTypedRuleContext(ReferenceContext, 0);
    }
    ;
    parameterizedReference() {
        return this.getTypedRuleContext(ParameterizedReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSymbol(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSymbol(this);
        }
    }
}
class ReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_reference;
    }
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    valueReference() {
        return this.getTypedRuleContext(ValueReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitReference(this);
        }
    }
}
class AssignmentListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.assignment = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AssignmentContext);
            }
            else {
                return this.getTypedRuleContext(AssignmentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_assignmentList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterAssignmentList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitAssignmentList(this);
        }
    }
}
class AssignmentContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_assignment;
    }
    typeAssignment() {
        return this.getTypedRuleContext(TypeAssignmentContext, 0);
    }
    ;
    valueAssignment() {
        return this.getTypedRuleContext(ValueAssignmentContext, 0);
    }
    ;
    objectClassAssignment() {
        return this.getTypedRuleContext(ObjectClassAssignmentContext, 0);
    }
    ;
    objectAssignment() {
        return this.getTypedRuleContext(ObjectAssignmentContext, 0);
    }
    ;
    objectSetAssignment() {
        return this.getTypedRuleContext(ObjectSetAssignmentContext, 0);
    }
    ;
    parameterizedAssignment() {
        return this.getTypedRuleContext(ParameterizedAssignmentContext, 0);
    }
    ;
    Tag() {
        return this.getToken(grammar3rdParser.Tag, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitAssignment(this);
        }
    }
}
class DefinedTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedType;
    }
    externalTypeReference() {
        return this.getTypedRuleContext(ExternalTypeReferenceContext, 0);
    }
    ;
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    parameterizedTypeAmbiguous() {
        return this.getTypedRuleContext(ParameterizedTypeAmbiguousContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinedType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinedType(this);
        }
    }
}
class DefinedValueContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedValue;
    }
    externalValueReference() {
        return this.getTypedRuleContext(ExternalValueReferenceContext, 0);
    }
    ;
    valueReference() {
        return this.getTypedRuleContext(ValueReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinedValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinedValue(this);
        }
    }
}
class ExternalTypeReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_externalTypeReference;
    }
    moduleReference() {
        return this.getTypedRuleContext(ModuleReferenceContext, 0);
    }
    ;
    PERIOD() {
        return this.getToken(grammar3rdParser.PERIOD, 0);
    }
    ;
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterExternalTypeReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitExternalTypeReference(this);
        }
    }
}
class ExternalValueReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_externalValueReference;
    }
    moduleReference() {
        return this.getTypedRuleContext(ModuleReferenceContext, 0);
    }
    ;
    PERIOD() {
        return this.getToken(grammar3rdParser.PERIOD, 0);
    }
    ;
    valueReference() {
        return this.getTypedRuleContext(ValueReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterExternalValueReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitExternalValueReference(this);
        }
    }
}
class TypeAssignmentContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_typeAssignment;
    }
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterTypeAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitTypeAssignment(this);
        }
    }
}
class ValueAssignmentContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_valueAssignment;
    }
    valueReference() {
        return this.getTypedRuleContext(ValueReferenceContext, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterValueAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitValueAssignment(this);
        }
    }
}
class TypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_type;
    }
    builtinType() {
        return this.getTypedRuleContext(BuiltinTypeContext, 0);
    }
    ;
    referencedType() {
        return this.getTypedRuleContext(ReferencedTypeContext, 0);
    }
    ;
    constrainedType() {
        return this.getTypedRuleContext(ConstrainedTypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitType(this);
        }
    }
}
class BuiltinTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_builtinType;
    }
    bitStringType() {
        return this.getTypedRuleContext(BitStringTypeContext, 0);
    }
    ;
    booleanType() {
        return this.getTypedRuleContext(BooleanTypeContext, 0);
    }
    ;
    characterStringType() {
        return this.getTypedRuleContext(CharacterStringTypeContext, 0);
    }
    ;
    choiceType() {
        return this.getTypedRuleContext(ChoiceTypeContext, 0);
    }
    ;
    enumeratedType() {
        return this.getTypedRuleContext(EnumeratedTypeContext, 0);
    }
    ;
    integerType() {
        return this.getTypedRuleContext(IntegerTypeContext, 0);
    }
    ;
    nullType() {
        return this.getTypedRuleContext(NullTypeContext, 0);
    }
    ;
    objectClassFieldType() {
        return this.getTypedRuleContext(ObjectClassFieldTypeContext, 0);
    }
    ;
    objectIdentifierType() {
        return this.getTypedRuleContext(ObjectIdentifierTypeContext, 0);
    }
    ;
    octetStringType() {
        return this.getTypedRuleContext(OctetStringTypeContext, 0);
    }
    ;
    sequenceType() {
        return this.getTypedRuleContext(SequenceTypeContext, 0);
    }
    ;
    sequenceOfType() {
        return this.getTypedRuleContext(SequenceOfTypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterBuiltinType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitBuiltinType(this);
        }
    }
}
class ReferencedTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_referencedType;
    }
    definedType() {
        return this.getTypedRuleContext(DefinedTypeContext, 0);
    }
    ;
    usefulType() {
        return this.getTypedRuleContext(UsefulTypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterReferencedType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitReferencedType(this);
        }
    }
}
class NamedTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_namedType;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterNamedType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitNamedType(this);
        }
    }
}
class ValueContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_value;
    }
    builtinValue() {
        return this.getTypedRuleContext(BuiltinValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitValue(this);
        }
    }
}
class BuiltinValueContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_builtinValue;
    }
    bitStringValue() {
        return this.getTypedRuleContext(BitStringValueContext, 0);
    }
    ;
    integerValue() {
        return this.getTypedRuleContext(IntegerValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterBuiltinValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitBuiltinValue(this);
        }
    }
}
class BooleanTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_booleanType;
    }
    BOOLEAN_LITERAL() {
        return this.getToken(grammar3rdParser.BOOLEAN_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterBooleanType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitBooleanType(this);
        }
    }
}
class IntegerTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_integerType;
    }
    INTEGER_LITERAL() {
        return this.getToken(grammar3rdParser.INTEGER_LITERAL, 0);
    }
    ;
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    namedNumberList() {
        return this.getTypedRuleContext(NamedNumberListContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterIntegerType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitIntegerType(this);
        }
    }
}
class NamedNumberListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.namedNumber = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NamedNumberContext);
            }
            else {
                return this.getTypedRuleContext(NamedNumberContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_namedNumberList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterNamedNumberList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitNamedNumberList(this);
        }
    }
}
class NamedNumberContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_namedNumber;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    L_PAREN() {
        return this.getToken(grammar3rdParser.L_PAREN, 0);
    }
    ;
    signedNumber() {
        return this.getTypedRuleContext(SignedNumberContext, 0);
    }
    ;
    R_PAREN() {
        return this.getToken(grammar3rdParser.R_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterNamedNumber(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitNamedNumber(this);
        }
    }
}
class SignedNumberContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_signedNumber;
    }
    Number() {
        return this.getToken(grammar3rdParser.Number, 0);
    }
    ;
    HYPHEN_MINUS() {
        return this.getToken(grammar3rdParser.HYPHEN_MINUS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSignedNumber(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSignedNumber(this);
        }
    }
}
class IntegerValueContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_integerValue;
    }
    signedNumber() {
        return this.getTypedRuleContext(SignedNumberContext, 0);
    }
    ;
    valueReference() {
        return this.getTypedRuleContext(ValueReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterIntegerValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitIntegerValue(this);
        }
    }
}
class EnumeratedTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_enumeratedType;
    }
    ENUMERATED_LITERAL() {
        return this.getToken(grammar3rdParser.ENUMERATED_LITERAL, 0);
    }
    ;
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    enumerations() {
        return this.getTypedRuleContext(EnumerationsContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEnumeratedType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEnumeratedType(this);
        }
    }
}
class EnumerationsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_enumerations;
    }
    rootEnumeration() {
        return this.getTypedRuleContext(RootEnumerationContext, 0);
    }
    ;
    ELLIPSIS() {
        return this.getToken(grammar3rdParser.ELLIPSIS, 0);
    }
    ;
    exceptionSpec() {
        return this.getTypedRuleContext(ExceptionSpecContext, 0);
    }
    ;
    additionalEnumeration() {
        return this.getTypedRuleContext(AdditionalEnumerationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEnumerations(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEnumerations(this);
        }
    }
}
class RootEnumerationContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_rootEnumeration;
    }
    enumeration() {
        return this.getTypedRuleContext(EnumerationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterRootEnumeration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitRootEnumeration(this);
        }
    }
}
class AdditionalEnumerationContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_additionalEnumeration;
    }
    enumeration() {
        return this.getTypedRuleContext(EnumerationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterAdditionalEnumeration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitAdditionalEnumeration(this);
        }
    }
}
class EnumerationContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.enumerationItem = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EnumerationItemContext);
            }
            else {
                return this.getTypedRuleContext(EnumerationItemContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_enumeration;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEnumeration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEnumeration(this);
        }
    }
}
class EnumerationItemContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_enumerationItem;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    namedNumber() {
        return this.getTypedRuleContext(NamedNumberContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEnumerationItem(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEnumerationItem(this);
        }
    }
}
class BitStringTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_bitStringType;
    }
    BIT_LITERAL() {
        return this.getToken(grammar3rdParser.BIT_LITERAL, 0);
    }
    ;
    STRING_LITERAL() {
        return this.getToken(grammar3rdParser.STRING_LITERAL, 0);
    }
    ;
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    namedBitList() {
        return this.getTypedRuleContext(NamedBitListContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterBitStringType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitBitStringType(this);
        }
    }
}
class NamedBitListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.namedBit = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NamedBitContext);
            }
            else {
                return this.getTypedRuleContext(NamedBitContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_namedBitList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterNamedBitList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitNamedBitList(this);
        }
    }
}
class NamedBitContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_namedBit;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    L_PAREN() {
        return this.getToken(grammar3rdParser.L_PAREN, 0);
    }
    ;
    Number() {
        return this.getToken(grammar3rdParser.Number, 0);
    }
    ;
    R_PAREN() {
        return this.getToken(grammar3rdParser.R_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterNamedBit(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitNamedBit(this);
        }
    }
}
class BitStringValueContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_bitStringValue;
    }
    Bstring() {
        return this.getToken(grammar3rdParser.Bstring, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterBitStringValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitBitStringValue(this);
        }
    }
}
class OctetStringTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_octetStringType;
    }
    OCTET_LITERAL() {
        return this.getToken(grammar3rdParser.OCTET_LITERAL, 0);
    }
    ;
    STRING_LITERAL() {
        return this.getToken(grammar3rdParser.STRING_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterOctetStringType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitOctetStringType(this);
        }
    }
}
class NullTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_nullType;
    }
    NULL_LITERAL() {
        return this.getToken(grammar3rdParser.NULL_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterNullType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitNullType(this);
        }
    }
}
class SequenceTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_sequenceType;
    }
    SEQUENCE_LITERAL() {
        return this.getToken(grammar3rdParser.SEQUENCE_LITERAL, 0);
    }
    ;
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    extensionAndException() {
        return this.getTypedRuleContext(ExtensionAndExceptionContext, 0);
    }
    ;
    optionalExtensionMarker() {
        return this.getTypedRuleContext(OptionalExtensionMarkerContext, 0);
    }
    ;
    componentTypeLists() {
        return this.getTypedRuleContext(ComponentTypeListsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSequenceType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSequenceType(this);
        }
    }
}
class ExtensionAndExceptionContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAndException;
    }
    ELLIPSIS() {
        return this.getToken(grammar3rdParser.ELLIPSIS, 0);
    }
    ;
    exceptionSpec() {
        return this.getTypedRuleContext(ExceptionSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterExtensionAndException(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitExtensionAndException(this);
        }
    }
}
class OptionalExtensionMarkerContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_optionalExtensionMarker;
    }
    COMMA() {
        return this.getToken(grammar3rdParser.COMMA, 0);
    }
    ;
    ELLIPSIS() {
        return this.getToken(grammar3rdParser.ELLIPSIS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterOptionalExtensionMarker(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitOptionalExtensionMarker(this);
        }
    }
}
class ComponentTypeListsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.rootComponentTypeList = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(RootComponentTypeListContext);
            }
            else {
                return this.getTypedRuleContext(RootComponentTypeListContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_componentTypeLists;
    }
    Tag() {
        return this.getToken(grammar3rdParser.Tag, 0);
    }
    ;
    extensionAndException() {
        return this.getTypedRuleContext(ExtensionAndExceptionContext, 0);
    }
    ;
    extensionAdditions() {
        return this.getTypedRuleContext(ExtensionAdditionsContext, 0);
    }
    ;
    optionalExtensionMarker() {
        return this.getTypedRuleContext(OptionalExtensionMarkerContext, 0);
    }
    ;
    extensionEndMarker() {
        return this.getTypedRuleContext(ExtensionEndMarkerContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterComponentTypeLists(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitComponentTypeLists(this);
        }
    }
}
class RootComponentTypeListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_rootComponentTypeList;
    }
    componentTypeList() {
        return this.getTypedRuleContext(ComponentTypeListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterRootComponentTypeList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitRootComponentTypeList(this);
        }
    }
}
class ExtensionEndMarkerContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionEndMarker;
    }
    COMMA() {
        return this.getToken(grammar3rdParser.COMMA, 0);
    }
    ;
    ELLIPSIS() {
        return this.getToken(grammar3rdParser.ELLIPSIS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterExtensionEndMarker(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitExtensionEndMarker(this);
        }
    }
}
class ExtensionAdditionsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAdditions;
    }
    COMMA() {
        return this.getToken(grammar3rdParser.COMMA, 0);
    }
    ;
    extensionAdditionList() {
        return this.getTypedRuleContext(ExtensionAdditionListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterExtensionAdditions(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitExtensionAdditions(this);
        }
    }
}
class ExtensionAdditionListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.extensionAddition = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExtensionAdditionContext);
            }
            else {
                return this.getTypedRuleContext(ExtensionAdditionContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAdditionList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterExtensionAdditionList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitExtensionAdditionList(this);
        }
    }
}
class ExtensionAdditionContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAddition;
    }
    componentType() {
        return this.getTypedRuleContext(ComponentTypeContext, 0);
    }
    ;
    extensionAdditionGroup() {
        return this.getTypedRuleContext(ExtensionAdditionGroupContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterExtensionAddition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitExtensionAddition(this);
        }
    }
}
class ExtensionAdditionGroupContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAdditionGroup;
    }
    L_VERSION_BRACKET() {
        return this.getToken(grammar3rdParser.L_VERSION_BRACKET, 0);
    }
    ;
    componentTypeList() {
        return this.getTypedRuleContext(ComponentTypeListContext, 0);
    }
    ;
    R_VERSION_BRACKET() {
        return this.getToken(grammar3rdParser.R_VERSION_BRACKET, 0);
    }
    ;
    Tag() {
        return this.getToken(grammar3rdParser.Tag, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterExtensionAdditionGroup(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitExtensionAdditionGroup(this);
        }
    }
}
class ComponentTypeListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.componentType = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ComponentTypeContext);
            }
            else {
                return this.getTypedRuleContext(ComponentTypeContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.Tag = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.Tag);
            }
            else {
                return this.getToken(grammar3rdParser.Tag, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_componentTypeList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterComponentTypeList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitComponentTypeList(this);
        }
    }
}
class ComponentTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_componentType;
    }
    namedType() {
        return this.getTypedRuleContext(NamedTypeContext, 0);
    }
    ;
    OPTIONAL_LITERAL() {
        return this.getToken(grammar3rdParser.OPTIONAL_LITERAL, 0);
    }
    ;
    DEFAULT_LITERAL() {
        return this.getToken(grammar3rdParser.DEFAULT_LITERAL, 0);
    }
    ;
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterComponentType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitComponentType(this);
        }
    }
}
class SequenceOfTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_sequenceOfType;
    }
    SEQUENCE_LITERAL() {
        return this.getToken(grammar3rdParser.SEQUENCE_LITERAL, 0);
    }
    ;
    OF_LITERAL() {
        return this.getToken(grammar3rdParser.OF_LITERAL, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    namedType() {
        return this.getTypedRuleContext(NamedTypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSequenceOfType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSequenceOfType(this);
        }
    }
}
class ChoiceTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_choiceType;
    }
    CHOICE_LITERAL() {
        return this.getToken(grammar3rdParser.CHOICE_LITERAL, 0);
    }
    ;
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    alternativeTypeLists() {
        return this.getTypedRuleContext(AlternativeTypeListsContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterChoiceType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitChoiceType(this);
        }
    }
}
class AlternativeTypeListsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_alternativeTypeLists;
    }
    rootAlternativeTypeList() {
        return this.getTypedRuleContext(RootAlternativeTypeListContext, 0);
    }
    ;
    COMMA() {
        return this.getToken(grammar3rdParser.COMMA, 0);
    }
    ;
    extensionAndException() {
        return this.getTypedRuleContext(ExtensionAndExceptionContext, 0);
    }
    ;
    extensionAdditionAlternatives() {
        return this.getTypedRuleContext(ExtensionAdditionAlternativesContext, 0);
    }
    ;
    optionalExtensionMarker() {
        return this.getTypedRuleContext(OptionalExtensionMarkerContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterAlternativeTypeLists(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitAlternativeTypeLists(this);
        }
    }
}
class RootAlternativeTypeListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_rootAlternativeTypeList;
    }
    alternativeTypeList() {
        return this.getTypedRuleContext(AlternativeTypeListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterRootAlternativeTypeList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitRootAlternativeTypeList(this);
        }
    }
}
class ExtensionAdditionAlternativesContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAdditionAlternatives;
    }
    COMMA() {
        return this.getToken(grammar3rdParser.COMMA, 0);
    }
    ;
    extensionAdditionAlternativesList() {
        return this.getTypedRuleContext(ExtensionAdditionAlternativesListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterExtensionAdditionAlternatives(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitExtensionAdditionAlternatives(this);
        }
    }
}
class ExtensionAdditionAlternativesListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.extensionAdditionAlternative = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExtensionAdditionAlternativeContext);
            }
            else {
                return this.getTypedRuleContext(ExtensionAdditionAlternativeContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAdditionAlternativesList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterExtensionAdditionAlternativesList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitExtensionAdditionAlternativesList(this);
        }
    }
}
class ExtensionAdditionAlternativeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAdditionAlternative;
    }
    extensionAdditionAlternativesGroup() {
        return this.getTypedRuleContext(ExtensionAdditionAlternativesGroupContext, 0);
    }
    ;
    namedType() {
        return this.getTypedRuleContext(NamedTypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterExtensionAdditionAlternative(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitExtensionAdditionAlternative(this);
        }
    }
}
class ExtensionAdditionAlternativesGroupContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAdditionAlternativesGroup;
    }
    L_VERSION_BRACKET() {
        return this.getToken(grammar3rdParser.L_VERSION_BRACKET, 0);
    }
    ;
    alternativeTypeList() {
        return this.getTypedRuleContext(AlternativeTypeListContext, 0);
    }
    ;
    R_VERSION_BRACKET() {
        return this.getToken(grammar3rdParser.R_VERSION_BRACKET, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterExtensionAdditionAlternativesGroup(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitExtensionAdditionAlternativesGroup(this);
        }
    }
}
class AlternativeTypeListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.namedType = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NamedTypeContext);
            }
            else {
                return this.getTypedRuleContext(NamedTypeContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_alternativeTypeList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterAlternativeTypeList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitAlternativeTypeList(this);
        }
    }
}
class ObjectIdentifierTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectIdentifierType;
    }
    OBJECT_LITERAL() {
        return this.getToken(grammar3rdParser.OBJECT_LITERAL, 0);
    }
    ;
    IDENTIFIER_LITERAL() {
        return this.getToken(grammar3rdParser.IDENTIFIER_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterObjectIdentifierType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitObjectIdentifierType(this);
        }
    }
}
class CharacterStringTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_characterStringType;
    }
    restrictedCharacterStringType() {
        return this.getTypedRuleContext(RestrictedCharacterStringTypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterCharacterStringType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitCharacterStringType(this);
        }
    }
}
class RestrictedCharacterStringTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_restrictedCharacterStringType;
    }
    PrintableString_LITERAL() {
        return this.getToken(grammar3rdParser.PrintableString_LITERAL, 0);
    }
    ;
    UTF8String_LITERAL() {
        return this.getToken(grammar3rdParser.UTF8String_LITERAL, 0);
    }
    ;
    VisibleString_LITERAL() {
        return this.getToken(grammar3rdParser.VisibleString_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterRestrictedCharacterStringType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitRestrictedCharacterStringType(this);
        }
    }
}
class UsefulTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_usefulType;
    }
    UTCTime_LITERAL() {
        return this.getToken(grammar3rdParser.UTCTime_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterUsefulType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitUsefulType(this);
        }
    }
}
class ConstrainedTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.constraint = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ConstraintContext);
            }
            else {
                return this.getTypedRuleContext(ConstraintContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_constrainedType;
    }
    builtinType() {
        return this.getTypedRuleContext(BuiltinTypeContext, 0);
    }
    ;
    referencedType() {
        return this.getTypedRuleContext(ReferencedTypeContext, 0);
    }
    ;
    typeWithConstraint() {
        return this.getTypedRuleContext(TypeWithConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterConstrainedType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitConstrainedType(this);
        }
    }
}
class TypeWithConstraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_typeWithConstraint;
    }
    SEQUENCE_LITERAL() {
        return this.getToken(grammar3rdParser.SEQUENCE_LITERAL, 0);
    }
    ;
    constraint() {
        return this.getTypedRuleContext(ConstraintContext, 0);
    }
    ;
    OF_LITERAL() {
        return this.getToken(grammar3rdParser.OF_LITERAL, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterTypeWithConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitTypeWithConstraint(this);
        }
    }
}
class ConstraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_constraint;
    }
    L_PAREN() {
        return this.getToken(grammar3rdParser.L_PAREN, 0);
    }
    ;
    constraintSpec() {
        return this.getTypedRuleContext(ConstraintSpecContext, 0);
    }
    ;
    R_PAREN() {
        return this.getToken(grammar3rdParser.R_PAREN, 0);
    }
    ;
    exceptionSpec() {
        return this.getTypedRuleContext(ExceptionSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitConstraint(this);
        }
    }
}
class ConstraintSpecContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_constraintSpec;
    }
    subtypeConstraint() {
        return this.getTypedRuleContext(SubtypeConstraintContext, 0);
    }
    ;
    generalConstraint() {
        return this.getTypedRuleContext(GeneralConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterConstraintSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitConstraintSpec(this);
        }
    }
}
class SubtypeConstraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_subtypeConstraint;
    }
    elementSetSpecs() {
        return this.getTypedRuleContext(ElementSetSpecsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSubtypeConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSubtypeConstraint(this);
        }
    }
}
class ElementSetSpecsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_elementSetSpecs;
    }
    rootElementSetSpec() {
        return this.getTypedRuleContext(RootElementSetSpecContext, 0);
    }
    ;
    ELLIPSIS() {
        return this.getToken(grammar3rdParser.ELLIPSIS, 0);
    }
    ;
    additionalElementSetSpec() {
        return this.getTypedRuleContext(AdditionalElementSetSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterElementSetSpecs(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitElementSetSpecs(this);
        }
    }
}
class RootElementSetSpecContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_rootElementSetSpec;
    }
    elementSetSpec() {
        return this.getTypedRuleContext(ElementSetSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterRootElementSetSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitRootElementSetSpec(this);
        }
    }
}
class AdditionalElementSetSpecContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_additionalElementSetSpec;
    }
    elementSetSpec() {
        return this.getTypedRuleContext(ElementSetSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterAdditionalElementSetSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitAdditionalElementSetSpec(this);
        }
    }
}
class ElementSetSpecContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_elementSetSpec;
    }
    unions() {
        return this.getTypedRuleContext(UnionsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterElementSetSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitElementSetSpec(this);
        }
    }
}
class UnionsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.intersections = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IntersectionsContext);
            }
            else {
                return this.getTypedRuleContext(IntersectionsContext, i);
            }
        };
        this.unionMark = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(UnionMarkContext);
            }
            else {
                return this.getTypedRuleContext(UnionMarkContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_unions;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterUnions(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitUnions(this);
        }
    }
}
class IntersectionsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_intersections;
    }
    intersectionElements() {
        return this.getTypedRuleContext(IntersectionElementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterIntersections(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitIntersections(this);
        }
    }
}
class IntersectionElementsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_intersectionElements;
    }
    elements() {
        return this.getTypedRuleContext(ElementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterIntersectionElements(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitIntersectionElements(this);
        }
    }
}
class UnionMarkContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_unionMark;
    }
    PIPE() {
        return this.getToken(grammar3rdParser.PIPE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterUnionMark(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitUnionMark(this);
        }
    }
}
class ElementsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_elements;
    }
    subtypeElements() {
        return this.getTypedRuleContext(SubtypeElementsContext, 0);
    }
    ;
    objectSetElements() {
        return this.getTypedRuleContext(ObjectSetElementsContext, 0);
    }
    ;
    L_PAREN() {
        return this.getToken(grammar3rdParser.L_PAREN, 0);
    }
    ;
    elementSetSpec() {
        return this.getTypedRuleContext(ElementSetSpecContext, 0);
    }
    ;
    R_PAREN() {
        return this.getToken(grammar3rdParser.R_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterElements(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitElements(this);
        }
    }
}
class SubtypeElementsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_subtypeElements;
    }
    singleValue() {
        return this.getTypedRuleContext(SingleValueContext, 0);
    }
    ;
    valueRange() {
        return this.getTypedRuleContext(ValueRangeContext, 0);
    }
    ;
    sizeConstraint() {
        return this.getTypedRuleContext(SizeConstraintContext, 0);
    }
    ;
    innerTypeConstraints() {
        return this.getTypedRuleContext(InnerTypeConstraintsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSubtypeElements(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSubtypeElements(this);
        }
    }
}
class SingleValueContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_singleValue;
    }
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSingleValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSingleValue(this);
        }
    }
}
class ValueRangeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_valueRange;
    }
    lowerEndpoint() {
        return this.getTypedRuleContext(LowerEndpointContext, 0);
    }
    ;
    RANGE_SEPARATOR() {
        return this.getToken(grammar3rdParser.RANGE_SEPARATOR, 0);
    }
    ;
    upperEndpoint() {
        return this.getTypedRuleContext(UpperEndpointContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterValueRange(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitValueRange(this);
        }
    }
}
class LowerEndpointContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_lowerEndpoint;
    }
    lowerEndValue() {
        return this.getTypedRuleContext(LowerEndValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterLowerEndpoint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitLowerEndpoint(this);
        }
    }
}
class UpperEndpointContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_upperEndpoint;
    }
    upperEndValue() {
        return this.getTypedRuleContext(UpperEndValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterUpperEndpoint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitUpperEndpoint(this);
        }
    }
}
class LowerEndValueContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_lowerEndValue;
    }
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    MIN_LITERAL() {
        return this.getToken(grammar3rdParser.MIN_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterLowerEndValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitLowerEndValue(this);
        }
    }
}
class UpperEndValueContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_upperEndValue;
    }
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    MAX_LITERAL() {
        return this.getToken(grammar3rdParser.MAX_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterUpperEndValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitUpperEndValue(this);
        }
    }
}
class SizeConstraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_sizeConstraint;
    }
    SIZE_LITERAL() {
        return this.getToken(grammar3rdParser.SIZE_LITERAL, 0);
    }
    ;
    constraint() {
        return this.getTypedRuleContext(ConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSizeConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSizeConstraint(this);
        }
    }
}
class InnerTypeConstraintsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_innerTypeConstraints;
    }
    WITH_LITERAL() {
        return this.getToken(grammar3rdParser.WITH_LITERAL, 0);
    }
    ;
    COMPONENTS_LITERAL() {
        return this.getToken(grammar3rdParser.COMPONENTS_LITERAL, 0);
    }
    ;
    multipleTypeConstraints() {
        return this.getTypedRuleContext(MultipleTypeConstraintsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterInnerTypeConstraints(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitInnerTypeConstraints(this);
        }
    }
}
class MultipleTypeConstraintsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_multipleTypeConstraints;
    }
    partialSpecification() {
        return this.getTypedRuleContext(PartialSpecificationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterMultipleTypeConstraints(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitMultipleTypeConstraints(this);
        }
    }
}
class PartialSpecificationContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_partialSpecification;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    ELLIPSIS() {
        return this.getToken(grammar3rdParser.ELLIPSIS, 0);
    }
    ;
    COMMA() {
        return this.getToken(grammar3rdParser.COMMA, 0);
    }
    ;
    typeConstraints() {
        return this.getTypedRuleContext(TypeConstraintsContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterPartialSpecification(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitPartialSpecification(this);
        }
    }
}
class TypeConstraintsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.namedConstraint = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NamedConstraintContext);
            }
            else {
                return this.getTypedRuleContext(NamedConstraintContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_typeConstraints;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterTypeConstraints(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitTypeConstraints(this);
        }
    }
}
class NamedConstraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_namedConstraint;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    componentConstraint() {
        return this.getTypedRuleContext(ComponentConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterNamedConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitNamedConstraint(this);
        }
    }
}
class ComponentConstraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_componentConstraint;
    }
    valueConstraint() {
        return this.getTypedRuleContext(ValueConstraintContext, 0);
    }
    ;
    presenceConstraint() {
        return this.getTypedRuleContext(PresenceConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterComponentConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitComponentConstraint(this);
        }
    }
}
class ValueConstraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_valueConstraint;
    }
    constraint() {
        return this.getTypedRuleContext(ConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterValueConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitValueConstraint(this);
        }
    }
}
class PresenceConstraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_presenceConstraint;
    }
    PRESENT_LITERAL() {
        return this.getToken(grammar3rdParser.PRESENT_LITERAL, 0);
    }
    ;
    ABSENT_LITERAL() {
        return this.getToken(grammar3rdParser.ABSENT_LITERAL, 0);
    }
    ;
    OPTIONAL_LITERAL() {
        return this.getToken(grammar3rdParser.OPTIONAL_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterPresenceConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitPresenceConstraint(this);
        }
    }
}
class ExceptionSpecContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_exceptionSpec;
    }
    EXCLAM() {
        return this.getToken(grammar3rdParser.EXCLAM, 0);
    }
    ;
    exceptionIdentification() {
        return this.getTypedRuleContext(ExceptionIdentificationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterExceptionSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitExceptionSpec(this);
        }
    }
}
class ExceptionIdentificationContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_exceptionIdentification;
    }
    signedNumber() {
        return this.getTypedRuleContext(SignedNumberContext, 0);
    }
    ;
    definedValue() {
        return this.getTypedRuleContext(DefinedValueContext, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    COLON() {
        return this.getToken(grammar3rdParser.COLON, 0);
    }
    ;
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterExceptionIdentification(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitExceptionIdentification(this);
        }
    }
}
class ObjectClassReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectClassReference;
    }
    Word() {
        return this.getToken(grammar3rdParser.Word, 0);
    }
    ;
    ObjectClassReference() {
        return this.getToken(grammar3rdParser.ObjectClassReference, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterObjectClassReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitObjectClassReference(this);
        }
    }
}
class ObjectSetReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectSetReference;
    }
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterObjectSetReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitObjectSetReference(this);
        }
    }
}
class ObjectReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectReference;
    }
    IdentifierL() {
        return this.getToken(grammar3rdParser.IdentifierL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterObjectReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitObjectReference(this);
        }
    }
}
class ValueFieldReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_valueFieldReference;
    }
    AMP() {
        return this.getToken(grammar3rdParser.AMP, 0);
    }
    ;
    IdentifierL() {
        return this.getToken(grammar3rdParser.IdentifierL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterValueFieldReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitValueFieldReference(this);
        }
    }
}
class WordContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_word;
    }
    Word() {
        return this.getToken(grammar3rdParser.Word, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterWord(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitWord(this);
        }
    }
}
class TypeFieldReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_typeFieldReference;
    }
    AMP() {
        return this.getToken(grammar3rdParser.AMP, 0);
    }
    ;
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterTypeFieldReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitTypeFieldReference(this);
        }
    }
}
class DefinedObjectClassContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedObjectClass;
    }
    objectClassReference() {
        return this.getTypedRuleContext(ObjectClassReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinedObjectClass(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinedObjectClass(this);
        }
    }
}
class DefinedObjectSetContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedObjectSet;
    }
    objectSetReference() {
        return this.getTypedRuleContext(ObjectSetReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinedObjectSet(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinedObjectSet(this);
        }
    }
}
class ObjectClassAssignmentContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectClassAssignment;
    }
    objectClassReference() {
        return this.getTypedRuleContext(ObjectClassReferenceContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    objectClass() {
        return this.getTypedRuleContext(ObjectClassContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterObjectClassAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitObjectClassAssignment(this);
        }
    }
}
class ObjectClassContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectClass;
    }
    objectClassDefn() {
        return this.getTypedRuleContext(ObjectClassDefnContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterObjectClass(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitObjectClass(this);
        }
    }
}
class ObjectClassDefnContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.fieldSpec = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(FieldSpecContext);
            }
            else {
                return this.getTypedRuleContext(FieldSpecContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectClassDefn;
    }
    CLASS_LITERAL() {
        return this.getToken(grammar3rdParser.CLASS_LITERAL, 0);
    }
    ;
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    withSyntaxSpec() {
        return this.getTypedRuleContext(WithSyntaxSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterObjectClassDefn(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitObjectClassDefn(this);
        }
    }
}
class WithSyntaxSpecContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_withSyntaxSpec;
    }
    WITH_LITERAL() {
        return this.getToken(grammar3rdParser.WITH_LITERAL, 0);
    }
    ;
    SYNTAX_LITERAL() {
        return this.getToken(grammar3rdParser.SYNTAX_LITERAL, 0);
    }
    ;
    syntaxList() {
        return this.getTypedRuleContext(SyntaxListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterWithSyntaxSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitWithSyntaxSpec(this);
        }
    }
}
class FieldSpecContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_fieldSpec;
    }
    typeFieldSpec() {
        return this.getTypedRuleContext(TypeFieldSpecContext, 0);
    }
    ;
    fixedTypeValueFieldSpec() {
        return this.getTypedRuleContext(FixedTypeValueFieldSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterFieldSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitFieldSpec(this);
        }
    }
}
class TypeFieldSpecContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_typeFieldSpec;
    }
    typeFieldReference() {
        return this.getTypedRuleContext(TypeFieldReferenceContext, 0);
    }
    ;
    typeOptionalitySpec() {
        return this.getTypedRuleContext(TypeOptionalitySpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterTypeFieldSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitTypeFieldSpec(this);
        }
    }
}
class TypeOptionalitySpecContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_typeOptionalitySpec;
    }
    OPTIONAL_LITERAL() {
        return this.getToken(grammar3rdParser.OPTIONAL_LITERAL, 0);
    }
    ;
    DEFAULT_LITERAL() {
        return this.getToken(grammar3rdParser.DEFAULT_LITERAL, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterTypeOptionalitySpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitTypeOptionalitySpec(this);
        }
    }
}
class FixedTypeValueFieldSpecContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_fixedTypeValueFieldSpec;
    }
    valueFieldReference() {
        return this.getTypedRuleContext(ValueFieldReferenceContext, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    UNIQUE_LITERAL() {
        return this.getToken(grammar3rdParser.UNIQUE_LITERAL, 0);
    }
    ;
    valueOptionalitySpec() {
        return this.getTypedRuleContext(ValueOptionalitySpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterFixedTypeValueFieldSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitFixedTypeValueFieldSpec(this);
        }
    }
}
class ValueOptionalitySpecContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_valueOptionalitySpec;
    }
    OPTIONAL_LITERAL() {
        return this.getToken(grammar3rdParser.OPTIONAL_LITERAL, 0);
    }
    ;
    DEFAULT_LITERAL() {
        return this.getToken(grammar3rdParser.DEFAULT_LITERAL, 0);
    }
    ;
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterValueOptionalitySpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitValueOptionalitySpec(this);
        }
    }
}
class PrimitiveFieldNameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_primitiveFieldName;
    }
    typeFieldReference() {
        return this.getTypedRuleContext(TypeFieldReferenceContext, 0);
    }
    ;
    valueFieldReference() {
        return this.getTypedRuleContext(ValueFieldReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterPrimitiveFieldName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitPrimitiveFieldName(this);
        }
    }
}
class FieldNameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.primitiveFieldName = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(PrimitiveFieldNameContext);
            }
            else {
                return this.getTypedRuleContext(PrimitiveFieldNameContext, i);
            }
        };
        this.PERIOD = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.PERIOD);
            }
            else {
                return this.getToken(grammar3rdParser.PERIOD, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_fieldName;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterFieldName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitFieldName(this);
        }
    }
}
class SyntaxListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.tokenOrGroupSpec = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TokenOrGroupSpecContext);
            }
            else {
                return this.getTypedRuleContext(TokenOrGroupSpecContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_syntaxList;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSyntaxList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSyntaxList(this);
        }
    }
}
class TokenOrGroupSpecContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_tokenOrGroupSpec;
    }
    requiredToken() {
        return this.getTypedRuleContext(RequiredTokenContext, 0);
    }
    ;
    optionalGroup() {
        return this.getTypedRuleContext(OptionalGroupContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterTokenOrGroupSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitTokenOrGroupSpec(this);
        }
    }
}
class OptionalGroupContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.tokenOrGroupSpec = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TokenOrGroupSpecContext);
            }
            else {
                return this.getTypedRuleContext(TokenOrGroupSpecContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_optionalGroup;
    }
    L_BRACKET() {
        return this.getToken(grammar3rdParser.L_BRACKET, 0);
    }
    ;
    R_BRACKET() {
        return this.getToken(grammar3rdParser.R_BRACKET, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterOptionalGroup(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitOptionalGroup(this);
        }
    }
}
class RequiredTokenContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_requiredToken;
    }
    literal() {
        return this.getTypedRuleContext(LiteralContext, 0);
    }
    ;
    primitiveFieldName() {
        return this.getTypedRuleContext(PrimitiveFieldNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterRequiredToken(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitRequiredToken(this);
        }
    }
}
class LiteralContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_literal;
    }
    word() {
        return this.getTypedRuleContext(WordContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitLiteral(this);
        }
    }
}
class ObjectAssignmentContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectAssignment;
    }
    objectReference() {
        return this.getTypedRuleContext(ObjectReferenceContext, 0);
    }
    ;
    definedObjectClass() {
        return this.getTypedRuleContext(DefinedObjectClassContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    object() {
        return this.getTypedRuleContext(ObjectContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterObjectAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitObjectAssignment(this);
        }
    }
}
class ObjectContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_object;
    }
    objectDefn() {
        return this.getTypedRuleContext(ObjectDefnContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterObject(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitObject(this);
        }
    }
}
class ObjectDefnContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectDefn;
    }
    definedSyntax() {
        return this.getTypedRuleContext(DefinedSyntaxContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterObjectDefn(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitObjectDefn(this);
        }
    }
}
class DefinedSyntaxContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.definedSyntaxToken = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(DefinedSyntaxTokenContext);
            }
            else {
                return this.getTypedRuleContext(DefinedSyntaxTokenContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedSyntax;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinedSyntax(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinedSyntax(this);
        }
    }
}
class DefinedSyntaxTokenContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedSyntaxToken;
    }
    literal() {
        return this.getTypedRuleContext(LiteralContext, 0);
    }
    ;
    setting() {
        return this.getTypedRuleContext(SettingContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinedSyntaxToken(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinedSyntaxToken(this);
        }
    }
}
class SettingContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_setting;
    }
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSetting(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSetting(this);
        }
    }
}
class ObjectSetAssignmentContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectSetAssignment;
    }
    objectSetReference() {
        return this.getTypedRuleContext(ObjectSetReferenceContext, 0);
    }
    ;
    definedObjectClass() {
        return this.getTypedRuleContext(DefinedObjectClassContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    objectSet() {
        return this.getTypedRuleContext(ObjectSetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterObjectSetAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitObjectSetAssignment(this);
        }
    }
}
class ObjectSetContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectSet;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    objectSetSpec() {
        return this.getTypedRuleContext(ObjectSetSpecContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterObjectSet(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitObjectSet(this);
        }
    }
}
class ObjectSetSpecContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectSetSpec;
    }
    rootElementSetSpec() {
        return this.getTypedRuleContext(RootElementSetSpecContext, 0);
    }
    ;
    ELLIPSIS() {
        return this.getToken(grammar3rdParser.ELLIPSIS, 0);
    }
    ;
    additionalElementSetSpec() {
        return this.getTypedRuleContext(AdditionalElementSetSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterObjectSetSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitObjectSetSpec(this);
        }
    }
}
class ObjectSetElementsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectSetElements;
    }
    object() {
        return this.getTypedRuleContext(ObjectContext, 0);
    }
    ;
    definedObjectSet() {
        return this.getTypedRuleContext(DefinedObjectSetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterObjectSetElements(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitObjectSetElements(this);
        }
    }
}
class ObjectClassFieldTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectClassFieldType;
    }
    definedObjectClass() {
        return this.getTypedRuleContext(DefinedObjectClassContext, 0);
    }
    ;
    PERIOD() {
        return this.getToken(grammar3rdParser.PERIOD, 0);
    }
    ;
    fieldName() {
        return this.getTypedRuleContext(FieldNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterObjectClassFieldType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitObjectClassFieldType(this);
        }
    }
}
class GeneralConstraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_generalConstraint;
    }
    tableConstraint() {
        return this.getTypedRuleContext(TableConstraintContext, 0);
    }
    ;
    contentsConstraint() {
        return this.getTypedRuleContext(ContentsConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterGeneralConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitGeneralConstraint(this);
        }
    }
}
class TableConstraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_tableConstraint;
    }
    simpleTableConstraint() {
        return this.getTypedRuleContext(SimpleTableConstraintContext, 0);
    }
    ;
    componentRelationConstraint() {
        return this.getTypedRuleContext(ComponentRelationConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterTableConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitTableConstraint(this);
        }
    }
}
class SimpleTableConstraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_simpleTableConstraint;
    }
    objectSet() {
        return this.getTypedRuleContext(ObjectSetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSimpleTableConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSimpleTableConstraint(this);
        }
    }
}
class ComponentRelationConstraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.L_BRACE = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.L_BRACE);
            }
            else {
                return this.getToken(grammar3rdParser.L_BRACE, i);
            }
        };
        this.R_BRACE = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.R_BRACE);
            }
            else {
                return this.getToken(grammar3rdParser.R_BRACE, i);
            }
        };
        this.atNotation = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AtNotationContext);
            }
            else {
                return this.getTypedRuleContext(AtNotationContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_componentRelationConstraint;
    }
    definedObjectSet() {
        return this.getTypedRuleContext(DefinedObjectSetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterComponentRelationConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitComponentRelationConstraint(this);
        }
    }
}
class AtNotationContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_atNotation;
    }
    AT() {
        return this.getToken(grammar3rdParser.AT, 0);
    }
    ;
    componentIdList() {
        return this.getTypedRuleContext(ComponentIdListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterAtNotation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitAtNotation(this);
        }
    }
}
class ComponentIdListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.identifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentifierContext);
            }
            else {
                return this.getTypedRuleContext(IdentifierContext, i);
            }
        };
        this.PERIOD = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.PERIOD);
            }
            else {
                return this.getToken(grammar3rdParser.PERIOD, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_componentIdList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterComponentIdList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitComponentIdList(this);
        }
    }
}
class ContentsConstraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_contentsConstraint;
    }
    CONTAINING_LITERAL() {
        return this.getToken(grammar3rdParser.CONTAINING_LITERAL, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterContentsConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitContentsConstraint(this);
        }
    }
}
class ParameterizedAssignmentContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_parameterizedAssignment;
    }
    parameterizedTypeAssignment() {
        return this.getTypedRuleContext(ParameterizedTypeAssignmentContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterParameterizedAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitParameterizedAssignment(this);
        }
    }
}
class ParameterizedTypeAssignmentContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_parameterizedTypeAssignment;
    }
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterParameterizedTypeAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitParameterizedTypeAssignment(this);
        }
    }
}
class ParameterListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parameter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ParameterContext);
            }
            else {
                return this.getTypedRuleContext(ParameterContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_parameterList;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterParameterList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitParameterList(this);
        }
    }
}
class ParameterContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_parameter;
    }
    paramGovernor() {
        return this.getTypedRuleContext(ParamGovernorContext, 0);
    }
    ;
    COLON() {
        return this.getToken(grammar3rdParser.COLON, 0);
    }
    ;
    dummyReference() {
        return this.getTypedRuleContext(DummyReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterParameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitParameter(this);
        }
    }
}
class ParamGovernorContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_paramGovernor;
    }
    governor() {
        return this.getTypedRuleContext(GovernorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterParamGovernor(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitParamGovernor(this);
        }
    }
}
class GovernorContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_governor;
    }
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    definedObjectClass() {
        return this.getTypedRuleContext(DefinedObjectClassContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterGovernor(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitGovernor(this);
        }
    }
}
class DummyReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_dummyReference;
    }
    reference() {
        return this.getTypedRuleContext(ReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDummyReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDummyReference(this);
        }
    }
}
class ParameterizedReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_parameterizedReference;
    }
    reference() {
        return this.getTypedRuleContext(ReferenceContext, 0);
    }
    ;
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterParameterizedReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitParameterizedReference(this);
        }
    }
}
class ParameterizedTypeAmbiguousContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_parameterizedTypeAmbiguous;
    }
    simpleDefinedType() {
        return this.getTypedRuleContext(SimpleDefinedTypeContext, 0);
    }
    ;
    actualParameterList() {
        return this.getTypedRuleContext(ActualParameterListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterParameterizedTypeAmbiguous(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitParameterizedTypeAmbiguous(this);
        }
    }
}
class SimpleDefinedTypeContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_simpleDefinedType;
    }
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSimpleDefinedType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSimpleDefinedType(this);
        }
    }
}
class ActualParameterListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.actualParameter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ActualParameterContext);
            }
            else {
                return this.getTypedRuleContext(ActualParameterContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_actualParameterList;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterActualParameterList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitActualParameterList(this);
        }
    }
}
class ActualParameterContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_actualParameter;
    }
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    objectSet() {
        return this.getTypedRuleContext(ObjectSetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterActualParameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitActualParameter(this);
        }
    }
}
class EncodingObjectReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObjectReference;
    }
    IdentifierL() {
        return this.getToken(grammar3rdParser.IdentifierL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEncodingObjectReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEncodingObjectReference(this);
        }
    }
}
class EncodingObjectSetReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObjectSetReference;
    }
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEncodingObjectSetReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEncodingObjectSetReference(this);
        }
    }
}
class EncodingClassReferenceVariantContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingClassReferenceVariant;
    }
    NUMBER_SIGN() {
        return this.getToken(grammar3rdParser.NUMBER_SIGN, 0);
    }
    ;
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEncodingClassReferenceVariant(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEncodingClassReferenceVariant(this);
        }
    }
}
class DefinedOrBuiltinEncodingClassContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedOrBuiltinEncodingClass;
    }
    builtinEncodingClassReference() {
        return this.getTypedRuleContext(BuiltinEncodingClassReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinedOrBuiltinEncodingClass(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinedOrBuiltinEncodingClass(this);
        }
    }
}
class DefinedEncodingObjectContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedEncodingObject;
    }
    encodingObjectReference() {
        return this.getTypedRuleContext(EncodingObjectReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinedEncodingObject(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinedEncodingObject(this);
        }
    }
}
class DefinedEncodingObjectSetContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedEncodingObjectSet;
    }
    encodingObjectSetReference() {
        return this.getTypedRuleContext(EncodingObjectSetReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinedEncodingObjectSet(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinedEncodingObjectSet(this);
        }
    }
}
class DefinedOrBuiltinEncodingObjectSetContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedOrBuiltinEncodingObjectSet;
    }
    definedEncodingObjectSet() {
        return this.getTypedRuleContext(DefinedEncodingObjectSetContext, 0);
    }
    ;
    builtinEncodingObjectSetReference() {
        return this.getTypedRuleContext(BuiltinEncodingObjectSetReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDefinedOrBuiltinEncodingObjectSet(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDefinedOrBuiltinEncodingObjectSet(this);
        }
    }
}
class ElmModuleBodyContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_elmModuleBody;
    }
    encodingApplicationList() {
        return this.getTypedRuleContext(EncodingApplicationListContext, 0);
    }
    ;
    imports() {
        return this.getTypedRuleContext(ImportsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterElmModuleBody(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitElmModuleBody(this);
        }
    }
}
class EncodingApplicationListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.encodingApplication = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EncodingApplicationContext);
            }
            else {
                return this.getTypedRuleContext(EncodingApplicationContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingApplicationList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEncodingApplicationList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEncodingApplicationList(this);
        }
    }
}
class EncodingApplicationContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.simpleDefinedEncodingClass = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SimpleDefinedEncodingClassContext);
            }
            else {
                return this.getTypedRuleContext(SimpleDefinedEncodingClassContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingApplication;
    }
    ENCODE_LITERAL() {
        return this.getToken(grammar3rdParser.ENCODE_LITERAL, 0);
    }
    ;
    combinedEncodings() {
        return this.getTypedRuleContext(CombinedEncodingsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEncodingApplication(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEncodingApplication(this);
        }
    }
}
class CombinedEncodingsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_combinedEncodings;
    }
    WITH_LITERAL() {
        return this.getToken(grammar3rdParser.WITH_LITERAL, 0);
    }
    ;
    primaryEncodings() {
        return this.getTypedRuleContext(PrimaryEncodingsContext, 0);
    }
    ;
    completionClause() {
        return this.getTypedRuleContext(CompletionClauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterCombinedEncodings(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitCombinedEncodings(this);
        }
    }
}
class CompletionClauseContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_completionClause;
    }
    COMPLETED_LITERAL() {
        return this.getToken(grammar3rdParser.COMPLETED_LITERAL, 0);
    }
    ;
    BY_LITERAL() {
        return this.getToken(grammar3rdParser.BY_LITERAL, 0);
    }
    ;
    secondaryEncodings() {
        return this.getTypedRuleContext(SecondaryEncodingsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterCompletionClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitCompletionClause(this);
        }
    }
}
class PrimaryEncodingsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_primaryEncodings;
    }
    encodingObjectSet() {
        return this.getTypedRuleContext(EncodingObjectSetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterPrimaryEncodings(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitPrimaryEncodings(this);
        }
    }
}
class SecondaryEncodingsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_secondaryEncodings;
    }
    encodingObjectSet() {
        return this.getTypedRuleContext(EncodingObjectSetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSecondaryEncodings(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSecondaryEncodings(this);
        }
    }
}
class EdmModuleBodyContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_edmModuleBody;
    }
    exports() {
        return this.getTypedRuleContext(ExportsContext, 0);
    }
    ;
    imports() {
        return this.getTypedRuleContext(ImportsContext, 0);
    }
    ;
    edmAssignmentList() {
        return this.getTypedRuleContext(EdmAssignmentListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEdmModuleBody(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEdmModuleBody(this);
        }
    }
}
class EdmAssignmentListContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.edmAssignment = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EdmAssignmentContext);
            }
            else {
                return this.getTypedRuleContext(EdmAssignmentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_edmAssignmentList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEdmAssignmentList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEdmAssignmentList(this);
        }
    }
}
class EdmAssignmentContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_edmAssignment;
    }
    encodingObjectAssignment() {
        return this.getTypedRuleContext(EncodingObjectAssignmentContext, 0);
    }
    ;
    encodingObjectSetAssignment() {
        return this.getTypedRuleContext(EncodingObjectSetAssignmentContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEdmAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEdmAssignment(this);
        }
    }
}
class BuiltinEncodingClassReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_builtinEncodingClassReference;
    }
    encodingProcedureClassReference() {
        return this.getTypedRuleContext(EncodingProcedureClassReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterBuiltinEncodingClassReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitBuiltinEncodingClassReference(this);
        }
    }
}
class EncodingProcedureClassReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingProcedureClassReference;
    }
    NUMBER_SIGN() {
        return this.getToken(grammar3rdParser.NUMBER_SIGN, 0);
    }
    ;
    OUTER_LITERAL() {
        return this.getToken(grammar3rdParser.OUTER_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEncodingProcedureClassReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEncodingProcedureClassReference(this);
        }
    }
}
class EncodingObjectAssignmentContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObjectAssignment;
    }
    encodingObjectReference() {
        return this.getTypedRuleContext(EncodingObjectReferenceContext, 0);
    }
    ;
    definedOrBuiltinEncodingClass() {
        return this.getTypedRuleContext(DefinedOrBuiltinEncodingClassContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    encodingObject() {
        return this.getTypedRuleContext(EncodingObjectContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEncodingObjectAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEncodingObjectAssignment(this);
        }
    }
}
class EncodingObjectContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObject;
    }
    differentialEncodeDecodeObjectVariant() {
        return this.getTypedRuleContext(DifferentialEncodeDecodeObjectVariantContext, 0);
    }
    ;
    definedSyntax() {
        return this.getTypedRuleContext(DefinedSyntaxContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEncodingObject(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEncodingObject(this);
        }
    }
}
class DifferentialEncodeDecodeObjectVariantContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_differentialEncodeDecodeObjectVariant;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    specForEncoding() {
        return this.getTypedRuleContext(SpecForEncodingContext, 0);
    }
    ;
    DECODE_LITERAL() {
        return this.getToken(grammar3rdParser.DECODE_LITERAL, 0);
    }
    ;
    AS_LITERAL() {
        return this.getToken(grammar3rdParser.AS_LITERAL, 0);
    }
    ;
    IF_LITERAL() {
        return this.getToken(grammar3rdParser.IF_LITERAL, 0);
    }
    ;
    specForDecoders() {
        return this.getTypedRuleContext(SpecForDecodersContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    ENCODE_DECODE_LITERAL() {
        return this.getToken(grammar3rdParser.ENCODE_DECODE_LITERAL, 0);
    }
    ;
    ENCODER_DECODER_LITERAL() {
        return this.getToken(grammar3rdParser.ENCODER_DECODER_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterDifferentialEncodeDecodeObjectVariant(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitDifferentialEncodeDecodeObjectVariant(this);
        }
    }
}
class SpecForEncodingContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_specForEncoding;
    }
    encodingObject() {
        return this.getTypedRuleContext(EncodingObjectContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSpecForEncoding(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSpecForEncoding(this);
        }
    }
}
class SpecForDecodersContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_specForDecoders;
    }
    encodingObject() {
        return this.getTypedRuleContext(EncodingObjectContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSpecForDecoders(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSpecForDecoders(this);
        }
    }
}
class EncodingObjectSetAssignmentContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObjectSetAssignment;
    }
    encodingObjectSetReference() {
        return this.getTypedRuleContext(EncodingObjectSetReferenceContext, 0);
    }
    ;
    NUMBER_SIGN() {
        return this.getToken(grammar3rdParser.NUMBER_SIGN, 0);
    }
    ;
    ENCODINGS_LITERAL() {
        return this.getToken(grammar3rdParser.ENCODINGS_LITERAL, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    encodingObjectSet() {
        return this.getTypedRuleContext(EncodingObjectSetContext, 0);
    }
    ;
    completionClause() {
        return this.getTypedRuleContext(CompletionClauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEncodingObjectSetAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEncodingObjectSetAssignment(this);
        }
    }
}
class EncodingObjectSetContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObjectSet;
    }
    definedOrBuiltinEncodingObjectSet() {
        return this.getTypedRuleContext(DefinedOrBuiltinEncodingObjectSetContext, 0);
    }
    ;
    encodingObjectSetSpec() {
        return this.getTypedRuleContext(EncodingObjectSetSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEncodingObjectSet(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEncodingObjectSet(this);
        }
    }
}
class EncodingObjectSetSpecContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.encodingObjects = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EncodingObjectsContext);
            }
            else {
                return this.getTypedRuleContext(EncodingObjectsContext, i);
            }
        };
        this.unionMark = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(UnionMarkContext);
            }
            else {
                return this.getTypedRuleContext(UnionMarkContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObjectSetSpec;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEncodingObjectSetSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEncodingObjectSetSpec(this);
        }
    }
}
class EncodingObjectsContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObjects;
    }
    definedEncodingObject() {
        return this.getTypedRuleContext(DefinedEncodingObjectContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterEncodingObjects(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitEncodingObjects(this);
        }
    }
}
class BuiltinEncodingObjectSetReferenceContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_builtinEncodingObjectSetReference;
    }
    PER_BASIC_UNALIGNED_LITERAL() {
        return this.getToken(grammar3rdParser.PER_BASIC_UNALIGNED_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterBuiltinEncodingObjectSetReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitBuiltinEncodingObjectSetReference(this);
        }
    }
}
class SimpleDefinedEncodingClassContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_simpleDefinedEncodingClass;
    }
    encodingClassReferenceVariant() {
        return this.getTypedRuleContext(EncodingClassReferenceVariantContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.enterSimpleDefinedEncodingClass(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener) {
            listener.exitSimpleDefinedEncodingClass(this);
        }
    }
}
grammar3rdParser.ModuleDefinitionsContext = ModuleDefinitionsContext;
grammar3rdParser.TypeReferenceContext = TypeReferenceContext;
grammar3rdParser.IdentifierContext = IdentifierContext;
grammar3rdParser.ValueReferenceContext = ValueReferenceContext;
grammar3rdParser.ModuleReferenceContext = ModuleReferenceContext;
grammar3rdParser.ModuleDefinitionContext = ModuleDefinitionContext;
grammar3rdParser.ElmDefinitionContext = ElmDefinitionContext;
grammar3rdParser.EdmDefinitionContext = EdmDefinitionContext;
grammar3rdParser.ModuleIdentifierContext = ModuleIdentifierContext;
grammar3rdParser.DefinitiveIdentificationContext = DefinitiveIdentificationContext;
grammar3rdParser.DefinitiveOidContext = DefinitiveOidContext;
grammar3rdParser.DefinitiveObjIdComponentListContext = DefinitiveObjIdComponentListContext;
grammar3rdParser.DefinitiveObjIdComponentContext = DefinitiveObjIdComponentContext;
grammar3rdParser.DefinitiveNameAndNumberFormContext = DefinitiveNameAndNumberFormContext;
grammar3rdParser.DefinitiveNumberFormContext = DefinitiveNumberFormContext;
grammar3rdParser.TagDefaultContext = TagDefaultContext;
grammar3rdParser.ModuleBodyContext = ModuleBodyContext;
grammar3rdParser.ExportsContext = ExportsContext;
grammar3rdParser.SymbolsExportedContext = SymbolsExportedContext;
grammar3rdParser.ImportsContext = ImportsContext;
grammar3rdParser.SymbolsImportedContext = SymbolsImportedContext;
grammar3rdParser.SymbolsFromModuleListContext = SymbolsFromModuleListContext;
grammar3rdParser.SymbolsFromModuleContext = SymbolsFromModuleContext;
grammar3rdParser.GlobalModuleReferenceContext = GlobalModuleReferenceContext;
grammar3rdParser.SymbolListContext = SymbolListContext;
grammar3rdParser.SymbolContext = SymbolContext;
grammar3rdParser.ReferenceContext = ReferenceContext;
grammar3rdParser.AssignmentListContext = AssignmentListContext;
grammar3rdParser.AssignmentContext = AssignmentContext;
grammar3rdParser.DefinedTypeContext = DefinedTypeContext;
grammar3rdParser.DefinedValueContext = DefinedValueContext;
grammar3rdParser.ExternalTypeReferenceContext = ExternalTypeReferenceContext;
grammar3rdParser.ExternalValueReferenceContext = ExternalValueReferenceContext;
grammar3rdParser.TypeAssignmentContext = TypeAssignmentContext;
grammar3rdParser.ValueAssignmentContext = ValueAssignmentContext;
grammar3rdParser.TypeContext = TypeContext;
grammar3rdParser.BuiltinTypeContext = BuiltinTypeContext;
grammar3rdParser.ReferencedTypeContext = ReferencedTypeContext;
grammar3rdParser.NamedTypeContext = NamedTypeContext;
grammar3rdParser.ValueContext = ValueContext;
grammar3rdParser.BuiltinValueContext = BuiltinValueContext;
grammar3rdParser.BooleanTypeContext = BooleanTypeContext;
grammar3rdParser.IntegerTypeContext = IntegerTypeContext;
grammar3rdParser.NamedNumberListContext = NamedNumberListContext;
grammar3rdParser.NamedNumberContext = NamedNumberContext;
grammar3rdParser.SignedNumberContext = SignedNumberContext;
grammar3rdParser.IntegerValueContext = IntegerValueContext;
grammar3rdParser.EnumeratedTypeContext = EnumeratedTypeContext;
grammar3rdParser.EnumerationsContext = EnumerationsContext;
grammar3rdParser.RootEnumerationContext = RootEnumerationContext;
grammar3rdParser.AdditionalEnumerationContext = AdditionalEnumerationContext;
grammar3rdParser.EnumerationContext = EnumerationContext;
grammar3rdParser.EnumerationItemContext = EnumerationItemContext;
grammar3rdParser.BitStringTypeContext = BitStringTypeContext;
grammar3rdParser.NamedBitListContext = NamedBitListContext;
grammar3rdParser.NamedBitContext = NamedBitContext;
grammar3rdParser.BitStringValueContext = BitStringValueContext;
grammar3rdParser.OctetStringTypeContext = OctetStringTypeContext;
grammar3rdParser.NullTypeContext = NullTypeContext;
grammar3rdParser.SequenceTypeContext = SequenceTypeContext;
grammar3rdParser.ExtensionAndExceptionContext = ExtensionAndExceptionContext;
grammar3rdParser.OptionalExtensionMarkerContext = OptionalExtensionMarkerContext;
grammar3rdParser.ComponentTypeListsContext = ComponentTypeListsContext;
grammar3rdParser.RootComponentTypeListContext = RootComponentTypeListContext;
grammar3rdParser.ExtensionEndMarkerContext = ExtensionEndMarkerContext;
grammar3rdParser.ExtensionAdditionsContext = ExtensionAdditionsContext;
grammar3rdParser.ExtensionAdditionListContext = ExtensionAdditionListContext;
grammar3rdParser.ExtensionAdditionContext = ExtensionAdditionContext;
grammar3rdParser.ExtensionAdditionGroupContext = ExtensionAdditionGroupContext;
grammar3rdParser.ComponentTypeListContext = ComponentTypeListContext;
grammar3rdParser.ComponentTypeContext = ComponentTypeContext;
grammar3rdParser.SequenceOfTypeContext = SequenceOfTypeContext;
grammar3rdParser.ChoiceTypeContext = ChoiceTypeContext;
grammar3rdParser.AlternativeTypeListsContext = AlternativeTypeListsContext;
grammar3rdParser.RootAlternativeTypeListContext = RootAlternativeTypeListContext;
grammar3rdParser.ExtensionAdditionAlternativesContext = ExtensionAdditionAlternativesContext;
grammar3rdParser.ExtensionAdditionAlternativesListContext = ExtensionAdditionAlternativesListContext;
grammar3rdParser.ExtensionAdditionAlternativeContext = ExtensionAdditionAlternativeContext;
grammar3rdParser.ExtensionAdditionAlternativesGroupContext = ExtensionAdditionAlternativesGroupContext;
grammar3rdParser.AlternativeTypeListContext = AlternativeTypeListContext;
grammar3rdParser.ObjectIdentifierTypeContext = ObjectIdentifierTypeContext;
grammar3rdParser.CharacterStringTypeContext = CharacterStringTypeContext;
grammar3rdParser.RestrictedCharacterStringTypeContext = RestrictedCharacterStringTypeContext;
grammar3rdParser.UsefulTypeContext = UsefulTypeContext;
grammar3rdParser.ConstrainedTypeContext = ConstrainedTypeContext;
grammar3rdParser.TypeWithConstraintContext = TypeWithConstraintContext;
grammar3rdParser.ConstraintContext = ConstraintContext;
grammar3rdParser.ConstraintSpecContext = ConstraintSpecContext;
grammar3rdParser.SubtypeConstraintContext = SubtypeConstraintContext;
grammar3rdParser.ElementSetSpecsContext = ElementSetSpecsContext;
grammar3rdParser.RootElementSetSpecContext = RootElementSetSpecContext;
grammar3rdParser.AdditionalElementSetSpecContext = AdditionalElementSetSpecContext;
grammar3rdParser.ElementSetSpecContext = ElementSetSpecContext;
grammar3rdParser.UnionsContext = UnionsContext;
grammar3rdParser.IntersectionsContext = IntersectionsContext;
grammar3rdParser.IntersectionElementsContext = IntersectionElementsContext;
grammar3rdParser.UnionMarkContext = UnionMarkContext;
grammar3rdParser.ElementsContext = ElementsContext;
grammar3rdParser.SubtypeElementsContext = SubtypeElementsContext;
grammar3rdParser.SingleValueContext = SingleValueContext;
grammar3rdParser.ValueRangeContext = ValueRangeContext;
grammar3rdParser.LowerEndpointContext = LowerEndpointContext;
grammar3rdParser.UpperEndpointContext = UpperEndpointContext;
grammar3rdParser.LowerEndValueContext = LowerEndValueContext;
grammar3rdParser.UpperEndValueContext = UpperEndValueContext;
grammar3rdParser.SizeConstraintContext = SizeConstraintContext;
grammar3rdParser.InnerTypeConstraintsContext = InnerTypeConstraintsContext;
grammar3rdParser.MultipleTypeConstraintsContext = MultipleTypeConstraintsContext;
grammar3rdParser.PartialSpecificationContext = PartialSpecificationContext;
grammar3rdParser.TypeConstraintsContext = TypeConstraintsContext;
grammar3rdParser.NamedConstraintContext = NamedConstraintContext;
grammar3rdParser.ComponentConstraintContext = ComponentConstraintContext;
grammar3rdParser.ValueConstraintContext = ValueConstraintContext;
grammar3rdParser.PresenceConstraintContext = PresenceConstraintContext;
grammar3rdParser.ExceptionSpecContext = ExceptionSpecContext;
grammar3rdParser.ExceptionIdentificationContext = ExceptionIdentificationContext;
grammar3rdParser.ObjectClassReferenceContext = ObjectClassReferenceContext;
grammar3rdParser.ObjectSetReferenceContext = ObjectSetReferenceContext;
grammar3rdParser.ObjectReferenceContext = ObjectReferenceContext;
grammar3rdParser.ValueFieldReferenceContext = ValueFieldReferenceContext;
grammar3rdParser.WordContext = WordContext;
grammar3rdParser.TypeFieldReferenceContext = TypeFieldReferenceContext;
grammar3rdParser.DefinedObjectClassContext = DefinedObjectClassContext;
grammar3rdParser.DefinedObjectSetContext = DefinedObjectSetContext;
grammar3rdParser.ObjectClassAssignmentContext = ObjectClassAssignmentContext;
grammar3rdParser.ObjectClassContext = ObjectClassContext;
grammar3rdParser.ObjectClassDefnContext = ObjectClassDefnContext;
grammar3rdParser.WithSyntaxSpecContext = WithSyntaxSpecContext;
grammar3rdParser.FieldSpecContext = FieldSpecContext;
grammar3rdParser.TypeFieldSpecContext = TypeFieldSpecContext;
grammar3rdParser.TypeOptionalitySpecContext = TypeOptionalitySpecContext;
grammar3rdParser.FixedTypeValueFieldSpecContext = FixedTypeValueFieldSpecContext;
grammar3rdParser.ValueOptionalitySpecContext = ValueOptionalitySpecContext;
grammar3rdParser.PrimitiveFieldNameContext = PrimitiveFieldNameContext;
grammar3rdParser.FieldNameContext = FieldNameContext;
grammar3rdParser.SyntaxListContext = SyntaxListContext;
grammar3rdParser.TokenOrGroupSpecContext = TokenOrGroupSpecContext;
grammar3rdParser.OptionalGroupContext = OptionalGroupContext;
grammar3rdParser.RequiredTokenContext = RequiredTokenContext;
grammar3rdParser.LiteralContext = LiteralContext;
grammar3rdParser.ObjectAssignmentContext = ObjectAssignmentContext;
grammar3rdParser.ObjectContext = ObjectContext;
grammar3rdParser.ObjectDefnContext = ObjectDefnContext;
grammar3rdParser.DefinedSyntaxContext = DefinedSyntaxContext;
grammar3rdParser.DefinedSyntaxTokenContext = DefinedSyntaxTokenContext;
grammar3rdParser.SettingContext = SettingContext;
grammar3rdParser.ObjectSetAssignmentContext = ObjectSetAssignmentContext;
grammar3rdParser.ObjectSetContext = ObjectSetContext;
grammar3rdParser.ObjectSetSpecContext = ObjectSetSpecContext;
grammar3rdParser.ObjectSetElementsContext = ObjectSetElementsContext;
grammar3rdParser.ObjectClassFieldTypeContext = ObjectClassFieldTypeContext;
grammar3rdParser.GeneralConstraintContext = GeneralConstraintContext;
grammar3rdParser.TableConstraintContext = TableConstraintContext;
grammar3rdParser.SimpleTableConstraintContext = SimpleTableConstraintContext;
grammar3rdParser.ComponentRelationConstraintContext = ComponentRelationConstraintContext;
grammar3rdParser.AtNotationContext = AtNotationContext;
grammar3rdParser.ComponentIdListContext = ComponentIdListContext;
grammar3rdParser.ContentsConstraintContext = ContentsConstraintContext;
grammar3rdParser.ParameterizedAssignmentContext = ParameterizedAssignmentContext;
grammar3rdParser.ParameterizedTypeAssignmentContext = ParameterizedTypeAssignmentContext;
grammar3rdParser.ParameterListContext = ParameterListContext;
grammar3rdParser.ParameterContext = ParameterContext;
grammar3rdParser.ParamGovernorContext = ParamGovernorContext;
grammar3rdParser.GovernorContext = GovernorContext;
grammar3rdParser.DummyReferenceContext = DummyReferenceContext;
grammar3rdParser.ParameterizedReferenceContext = ParameterizedReferenceContext;
grammar3rdParser.ParameterizedTypeAmbiguousContext = ParameterizedTypeAmbiguousContext;
grammar3rdParser.SimpleDefinedTypeContext = SimpleDefinedTypeContext;
grammar3rdParser.ActualParameterListContext = ActualParameterListContext;
grammar3rdParser.ActualParameterContext = ActualParameterContext;
grammar3rdParser.EncodingObjectReferenceContext = EncodingObjectReferenceContext;
grammar3rdParser.EncodingObjectSetReferenceContext = EncodingObjectSetReferenceContext;
grammar3rdParser.EncodingClassReferenceVariantContext = EncodingClassReferenceVariantContext;
grammar3rdParser.DefinedOrBuiltinEncodingClassContext = DefinedOrBuiltinEncodingClassContext;
grammar3rdParser.DefinedEncodingObjectContext = DefinedEncodingObjectContext;
grammar3rdParser.DefinedEncodingObjectSetContext = DefinedEncodingObjectSetContext;
grammar3rdParser.DefinedOrBuiltinEncodingObjectSetContext = DefinedOrBuiltinEncodingObjectSetContext;
grammar3rdParser.ElmModuleBodyContext = ElmModuleBodyContext;
grammar3rdParser.EncodingApplicationListContext = EncodingApplicationListContext;
grammar3rdParser.EncodingApplicationContext = EncodingApplicationContext;
grammar3rdParser.CombinedEncodingsContext = CombinedEncodingsContext;
grammar3rdParser.CompletionClauseContext = CompletionClauseContext;
grammar3rdParser.PrimaryEncodingsContext = PrimaryEncodingsContext;
grammar3rdParser.SecondaryEncodingsContext = SecondaryEncodingsContext;
grammar3rdParser.EdmModuleBodyContext = EdmModuleBodyContext;
grammar3rdParser.EdmAssignmentListContext = EdmAssignmentListContext;
grammar3rdParser.EdmAssignmentContext = EdmAssignmentContext;
grammar3rdParser.BuiltinEncodingClassReferenceContext = BuiltinEncodingClassReferenceContext;
grammar3rdParser.EncodingProcedureClassReferenceContext = EncodingProcedureClassReferenceContext;
grammar3rdParser.EncodingObjectAssignmentContext = EncodingObjectAssignmentContext;
grammar3rdParser.EncodingObjectContext = EncodingObjectContext;
grammar3rdParser.DifferentialEncodeDecodeObjectVariantContext = DifferentialEncodeDecodeObjectVariantContext;
grammar3rdParser.SpecForEncodingContext = SpecForEncodingContext;
grammar3rdParser.SpecForDecodersContext = SpecForDecodersContext;
grammar3rdParser.EncodingObjectSetAssignmentContext = EncodingObjectSetAssignmentContext;
grammar3rdParser.EncodingObjectSetContext = EncodingObjectSetContext;
grammar3rdParser.EncodingObjectSetSpecContext = EncodingObjectSetSpecContext;
grammar3rdParser.EncodingObjectsContext = EncodingObjectsContext;
grammar3rdParser.BuiltinEncodingObjectSetReferenceContext = BuiltinEncodingObjectSetReferenceContext;
grammar3rdParser.SimpleDefinedEncodingClassContext = SimpleDefinedEncodingClassContext;
//# sourceMappingURL=grammar3rdParser.js.map