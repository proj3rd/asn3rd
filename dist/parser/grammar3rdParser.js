"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Generated from ./grammar3rd.g4 by ANTLR 4.9.3
// jshint ignore: start
const antlr4_1 = __importDefault(require("antlr4"));
const grammar3rdListener_js_1 = __importDefault(require("./grammar3rdListener.js"));
const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u0089\u0592\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
    "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
    "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
    "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004",
    "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t",
    "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004",
    "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t",
    "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004",
    "\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t",
    "\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004",
    "\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t",
    "\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004",
    "\u00ac\t\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t",
    "\u00af\u0004\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004",
    "\u00b3\t\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t",
    "\u00b6\u0004\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004",
    "\u00ba\t\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t",
    "\u00bd\u0004\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004",
    "\u00c1\t\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t",
    "\u00c4\u0004\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004",
    "\u00c8\t\u00c8\u0004\u00c9\t\u00c9\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0006\u0002\u0196\n\u0002\r\u0002\u000e\u0002\u0197\u0003\u0003\u0003",
    "\u0003\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u01a5\n\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u01aa\n\u0007\u0003",
    "\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003",
    "\n\u0005\n\u01be\n\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0003\r\u0006\r\u01c7\n\r\r\r\u000e\r\u01c8\u0003\u000e\u0003",
    "\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0005\u0011\u01da\n\u0011\u0003\u0012\u0005\u0012",
    "\u01dd\n\u0012\u0003\u0012\u0005\u0012\u01e0\n\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0013\u0003\u0013\u0005\u0013\u01e6\n\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u01ee\n\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003",
    "\u0017\u0006\u0017\u01f5\n\u0017\r\u0017\u000e\u0017\u01f6\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0007\u001a\u0202\n\u001a\f\u001a\u000e\u001a",
    "\u0205\u000b\u001a\u0003\u001b\u0003\u001b\u0005\u001b\u0209\n\u001b",
    "\u0003\u001c\u0003\u001c\u0005\u001c\u020d\n\u001c\u0003\u001d\u0006",
    "\u001d\u0210\n\u001d\r\u001d\u000e\u001d\u0211\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u021a\n",
    "\u001e\u0003\u001e\u0005\u001e\u021d\n\u001e\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0005\u001f\u0222\n\u001f\u0003 \u0003 \u0005 \u0226\n",
    " \u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003%\u0003",
    "%\u0003%\u0005%\u023c\n%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u024a\n&\u0003\'\u0003\'",
    "\u0005\'\u024e\n\'\u0003(\u0003(\u0003(\u0003)\u0003)\u0003*\u0003*",
    "\u0005*\u0257\n*\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0005,\u0261\n,\u0003-\u0003-\u0003-\u0007-\u0266\n-\f-\u000e-\u0269",
    "\u000b-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0005",
    "/\u0273\n/\u00030\u00030\u00050\u0277\n0\u00031\u00031\u00031\u0003",
    "1\u00031\u00032\u00032\u00032\u00032\u00032\u00052\u0283\n2\u00032\u0003",
    "2\u00032\u00032\u00052\u0289\n2\u00032\u00032\u00032\u00052\u028e\n",
    "2\u00033\u00033\u00034\u00034\u00035\u00035\u00035\u00075\u0297\n5\f",
    "5\u000e5\u029a\u000b5\u00036\u00036\u00056\u029e\n6\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00057\u02a8\n7\u00038\u00038\u0003",
    "8\u00078\u02ad\n8\f8\u000e8\u02b0\u000b8\u00039\u00039\u00039\u0003",
    "9\u00039\u0003:\u0003:\u0003;\u0003;\u0003;\u0003<\u0003<\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005=\u02c5\n=\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0005=\u02ce\n=\u0003>\u0003>\u0003>\u0005",
    ">\u02d3\n>\u0005>\u02d5\n>\u0003?\u0003?\u0003?\u0003@\u0003@\u0005",
    "@\u02dc\n@\u0003@\u0003@\u0003@\u0005@\u02e1\n@\u0003@\u0003@\u0005",
    "@\u02e5\n@\u0003@\u0005@\u02e8\n@\u0003@\u0003@\u0003@\u0005@\u02ed",
    "\n@\u0003@\u0003@\u0005@\u02f1\n@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0005@\u02f9\n@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005",
    "@\u0301\n@\u0003@\u0005@\u0304\n@\u0005@\u0306\n@\u0003A\u0003A\u0003",
    "B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003D\u0003D\u0003D\u0007D\u0313",
    "\nD\fD\u000eD\u0316\u000bD\u0003E\u0003E\u0005E\u031a\nE\u0003F\u0003",
    "F\u0003F\u0005F\u031f\nF\u0003F\u0003F\u0003G\u0003G\u0003G\u0005G\u0326",
    "\nG\u0003G\u0007G\u0329\nG\fG\u000eG\u032c\u000bG\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0005H\u0336\nH\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0005I\u033e\nI\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003K\u0003K\u0003K\u0003K\u0003K\u0005K\u034a\nK\u0003K\u0005K\u034d",
    "\nK\u0005K\u034f\nK\u0003L\u0003L\u0003M\u0003M\u0003M\u0003N\u0003",
    "N\u0003N\u0007N\u0359\nN\fN\u000eN\u035c\u000bN\u0003O\u0003O\u0005",
    "O\u0360\nO\u0003P\u0003P\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0007Q\u0369",
    "\nQ\fQ\u000eQ\u036c\u000bQ\u0003R\u0003R\u0003R\u0003S\u0003S\u0003",
    "T\u0003T\u0003U\u0003U\u0003V\u0003V\u0006V\u0379\nV\rV\u000eV\u037a",
    "\u0003V\u0003V\u0006V\u037f\nV\rV\u000eV\u0380\u0003V\u0003V\u0007V",
    "\u0385\nV\fV\u000eV\u0388\u000bV\u0005V\u038a\nV\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003X\u0003X\u0003X\u0005X\u0394\nX\u0003X\u0003X\u0003",
    "Y\u0003Y\u0005Y\u039a\nY\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0005[\u03a9\n[\u0003\\",
    "\u0003\\\u0003]\u0003]\u0003^\u0003^\u0003_\u0003_\u0003_\u0003_\u0007",
    "_\u03b5\n_\f_\u000e_\u03b8\u000b_\u0003`\u0003`\u0003a\u0003a\u0003",
    "b\u0003b\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0005c\u03c6\nc\u0003",
    "d\u0003d\u0003d\u0003d\u0005d\u03cc\nd\u0003e\u0003e\u0003f\u0003f\u0003",
    "f\u0003f\u0003g\u0003g\u0003h\u0003h\u0003i\u0003i\u0005i\u03da\ni\u0003",
    "j\u0003j\u0005j\u03de\nj\u0003k\u0003k\u0003k\u0003l\u0003l\u0003l\u0003",
    "l\u0003m\u0003m\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003o\u0003",
    "o\u0003o\u0007o\u03f2\no\fo\u000eo\u03f5\u000bo\u0003p\u0003p\u0003",
    "p\u0003q\u0005q\u03fb\nq\u0003q\u0005q\u03fe\nq\u0003r\u0003r\u0003",
    "s\u0003s\u0003t\u0003t\u0003t\u0003u\u0003u\u0003u\u0003u\u0003u\u0003",
    "u\u0005u\u040d\nu\u0003v\u0003v\u0003w\u0003w\u0003x\u0003x\u0003y\u0003",
    "y\u0003y\u0003z\u0003z\u0003{\u0003{\u0003{\u0003|\u0003|\u0003}\u0003",
    "}\u0003~\u0003~\u0003~\u0003~\u0003\u007f\u0003\u007f\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0007\u0080\u042c\n\u0080",
    "\f\u0080\u000e\u0080\u042f\u000b\u0080\u0003\u0080\u0003\u0080\u0005",
    "\u0080\u0433\n\u0080\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081",
    "\u0003\u0082\u0003\u0082\u0005\u0082\u043b\n\u0082\u0003\u0083\u0003",
    "\u0083\u0005\u0083\u043f\n\u0083\u0003\u0084\u0003\u0084\u0003\u0084",
    "\u0005\u0084\u0444\n\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0005",
    "\u0085\u0449\n\u0085\u0003\u0085\u0005\u0085\u044c\n\u0085\u0003\u0086",
    "\u0003\u0086\u0003\u0086\u0005\u0086\u0451\n\u0086\u0003\u0087\u0003",
    "\u0087\u0005\u0087\u0455\n\u0087\u0003\u0088\u0003\u0088\u0003\u0088",
    "\u0007\u0088\u045a\n\u0088\f\u0088\u000e\u0088\u045d\u000b\u0088\u0003",
    "\u0089\u0003\u0089\u0006\u0089\u0461\n\u0089\r\u0089\u000e\u0089\u0462",
    "\u0003\u0089\u0003\u0089\u0003\u008a\u0003\u008a\u0005\u008a\u0469\n",
    "\u008a\u0003\u008b\u0003\u008b\u0006\u008b\u046d\n\u008b\r\u008b\u000e",
    "\u008b\u046e\u0003\u008b\u0003\u008b\u0003\u008c\u0003\u008c\u0005\u008c",
    "\u0475\n\u008c\u0003\u008d\u0003\u008d\u0003\u008e\u0003\u008e\u0003",
    "\u008e\u0003\u008e\u0003\u008e\u0003\u008f\u0003\u008f\u0003\u0090\u0003",
    "\u0090\u0003\u0091\u0003\u0091\u0007\u0091\u0484\n\u0091\f\u0091\u000e",
    "\u0091\u0487\u000b\u0091\u0003\u0091\u0003\u0091\u0003\u0092\u0003\u0092",
    "\u0005\u0092\u048d\n\u0092\u0003\u0093\u0003\u0093\u0005\u0093\u0491",
    "\n\u0093\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094",
    "\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0096\u0003\u0096",
    "\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096",
    "\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0005\u0096\u04a8\n",
    "\u0096\u0003\u0097\u0003\u0097\u0005\u0097\u04ac\n\u0097\u0003\u0098",
    "\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0099\u0003\u0099\u0005\u0099",
    "\u04b4\n\u0099\u0003\u009a\u0003\u009a\u0005\u009a\u04b8\n\u009a\u0003",
    "\u009b\u0003\u009b\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003",
    "\u009c\u0003\u009c\u0003\u009c\u0007\u009c\u04c3\n\u009c\f\u009c\u000e",
    "\u009c\u04c6\u000b\u009c\u0003\u009c\u0003\u009c\u0003\u009d\u0003\u009d",
    "\u0003\u009d\u0003\u009e\u0003\u009e\u0003\u009e\u0007\u009e\u04d0\n",
    "\u009e\f\u009e\u000e\u009e\u04d3\u000b\u009e\u0003\u009f\u0003\u009f",
    "\u0003\u009f\u0003\u00a0\u0003\u00a0\u0003\u00a1\u0003\u00a1\u0003\u00a1",
    "\u0003\u00a1\u0003\u00a1\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0007\u00a2\u04e3\n\u00a2\f\u00a2\u000e\u00a2\u04e6\u000b\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003",
    "\u00a3\u0005\u00a3\u04ef\n\u00a3\u0003\u00a4\u0003\u00a4\u0003\u00a5",
    "\u0003\u00a5\u0005\u00a5\u04f5\n\u00a5\u0003\u00a6\u0003\u00a6\u0003",
    "\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a8\u0003\u00a8\u0003",
    "\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003",
    "\u00aa\u0007\u00aa\u0506\n\u00aa\f\u00aa\u000e\u00aa\u0509\u000b\u00aa",
    "\u0003\u00aa\u0003\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0005\u00ab",
    "\u0510\n\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ad\u0003\u00ad\u0003",
    "\u00ae\u0003\u00ae\u0003\u00ae\u0005\u00ae\u0519\n\u00ae\u0003\u00af",
    "\u0003\u00af\u0003\u00b0\u0003\u00b0\u0003\u00b1\u0003\u00b1\u0003\u00b2",
    "\u0003\u00b2\u0005\u00b2\u0523\n\u00b2\u0003\u00b3\u0005\u00b3\u0526",
    "\n\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b4\u0006\u00b4\u052b\n\u00b4",
    "\r\u00b4\u000e\u00b4\u052c\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003",
    "\u00b5\u0007\u00b5\u0533\n\u00b5\f\u00b5\u000e\u00b5\u0536\u000b\u00b5",
    "\u0003\u00b5\u0003\u00b5\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6",
    "\u053d\n\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003",
    "\u00b8\u0003\u00b8\u0003\u00b9\u0003\u00b9\u0003\u00ba\u0005\u00ba\u0548",
    "\n\u00ba\u0003\u00ba\u0005\u00ba\u054b\n\u00ba\u0003\u00ba\u0005\u00ba",
    "\u054e\n\u00ba\u0003\u00bb\u0006\u00bb\u0551\n\u00bb\r\u00bb\u000e\u00bb",
    "\u0552\u0003\u00bc\u0003\u00bc\u0005\u00bc\u0557\n\u00bc\u0003\u00bd",
    "\u0003\u00bd\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00bf\u0003\u00bf",
    "\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00c0\u0003\u00c0\u0005\u00c0",
    "\u0565\n\u00c0\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003",
    "\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003",
    "\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4\u057a\n\u00c4\u0003\u00c5",
    "\u0003\u00c5\u0005\u00c5\u057e\n\u00c5\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0007\u00c6\u0585\n\u00c6\f\u00c6\u000e",
    "\u00c6\u0588\u000b\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c8\u0003\u00c8\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0002\u0002",
    "\u00ca\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8",
    "\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0",
    "\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8",
    "\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110",
    "\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128",
    "\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140",
    "\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158",
    "\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170",
    "\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188",
    "\u018a\u018c\u018e\u0190\u0002\u0007\u0003\u0002\u0084\u0086\u0004\u0002",
    "bckk\u0005\u0002\u0018\u0018NN^^\u0003\u0002\u0084\u0085\u0004\u0002",
    "vvxx\u0002\u0563\u0002\u0195\u0003\u0002\u0002\u0002\u0004\u0199\u0003",
    "\u0002\u0002\u0002\u0006\u019b\u0003\u0002\u0002\u0002\b\u019d\u0003",
    "\u0002\u0002\u0002\n\u019f\u0003\u0002\u0002\u0002\f\u01a1\u0003\u0002",
    "\u0002\u0002\u000e\u01ad\u0003\u0002\u0002\u0002\u0010\u01b4\u0003\u0002",
    "\u0002\u0002\u0012\u01bb\u0003\u0002\u0002\u0002\u0014\u01bf\u0003\u0002",
    "\u0002\u0002\u0016\u01c1\u0003\u0002\u0002\u0002\u0018\u01c6\u0003\u0002",
    "\u0002\u0002\u001a\u01ca\u0003\u0002\u0002\u0002\u001c\u01cc\u0003\u0002",
    "\u0002\u0002\u001e\u01d1\u0003\u0002\u0002\u0002 \u01d9\u0003\u0002",
    "\u0002\u0002\"\u01dc\u0003\u0002\u0002\u0002$\u01e3\u0003\u0002\u0002",
    "\u0002&\u01e9\u0003\u0002\u0002\u0002(\u01eb\u0003\u0002\u0002\u0002",
    "*\u01f1\u0003\u0002\u0002\u0002,\u01f4\u0003\u0002\u0002\u0002.\u01f8",
    "\u0003\u0002\u0002\u00020\u01fc\u0003\u0002\u0002\u00022\u01fe\u0003",
    "\u0002\u0002\u00024\u0208\u0003\u0002\u0002\u00026\u020c\u0003\u0002",
    "\u0002\u00028\u020f\u0003\u0002\u0002\u0002:\u0219\u0003\u0002\u0002",
    "\u0002<\u0221\u0003\u0002\u0002\u0002>\u0225\u0003\u0002\u0002\u0002",
    "@\u0227\u0003\u0002\u0002\u0002B\u022b\u0003\u0002\u0002\u0002D\u022f",
    "\u0003\u0002\u0002\u0002F\u0233\u0003\u0002\u0002\u0002H\u023b\u0003",
    "\u0002\u0002\u0002J\u0249\u0003\u0002\u0002\u0002L\u024d\u0003\u0002",
    "\u0002\u0002N\u024f\u0003\u0002\u0002\u0002P\u0252\u0003\u0002\u0002",
    "\u0002R\u0256\u0003\u0002\u0002\u0002T\u0258\u0003\u0002\u0002\u0002",
    "V\u0260\u0003\u0002\u0002\u0002X\u0262\u0003\u0002\u0002\u0002Z\u026a",
    "\u0003\u0002\u0002\u0002\\\u0272\u0003\u0002\u0002\u0002^\u0276\u0003",
    "\u0002\u0002\u0002`\u0278\u0003\u0002\u0002\u0002b\u028d\u0003\u0002",
    "\u0002\u0002d\u028f\u0003\u0002\u0002\u0002f\u0291\u0003\u0002\u0002",
    "\u0002h\u0293\u0003\u0002\u0002\u0002j\u029d\u0003\u0002\u0002\u0002",
    "l\u02a7\u0003\u0002\u0002\u0002n\u02a9\u0003\u0002\u0002\u0002p\u02b1",
    "\u0003\u0002\u0002\u0002r\u02b6\u0003\u0002\u0002\u0002t\u02b8\u0003",
    "\u0002\u0002\u0002v\u02bb\u0003\u0002\u0002\u0002x\u02cd\u0003\u0002",
    "\u0002\u0002z\u02d4\u0003\u0002\u0002\u0002|\u02d6\u0003\u0002\u0002",
    "\u0002~\u0305\u0003\u0002\u0002\u0002\u0080\u0307\u0003\u0002\u0002",
    "\u0002\u0082\u0309\u0003\u0002\u0002\u0002\u0084\u030c\u0003\u0002\u0002",
    "\u0002\u0086\u030f\u0003\u0002\u0002\u0002\u0088\u0319\u0003\u0002\u0002",
    "\u0002\u008a\u031b\u0003\u0002\u0002\u0002\u008c\u0322\u0003\u0002\u0002",
    "\u0002\u008e\u0335\u0003\u0002\u0002\u0002\u0090\u033d\u0003\u0002\u0002",
    "\u0002\u0092\u033f\u0003\u0002\u0002\u0002\u0094\u034e\u0003\u0002\u0002",
    "\u0002\u0096\u0350\u0003\u0002\u0002\u0002\u0098\u0352\u0003\u0002\u0002",
    "\u0002\u009a\u0355\u0003\u0002\u0002\u0002\u009c\u035f\u0003\u0002\u0002",
    "\u0002\u009e\u0361\u0003\u0002\u0002\u0002\u00a0\u0365\u0003\u0002\u0002",
    "\u0002\u00a2\u036d\u0003\u0002\u0002\u0002\u00a4\u0370\u0003\u0002\u0002",
    "\u0002\u00a6\u0372\u0003\u0002\u0002\u0002\u00a8\u0374\u0003\u0002\u0002",
    "\u0002\u00aa\u0389\u0003\u0002\u0002\u0002\u00ac\u038b\u0003\u0002\u0002",
    "\u0002\u00ae\u0390\u0003\u0002\u0002\u0002\u00b0\u0399\u0003\u0002\u0002",
    "\u0002\u00b2\u039b\u0003\u0002\u0002\u0002\u00b4\u03a8\u0003\u0002\u0002",
    "\u0002\u00b6\u03aa\u0003\u0002\u0002\u0002\u00b8\u03ac\u0003\u0002\u0002",
    "\u0002\u00ba\u03ae\u0003\u0002\u0002\u0002\u00bc\u03b0\u0003\u0002\u0002",
    "\u0002\u00be\u03b9\u0003\u0002\u0002\u0002\u00c0\u03bb\u0003\u0002\u0002",
    "\u0002\u00c2\u03bd\u0003\u0002\u0002\u0002\u00c4\u03c5\u0003\u0002\u0002",
    "\u0002\u00c6\u03cb\u0003\u0002\u0002\u0002\u00c8\u03cd\u0003\u0002\u0002",
    "\u0002\u00ca\u03cf\u0003\u0002\u0002\u0002\u00cc\u03d3\u0003\u0002\u0002",
    "\u0002\u00ce\u03d5\u0003\u0002\u0002\u0002\u00d0\u03d9\u0003\u0002\u0002",
    "\u0002\u00d2\u03dd\u0003\u0002\u0002\u0002\u00d4\u03df\u0003\u0002\u0002",
    "\u0002\u00d6\u03e2\u0003\u0002\u0002\u0002\u00d8\u03e6\u0003\u0002\u0002",
    "\u0002\u00da\u03e8\u0003\u0002\u0002\u0002\u00dc\u03ee\u0003\u0002\u0002",
    "\u0002\u00de\u03f6\u0003\u0002\u0002\u0002\u00e0\u03fa\u0003\u0002\u0002",
    "\u0002\u00e2\u03ff\u0003\u0002\u0002\u0002\u00e4\u0401\u0003\u0002\u0002",
    "\u0002\u00e6\u0403\u0003\u0002\u0002\u0002\u00e8\u040c\u0003\u0002\u0002",
    "\u0002\u00ea\u040e\u0003\u0002\u0002\u0002\u00ec\u0410\u0003\u0002\u0002",
    "\u0002\u00ee\u0412\u0003\u0002\u0002\u0002\u00f0\u0414\u0003\u0002\u0002",
    "\u0002\u00f2\u0417\u0003\u0002\u0002\u0002\u00f4\u0419\u0003\u0002\u0002",
    "\u0002\u00f6\u041c\u0003\u0002\u0002\u0002\u00f8\u041e\u0003\u0002\u0002",
    "\u0002\u00fa\u0420\u0003\u0002\u0002\u0002\u00fc\u0424\u0003\u0002\u0002",
    "\u0002\u00fe\u0426\u0003\u0002\u0002\u0002\u0100\u0434\u0003\u0002\u0002",
    "\u0002\u0102\u043a\u0003\u0002\u0002\u0002\u0104\u043c\u0003\u0002\u0002",
    "\u0002\u0106\u0443\u0003\u0002\u0002\u0002\u0108\u0445\u0003\u0002\u0002",
    "\u0002\u010a\u0450\u0003\u0002\u0002\u0002\u010c\u0454\u0003\u0002\u0002",
    "\u0002\u010e\u0456\u0003\u0002\u0002\u0002\u0110\u045e\u0003\u0002\u0002",
    "\u0002\u0112\u0468\u0003\u0002\u0002\u0002\u0114\u046a\u0003\u0002\u0002",
    "\u0002\u0116\u0474\u0003\u0002\u0002\u0002\u0118\u0476\u0003\u0002\u0002",
    "\u0002\u011a\u0478\u0003\u0002\u0002\u0002\u011c\u047d\u0003\u0002\u0002",
    "\u0002\u011e\u047f\u0003\u0002\u0002\u0002\u0120\u0481\u0003\u0002\u0002",
    "\u0002\u0122\u048c\u0003\u0002\u0002\u0002\u0124\u0490\u0003\u0002\u0002",
    "\u0002\u0126\u0492\u0003\u0002\u0002\u0002\u0128\u0497\u0003\u0002\u0002",
    "\u0002\u012a\u04a7\u0003\u0002\u0002\u0002\u012c\u04ab\u0003\u0002\u0002",
    "\u0002\u012e\u04ad\u0003\u0002\u0002\u0002\u0130\u04b3\u0003\u0002\u0002",
    "\u0002\u0132\u04b7\u0003\u0002\u0002\u0002\u0134\u04b9\u0003\u0002\u0002",
    "\u0002\u0136\u04bb\u0003\u0002\u0002\u0002\u0138\u04c9\u0003\u0002\u0002",
    "\u0002\u013a\u04cc\u0003\u0002\u0002\u0002\u013c\u04d4\u0003\u0002\u0002",
    "\u0002\u013e\u04d7\u0003\u0002\u0002\u0002\u0140\u04d9\u0003\u0002\u0002",
    "\u0002\u0142\u04de\u0003\u0002\u0002\u0002\u0144\u04ee\u0003\u0002\u0002",
    "\u0002\u0146\u04f0\u0003\u0002\u0002\u0002\u0148\u04f4\u0003\u0002\u0002",
    "\u0002\u014a\u04f6\u0003\u0002\u0002\u0002\u014c\u04f8\u0003\u0002\u0002",
    "\u0002\u014e\u04fc\u0003\u0002\u0002\u0002\u0150\u04ff\u0003\u0002\u0002",
    "\u0002\u0152\u0501\u0003\u0002\u0002\u0002\u0154\u050f\u0003\u0002\u0002",
    "\u0002\u0156\u0511\u0003\u0002\u0002\u0002\u0158\u0513\u0003\u0002\u0002",
    "\u0002\u015a\u0518\u0003\u0002\u0002\u0002\u015c\u051a\u0003\u0002\u0002",
    "\u0002\u015e\u051c\u0003\u0002\u0002\u0002\u0160\u051e\u0003\u0002\u0002",
    "\u0002\u0162\u0522\u0003\u0002\u0002\u0002\u0164\u0525\u0003\u0002\u0002",
    "\u0002\u0166\u052a\u0003\u0002\u0002\u0002\u0168\u052e\u0003\u0002\u0002",
    "\u0002\u016a\u0539\u0003\u0002\u0002\u0002\u016c\u053e\u0003\u0002\u0002",
    "\u0002\u016e\u0542\u0003\u0002\u0002\u0002\u0170\u0544\u0003\u0002\u0002",
    "\u0002\u0172\u0547\u0003\u0002\u0002\u0002\u0174\u0550\u0003\u0002\u0002",
    "\u0002\u0176\u0556\u0003\u0002\u0002\u0002\u0178\u0558\u0003\u0002\u0002",
    "\u0002\u017a\u055a\u0003\u0002\u0002\u0002\u017c\u055d\u0003\u0002\u0002",
    "\u0002\u017e\u0564\u0003\u0002\u0002\u0002\u0180\u0566\u0003\u0002\u0002",
    "\u0002\u0182\u056f\u0003\u0002\u0002\u0002\u0184\u0571\u0003\u0002\u0002",
    "\u0002\u0186\u0573\u0003\u0002\u0002\u0002\u0188\u057d\u0003\u0002\u0002",
    "\u0002\u018a\u057f\u0003\u0002\u0002\u0002\u018c\u058b\u0003\u0002\u0002",
    "\u0002\u018e\u058d\u0003\u0002\u0002\u0002\u0190\u058f\u0003\u0002\u0002",
    "\u0002\u0192\u0196\u0005\f\u0007\u0002\u0193\u0196\u0005\u000e\b\u0002",
    "\u0194\u0196\u0005\u0010\t\u0002\u0195\u0192\u0003\u0002\u0002\u0002",
    "\u0195\u0193\u0003\u0002\u0002\u0002\u0195\u0194\u0003\u0002\u0002\u0002",
    "\u0196\u0197\u0003\u0002\u0002\u0002\u0197\u0195\u0003\u0002\u0002\u0002",
    "\u0197\u0198\u0003\u0002\u0002\u0002\u0198\u0003\u0003\u0002\u0002\u0002",
    "\u0199\u019a\t\u0002\u0002\u0002\u019a\u0005\u0003\u0002\u0002\u0002",
    "\u019b\u019c\u0007\u0087\u0002\u0002\u019c\u0007\u0003\u0002\u0002\u0002",
    "\u019d\u019e\u0007\u0087\u0002\u0002\u019e\t\u0003\u0002\u0002\u0002",
    "\u019f\u01a0\u0005\u0004\u0003\u0002\u01a0\u000b\u0003\u0002\u0002\u0002",
    "\u01a1\u01a2\u0005\u0012\n\u0002\u01a2\u01a4\u0007h\u0002\u0002\u01a3",
    "\u01a5\u0005 \u0011\u0002\u01a4\u01a3\u0003\u0002\u0002\u0002\u01a4",
    "\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a6\u0003\u0002\u0002\u0002\u01a6",
    "\u01a7\u0007\u0003\u0002\u0002\u01a7\u01a9\u0007,\u0002\u0002\u01a8",
    "\u01aa\u0005\"\u0012\u0002\u01a9\u01a8\u0003\u0002\u0002\u0002\u01a9",
    "\u01aa\u0003\u0002\u0002\u0002\u01aa\u01ab\u0003\u0002\u0002\u0002\u01ab",
    "\u01ac\u0007!\u0002\u0002\u01ac\r\u0003\u0002\u0002\u0002\u01ad\u01ae",
    "\u0005\u0012\n\u0002\u01ae\u01af\u0007~\u0002\u0002\u01af\u01b0\u0007",
    "\u0003\u0002\u0002\u01b0\u01b1\u0007,\u0002\u0002\u01b1\u01b2\u0005",
    "\u0164\u00b3\u0002\u01b2\u01b3\u0007!\u0002\u0002\u01b3\u000f\u0003",
    "\u0002\u0002\u0002\u01b4\u01b5\u0005\u0012\n\u0002\u01b5\u01b6\u0007",
    "{\u0002\u0002\u01b6\u01b7\u0007\u0003\u0002\u0002\u01b7\u01b8\u0007",
    ",\u0002\u0002\u01b8\u01b9\u0005\u0172\u00ba\u0002\u01b9\u01ba\u0007",
    "!\u0002\u0002\u01ba\u0011\u0003\u0002\u0002\u0002\u01bb\u01bd\u0005",
    "\n\u0006\u0002\u01bc\u01be\u0005\u0014\u000b\u0002\u01bd\u01bc\u0003",
    "\u0002\u0002\u0002\u01bd\u01be\u0003\u0002\u0002\u0002\u01be\u0013\u0003",
    "\u0002\u0002\u0002\u01bf\u01c0\u0005\u0016\f\u0002\u01c0\u0015\u0003",
    "\u0002\u0002\u0002\u01c1\u01c2\u0007\b\u0002\u0002\u01c2\u01c3\u0005",
    "\u0018\r\u0002\u01c3\u01c4\u0007\t\u0002\u0002\u01c4\u0017\u0003\u0002",
    "\u0002\u0002\u01c5\u01c7\u0005\u001a\u000e\u0002\u01c6\u01c5\u0003\u0002",
    "\u0002\u0002\u01c7\u01c8\u0003\u0002\u0002\u0002\u01c8\u01c6\u0003\u0002",
    "\u0002\u0002\u01c8\u01c9\u0003\u0002\u0002\u0002\u01c9\u0019\u0003\u0002",
    "\u0002\u0002\u01ca\u01cb\u0005\u001c\u000f\u0002\u01cb\u001b\u0003\u0002",
    "\u0002\u0002\u01cc\u01cd\u0005\u0006\u0004\u0002\u01cd\u01ce\u0007\f",
    "\u0002\u0002\u01ce\u01cf\u0005\u001e\u0010\u0002\u01cf\u01d0\u0007\r",
    "\u0002\u0002\u01d0\u001d\u0003\u0002\u0002\u0002\u01d1\u01d2\u0007\u0088",
    "\u0002\u0002\u01d2\u001f\u0003\u0002\u0002\u0002\u01d3\u01d4\u0007-",
    "\u0002\u0002\u01d4\u01da\u00077\u0002\u0002\u01d5\u01d6\u0007Y\u0002",
    "\u0002\u01d6\u01da\u00077\u0002\u0002\u01d7\u01d8\u0007(\u0002\u0002",
    "\u01d8\u01da\u00077\u0002\u0002\u01d9\u01d3\u0003\u0002\u0002\u0002",
    "\u01d9\u01d5\u0003\u0002\u0002\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002",
    "\u01da!\u0003\u0002\u0002\u0002\u01db\u01dd\u0005$\u0013\u0002\u01dc",
    "\u01db\u0003\u0002\u0002\u0002\u01dc\u01dd\u0003\u0002\u0002\u0002\u01dd",
    "\u01df\u0003\u0002\u0002\u0002\u01de\u01e0\u0005(\u0015\u0002\u01df",
    "\u01de\u0003\u0002\u0002\u0002\u01df\u01e0\u0003\u0002\u0002\u0002\u01e0",
    "\u01e1\u0003\u0002\u0002\u0002\u01e1\u01e2\u00058\u001d\u0002\u01e2",
    "#\u0003\u0002\u0002\u0002\u01e3\u01e5\u00071\u0002\u0002\u01e4\u01e6",
    "\u0005&\u0014\u0002\u01e5\u01e4\u0003\u0002\u0002\u0002\u01e5\u01e6",
    "\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002\u0002\u01e7\u01e8",
    "\u0007\u0012\u0002\u0002\u01e8%\u0003\u0002\u0002\u0002\u01e9\u01ea",
    "\u00052\u001a\u0002\u01ea\'\u0003\u0002\u0002\u0002\u01eb\u01ed\u0007",
    "a\u0002\u0002\u01ec\u01ee\u0005*\u0016\u0002\u01ed\u01ec\u0003\u0002",
    "\u0002\u0002\u01ed\u01ee\u0003\u0002\u0002\u0002\u01ee\u01ef\u0003\u0002",
    "\u0002\u0002\u01ef\u01f0\u0007\u0012\u0002\u0002\u01f0)\u0003\u0002",
    "\u0002\u0002\u01f1\u01f2\u0005,\u0017\u0002\u01f2+\u0003\u0002\u0002",
    "\u0002\u01f3\u01f5\u0005.\u0018\u0002\u01f4\u01f3\u0003\u0002\u0002",
    "\u0002\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6\u01f4\u0003\u0002\u0002",
    "\u0002\u01f6\u01f7\u0003\u0002\u0002\u0002\u01f7-\u0003\u0002\u0002",
    "\u0002\u01f8\u01f9\u00052\u001a\u0002\u01f9\u01fa\u0007A\u0002\u0002",
    "\u01fa\u01fb\u00050\u0019\u0002\u01fb/\u0003\u0002\u0002\u0002\u01fc",
    "\u01fd\u0005\n\u0006\u0002\u01fd1\u0003\u0002\u0002\u0002\u01fe\u0203",
    "\u00054\u001b\u0002\u01ff\u0200\u0007\n\u0002\u0002\u0200\u0202\u0005",
    "4\u001b\u0002\u0201\u01ff\u0003\u0002\u0002\u0002\u0202\u0205\u0003",
    "\u0002\u0002\u0002\u0203\u0201\u0003\u0002\u0002\u0002\u0203\u0204\u0003",
    "\u0002\u0002\u0002\u02043\u0003\u0002\u0002\u0002\u0205\u0203\u0003",
    "\u0002\u0002\u0002\u0206\u0209\u00056\u001c\u0002\u0207\u0209\u0005",
    "\u014c\u00a7\u0002\u0208\u0206\u0003\u0002\u0002\u0002\u0208\u0207\u0003",
    "\u0002\u0002\u0002\u02095\u0003\u0002\u0002\u0002\u020a\u020d\u0005",
    "\u0004\u0003\u0002\u020b\u020d\u0005\b\u0005\u0002\u020c\u020a\u0003",
    "\u0002\u0002\u0002\u020c\u020b\u0003\u0002\u0002\u0002\u020d7\u0003",
    "\u0002\u0002\u0002\u020e\u0210\u0005:\u001e\u0002\u020f\u020e\u0003",
    "\u0002\u0002\u0002\u0210\u0211\u0003\u0002\u0002\u0002\u0211\u020f\u0003",
    "\u0002\u0002\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u02129\u0003",
    "\u0002\u0002\u0002\u0213\u021a\u0005D#\u0002\u0214\u021a\u0005F$\u0002",
    "\u0215\u021a\u0005\u00fa~\u0002\u0216\u021a\u0005\u011a\u008e\u0002",
    "\u0217\u021a\u0005\u0126\u0094\u0002\u0218\u021a\u0005\u013e\u00a0\u0002",
    "\u0219\u0213\u0003\u0002\u0002\u0002\u0219\u0214\u0003\u0002\u0002\u0002",
    "\u0219\u0215\u0003\u0002\u0002\u0002\u0219\u0216\u0003\u0002\u0002\u0002",
    "\u0219\u0217\u0003\u0002\u0002\u0002\u0219\u0218\u0003\u0002\u0002\u0002",
    "\u021a\u021c\u0003\u0002\u0002\u0002\u021b\u021d\u0007\u0082\u0002\u0002",
    "\u021c\u021b\u0003\u0002\u0002\u0002\u021c\u021d\u0003\u0002\u0002\u0002",
    "\u021d;\u0003\u0002\u0002\u0002\u021e\u0222\u0005@!\u0002\u021f\u0222",
    "\u0005\u0004\u0003\u0002\u0220\u0222\u0005\u014e\u00a8\u0002\u0221\u021e",
    "\u0003\u0002\u0002\u0002\u0221\u021f\u0003\u0002\u0002\u0002\u0221\u0220",
    "\u0003\u0002\u0002\u0002\u0222=\u0003\u0002\u0002\u0002\u0223\u0226",
    "\u0005B\"\u0002\u0224\u0226\u0005\b\u0005\u0002\u0225\u0223\u0003\u0002",
    "\u0002\u0002\u0225\u0224\u0003\u0002\u0002\u0002\u0226?\u0003\u0002",
    "\u0002\u0002\u0227\u0228\u0005\n\u0006\u0002\u0228\u0229\u0007\u000b",
    "\u0002\u0002\u0229\u022a\u0005\u0004\u0003\u0002\u022aA\u0003\u0002",
    "\u0002\u0002\u022b\u022c\u0005\n\u0006\u0002\u022c\u022d\u0007\u000b",
    "\u0002\u0002\u022d\u022e\u0005\b\u0005\u0002\u022eC\u0003\u0002\u0002",
    "\u0002\u022f\u0230\u0005\u0004\u0003\u0002\u0230\u0231\u0007\u0003\u0002",
    "\u0002\u0231\u0232\u0005H%\u0002\u0232E\u0003\u0002\u0002\u0002\u0233",
    "\u0234\u0005\b\u0005\u0002\u0234\u0235\u0005H%\u0002\u0235\u0236\u0007",
    "\u0003\u0002\u0002\u0236\u0237\u0005P)\u0002\u0237G\u0003\u0002\u0002",
    "\u0002\u0238\u023c\u0005J&\u0002\u0239\u023c\u0005L\'\u0002\u023a\u023c",
    "\u0005\u00aaV\u0002\u023b\u0238\u0003\u0002\u0002\u0002\u023b\u0239",
    "\u0003\u0002\u0002\u0002\u023b\u023a\u0003\u0002\u0002\u0002\u023cI",
    "\u0003\u0002\u0002\u0002\u023d\u024a\u0005l7\u0002\u023e\u024a\u0005",
    "T+\u0002\u023f\u024a\u0005\u00a4S\u0002\u0240\u024a\u0005\u0092J\u0002",
    "\u0241\u024a\u0005`1\u0002\u0242\u024a\u0005V,\u0002\u0243\u024a\u0005",
    "v<\u0002\u0244\u024a\u0005\u012e\u0098\u0002\u0245\u024a\u0005\u00a2",
    "R\u0002\u0246\u024a\u0005t;\u0002\u0247\u024a\u0005x=\u0002\u0248\u024a",
    "\u0005\u0090I\u0002\u0249\u023d\u0003\u0002\u0002\u0002\u0249\u023e",
    "\u0003\u0002\u0002\u0002\u0249\u023f\u0003\u0002\u0002\u0002\u0249\u0240",
    "\u0003\u0002\u0002\u0002\u0249\u0241\u0003\u0002\u0002\u0002\u0249\u0242",
    "\u0003\u0002\u0002\u0002\u0249\u0243\u0003\u0002\u0002\u0002\u0249\u0244",
    "\u0003\u0002\u0002\u0002\u0249\u0245\u0003\u0002\u0002\u0002\u0249\u0246",
    "\u0003\u0002\u0002\u0002\u0249\u0247\u0003\u0002\u0002\u0002\u0249\u0248",
    "\u0003\u0002\u0002\u0002\u024aK\u0003\u0002\u0002\u0002\u024b\u024e",
    "\u0005<\u001f\u0002\u024c\u024e\u0005\u00a8U\u0002\u024d\u024b\u0003",
    "\u0002\u0002\u0002\u024d\u024c\u0003\u0002\u0002\u0002\u024eM\u0003",
    "\u0002\u0002\u0002\u024f\u0250\u0005\u0006\u0004\u0002\u0250\u0251\u0005",
    "H%\u0002\u0251O\u0003\u0002\u0002\u0002\u0252\u0253\u0005R*\u0002\u0253",
    "Q\u0003\u0002\u0002\u0002\u0254\u0257\u0005r:\u0002\u0255\u0257\u0005",
    "^0\u0002\u0256\u0254\u0003\u0002\u0002\u0002\u0256\u0255\u0003\u0002",
    "\u0002\u0002\u0257S\u0003\u0002\u0002\u0002\u0258\u0259\u00078\u0002",
    "\u0002\u0259U\u0003\u0002\u0002\u0002\u025a\u0261\u0007q\u0002\u0002",
    "\u025b\u025c\u0007q\u0002\u0002\u025c\u025d\u0007\b\u0002\u0002\u025d",
    "\u025e\u0005X-\u0002\u025e\u025f\u0007\t\u0002\u0002\u025f\u0261\u0003",
    "\u0002\u0002\u0002\u0260\u025a\u0003\u0002\u0002\u0002\u0260\u025b\u0003",
    "\u0002\u0002\u0002\u0261W\u0003\u0002\u0002\u0002\u0262\u0267\u0005",
    "Z.\u0002\u0263\u0264\u0007\n\u0002\u0002\u0264\u0266\u0005Z.\u0002\u0265",
    "\u0263\u0003\u0002\u0002\u0002\u0266\u0269\u0003\u0002\u0002\u0002\u0267",
    "\u0265\u0003\u0002\u0002\u0002\u0267\u0268\u0003\u0002\u0002\u0002\u0268",
    "Y\u0003\u0002\u0002\u0002\u0269\u0267\u0003\u0002\u0002\u0002\u026a",
    "\u026b\u0005\u0006\u0004\u0002\u026b\u026c\u0007\f\u0002\u0002\u026c",
    "\u026d\u0005\\/\u0002\u026d\u026e\u0007\r\u0002\u0002\u026e[\u0003\u0002",
    "\u0002\u0002\u026f\u0273\u0007\u0088\u0002\u0002\u0270\u0271\u0007\u0010",
    "\u0002\u0002\u0271\u0273\u0007\u0088\u0002\u0002\u0272\u026f\u0003\u0002",
    "\u0002\u0002\u0272\u0270\u0003\u0002\u0002\u0002\u0273]\u0003\u0002",
    "\u0002\u0002\u0274\u0277\u0005\\/\u0002\u0275\u0277\u0005\b\u0005\u0002",
    "\u0276\u0274\u0003\u0002\u0002\u0002\u0276\u0275\u0003\u0002\u0002\u0002",
    "\u0277_\u0003\u0002\u0002\u0002\u0278\u0279\u0007%\u0002\u0002\u0279",
    "\u027a\u0007\b\u0002\u0002\u027a\u027b\u0005b2\u0002\u027b\u027c\u0007",
    "\t\u0002\u0002\u027ca\u0003\u0002\u0002\u0002\u027d\u028e\u0005d3\u0002",
    "\u027e\u027f\u0005d3\u0002\u027f\u0280\u0007\n\u0002\u0002\u0280\u0282",
    "\u0007\u0004\u0002\u0002\u0281\u0283\u0005\u00e6t\u0002\u0282\u0281",
    "\u0003\u0002\u0002\u0002\u0282\u0283\u0003\u0002\u0002\u0002\u0283\u028e",
    "\u0003\u0002\u0002\u0002\u0284\u0285\u0005d3\u0002\u0285\u0286\u0007",
    "\n\u0002\u0002\u0286\u0288\u0007\u0004\u0002\u0002\u0287\u0289\u0005",
    "\u00e6t\u0002\u0288\u0287\u0003\u0002\u0002\u0002\u0288\u0289\u0003",
    "\u0002\u0002\u0002\u0289\u028a\u0003\u0002\u0002\u0002\u028a\u028b\u0007",
    "\n\u0002\u0002\u028b\u028c\u0005f4\u0002\u028c\u028e\u0003\u0002\u0002",
    "\u0002\u028d\u027d\u0003\u0002\u0002\u0002\u028d\u027e\u0003\u0002\u0002",
    "\u0002\u028d\u0284\u0003\u0002\u0002\u0002\u028ec\u0003\u0002\u0002",
    "\u0002\u028f\u0290\u0005h5\u0002\u0290e\u0003\u0002\u0002\u0002\u0291",
    "\u0292\u0005h5\u0002\u0292g\u0003\u0002\u0002\u0002\u0293\u0298\u0005",
    "j6\u0002\u0294\u0295\u0007\n\u0002\u0002\u0295\u0297\u0005j6\u0002\u0296",
    "\u0294\u0003\u0002\u0002\u0002\u0297\u029a\u0003\u0002\u0002\u0002\u0298",
    "\u0296\u0003\u0002\u0002\u0002\u0298\u0299\u0003\u0002\u0002\u0002\u0299",
    "i\u0003\u0002\u0002\u0002\u029a\u0298\u0003\u0002\u0002\u0002\u029b",
    "\u029e\u0005\u0006\u0004\u0002\u029c\u029e\u0005Z.\u0002\u029d\u029b",
    "\u0003\u0002\u0002\u0002\u029d\u029c\u0003\u0002\u0002\u0002\u029ek",
    "\u0003\u0002\u0002\u0002\u029f\u02a0\u00070\u0002\u0002\u02a0\u02a8",
    "\u0007+\u0002\u0002\u02a1\u02a2\u00070\u0002\u0002\u02a2\u02a3\u0007",
    "+\u0002\u0002\u02a3\u02a4\u0007\b\u0002\u0002\u02a4\u02a5\u0005n8\u0002",
    "\u02a5\u02a6\u0007\t\u0002\u0002\u02a6\u02a8\u0003\u0002\u0002\u0002",
    "\u02a7\u029f\u0003\u0002\u0002\u0002\u02a7\u02a1\u0003\u0002\u0002\u0002",
    "\u02a8m\u0003\u0002\u0002\u0002\u02a9\u02ae\u0005p9\u0002\u02aa\u02ab",
    "\u0007\n\u0002\u0002\u02ab\u02ad\u0005p9\u0002\u02ac\u02aa\u0003\u0002",
    "\u0002\u0002\u02ad\u02b0\u0003\u0002\u0002\u0002\u02ae\u02ac\u0003\u0002",
    "\u0002\u0002\u02ae\u02af\u0003\u0002\u0002\u0002\u02afo\u0003\u0002",
    "\u0002\u0002\u02b0\u02ae\u0003\u0002\u0002\u0002\u02b1\u02b2\u0005\u0006",
    "\u0004\u0002\u02b2\u02b3\u0007\f\u0002\u0002\u02b3\u02b4\u0007\u0088",
    "\u0002\u0002\u02b4\u02b5\u0007\r\u0002\u0002\u02b5q\u0003\u0002\u0002",
    "\u0002\u02b6\u02b7\u0007\u0089\u0002\u0002\u02b7s\u0003\u0002\u0002",
    "\u0002\u02b8\u02b9\u0007B\u0002\u0002\u02b9\u02ba\u0007+\u0002\u0002",
    "\u02bau\u0003\u0002\u0002\u0002\u02bb\u02bc\u00072\u0002\u0002\u02bc",
    "w\u0003\u0002\u0002\u0002\u02bd\u02be\u0007\u001b\u0002\u0002\u02be",
    "\u02bf\u0007\b\u0002\u0002\u02bf\u02ce\u0007\t\u0002\u0002\u02c0\u02c1",
    "\u0007\u001b\u0002\u0002\u02c1\u02c2\u0007\b\u0002\u0002\u02c2\u02c4",
    "\u0005z>\u0002\u02c3\u02c5\u0005|?\u0002\u02c4\u02c3\u0003\u0002\u0002",
    "\u0002\u02c4\u02c5\u0003\u0002\u0002\u0002\u02c5\u02c6\u0003\u0002\u0002",
    "\u0002\u02c6\u02c7\u0007\t\u0002\u0002\u02c7\u02ce\u0003\u0002\u0002",
    "\u0002\u02c8\u02c9\u0007\u001b\u0002\u0002\u02c9\u02ca\u0007\b\u0002",
    "\u0002\u02ca\u02cb\u0005~@\u0002\u02cb\u02cc\u0007\t\u0002\u0002\u02cc",
    "\u02ce\u0003\u0002\u0002\u0002\u02cd\u02bd\u0003\u0002\u0002\u0002\u02cd",
    "\u02c0\u0003\u0002\u0002\u0002\u02cd\u02c8\u0003\u0002\u0002\u0002\u02ce",
    "y\u0003\u0002\u0002\u0002\u02cf\u02d5\u0007\u0004\u0002\u0002\u02d0",
    "\u02d2\u0007\u0004\u0002\u0002\u02d1\u02d3\u0005\u00e6t\u0002\u02d2",
    "\u02d1\u0003\u0002\u0002\u0002\u02d2\u02d3\u0003\u0002\u0002\u0002\u02d3",
    "\u02d5\u0003\u0002\u0002\u0002\u02d4\u02cf\u0003\u0002\u0002\u0002\u02d4",
    "\u02d0\u0003\u0002\u0002\u0002\u02d5{\u0003\u0002\u0002\u0002\u02d6",
    "\u02d7\u0007\n\u0002\u0002\u02d7\u02d8\u0007\u0004\u0002\u0002\u02d8",
    "}\u0003\u0002\u0002\u0002\u02d9\u02db\u0005\u0080A\u0002\u02da\u02dc",
    "\u0007\u0082\u0002\u0002\u02db\u02da\u0003\u0002\u0002\u0002\u02db\u02dc",
    "\u0003\u0002\u0002\u0002\u02dc\u0306\u0003\u0002\u0002\u0002\u02dd\u02de",
    "\u0005\u0080A\u0002\u02de\u02e0\u0007\n\u0002\u0002\u02df\u02e1\u0007",
    "\u0082\u0002\u0002\u02e0\u02df\u0003\u0002\u0002\u0002\u02e0\u02e1\u0003",
    "\u0002\u0002\u0002\u02e1\u02e2\u0003\u0002\u0002\u0002\u02e2\u02e4\u0005",
    "z>\u0002\u02e3\u02e5\u0005\u0084C\u0002\u02e4\u02e3\u0003\u0002\u0002",
    "\u0002\u02e4\u02e5\u0003\u0002\u0002\u0002\u02e5\u02e7\u0003\u0002\u0002",
    "\u0002\u02e6\u02e8\u0005|?\u0002\u02e7\u02e6\u0003\u0002\u0002\u0002",
    "\u02e7\u02e8\u0003\u0002\u0002\u0002\u02e8\u0306\u0003\u0002\u0002\u0002",
    "\u02e9\u02ea\u0005\u0080A\u0002\u02ea\u02ec\u0007\n\u0002\u0002\u02eb",
    "\u02ed\u0007\u0082\u0002\u0002\u02ec\u02eb\u0003\u0002\u0002\u0002\u02ec",
    "\u02ed\u0003\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee",
    "\u02f0\u0005z>\u0002\u02ef\u02f1\u0005\u0084C\u0002\u02f0\u02ef\u0003",
    "\u0002\u0002\u0002\u02f0\u02f1\u0003\u0002\u0002\u0002\u02f1\u02f2\u0003",
    "\u0002\u0002\u0002\u02f2\u02f3\u0005\u0082B\u0002\u02f3\u02f4\u0007",
    "\n\u0002\u0002\u02f4\u02f5\u0005\u0080A\u0002\u02f5\u0306\u0003\u0002",
    "\u0002\u0002\u02f6\u02f8\u0005z>\u0002\u02f7\u02f9\u0005\u0084C\u0002",
    "\u02f8\u02f7\u0003\u0002\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002",
    "\u02f9\u02fa\u0003\u0002\u0002\u0002\u02fa\u02fb\u0005\u0082B\u0002",
    "\u02fb\u02fc\u0007\n\u0002\u0002\u02fc\u02fd\u0005\u0080A\u0002\u02fd",
    "\u0306\u0003\u0002\u0002\u0002\u02fe\u0300\u0005z>\u0002\u02ff\u0301",
    "\u0005\u0084C\u0002\u0300\u02ff\u0003\u0002\u0002\u0002\u0300\u0301",
    "\u0003\u0002\u0002\u0002\u0301\u0303\u0003\u0002\u0002\u0002\u0302\u0304",
    "\u0005|?\u0002\u0303\u0302\u0003\u0002\u0002\u0002\u0303\u0304\u0003",
    "\u0002\u0002\u0002\u0304\u0306\u0003\u0002\u0002\u0002\u0305\u02d9\u0003",
    "\u0002\u0002\u0002\u0305\u02dd\u0003\u0002\u0002\u0002\u0305\u02e9\u0003",
    "\u0002\u0002\u0002\u0305\u02f6\u0003\u0002\u0002\u0002\u0305\u02fe\u0003",
    "\u0002\u0002\u0002\u0306\u007f\u0003\u0002\u0002\u0002\u0307\u0308\u0005",
    "\u008cG\u0002\u0308\u0081\u0003\u0002\u0002\u0002\u0309\u030a\u0007",
    "\n\u0002\u0002\u030a\u030b\u0007\u0004\u0002\u0002\u030b\u0083\u0003",
    "\u0002\u0002\u0002\u030c\u030d\u0007\n\u0002\u0002\u030d\u030e\u0005",
    "\u0086D\u0002\u030e\u0085\u0003\u0002\u0002\u0002\u030f\u0314\u0005",
    "\u0088E\u0002\u0310\u0311\u0007\n\u0002\u0002\u0311\u0313\u0005\u0088",
    "E\u0002\u0312\u0310\u0003\u0002\u0002\u0002\u0313\u0316\u0003\u0002",
    "\u0002\u0002\u0314\u0312\u0003\u0002\u0002\u0002\u0314\u0315\u0003\u0002",
    "\u0002\u0002\u0315\u0087\u0003\u0002\u0002\u0002\u0316\u0314\u0003\u0002",
    "\u0002\u0002\u0317\u031a\u0005\u008eH\u0002\u0318\u031a\u0005\u008a",
    "F\u0002\u0319\u0317\u0003\u0002\u0002\u0002\u0319\u0318\u0003\u0002",
    "\u0002\u0002\u031a\u0089\u0003\u0002\u0002\u0002\u031b\u031c\u0007\u0006",
    "\u0002\u0002\u031c\u031e\u0005\u008cG\u0002\u031d\u031f\u0007\u0082",
    "\u0002\u0002\u031e\u031d\u0003\u0002\u0002\u0002\u031e\u031f\u0003\u0002",
    "\u0002\u0002\u031f\u0320\u0003\u0002\u0002\u0002\u0320\u0321\u0007\u0007",
    "\u0002\u0002\u0321\u008b\u0003\u0002\u0002\u0002\u0322\u032a\u0005\u008e",
    "H\u0002\u0323\u0325\u0007\n\u0002\u0002\u0324\u0326\u0007\u0082\u0002",
    "\u0002\u0325\u0324\u0003\u0002\u0002\u0002\u0325\u0326\u0003\u0002\u0002",
    "\u0002\u0326\u0327\u0003\u0002\u0002\u0002\u0327\u0329\u0005\u008eH",
    "\u0002\u0328\u0323\u0003\u0002\u0002\u0002\u0329\u032c\u0003\u0002\u0002",
    "\u0002\u032a\u0328\u0003\u0002\u0002\u0002\u032a\u032b\u0003\u0002\u0002",
    "\u0002\u032b\u008d\u0003\u0002\u0002\u0002\u032c\u032a\u0003\u0002\u0002",
    "\u0002\u032d\u0336\u0005N(\u0002\u032e\u032f\u0005N(\u0002\u032f\u0330",
    "\u0007N\u0002\u0002\u0330\u0336\u0003\u0002\u0002\u0002\u0331\u0332",
    "\u0005N(\u0002\u0332\u0333\u0007d\u0002\u0002\u0333\u0334\u0005P)\u0002",
    "\u0334\u0336\u0003\u0002\u0002\u0002\u0335\u032d\u0003\u0002\u0002\u0002",
    "\u0335\u032e\u0003\u0002\u0002\u0002\u0335\u0331\u0003\u0002\u0002\u0002",
    "\u0336\u008f\u0003\u0002\u0002\u0002\u0337\u0338\u0007\u001b\u0002\u0002",
    "\u0338\u0339\u0007F\u0002\u0002\u0339\u033e\u0005H%\u0002\u033a\u033b",
    "\u0007\u001b\u0002\u0002\u033b\u033c\u0007F\u0002\u0002\u033c\u033e",
    "\u0005N(\u0002\u033d\u0337\u0003\u0002\u0002\u0002\u033d\u033a\u0003",
    "\u0002\u0002\u0002\u033e\u0091\u0003\u0002\u0002\u0002\u033f\u0340\u0007",
    "D\u0002\u0002\u0340\u0341\u0007\b\u0002\u0002\u0341\u0342\u0005\u0094",
    "K\u0002\u0342\u0343\u0007\t\u0002\u0002\u0343\u0093\u0003\u0002\u0002",
    "\u0002\u0344\u034f\u0005\u0096L\u0002\u0345\u0346\u0005\u0096L\u0002",
    "\u0346\u0347\u0007\n\u0002\u0002\u0347\u0349\u0005z>\u0002\u0348\u034a",
    "\u0005\u0098M\u0002\u0349\u0348\u0003\u0002\u0002\u0002\u0349\u034a",
    "\u0003\u0002\u0002\u0002\u034a\u034c\u0003\u0002\u0002\u0002\u034b\u034d",
    "\u0005|?\u0002\u034c\u034b\u0003\u0002\u0002\u0002\u034c\u034d\u0003",
    "\u0002\u0002\u0002\u034d\u034f\u0003\u0002\u0002\u0002\u034e\u0344\u0003",
    "\u0002\u0002\u0002\u034e\u0345\u0003\u0002\u0002\u0002\u034f\u0095\u0003",
    "\u0002\u0002\u0002\u0350\u0351\u0005\u00a0Q\u0002\u0351\u0097\u0003",
    "\u0002\u0002\u0002\u0352\u0353\u0007\n\u0002\u0002\u0353\u0354\u0005",
    "\u009aN\u0002\u0354\u0099\u0003\u0002\u0002\u0002\u0355\u035a\u0005",
    "\u009cO\u0002\u0356\u0357\u0007\n\u0002\u0002\u0357\u0359\u0005\u009c",
    "O\u0002\u0358\u0356\u0003\u0002\u0002\u0002\u0359\u035c\u0003\u0002",
    "\u0002\u0002\u035a\u0358\u0003\u0002\u0002\u0002\u035a\u035b\u0003\u0002",
    "\u0002\u0002\u035b\u009b\u0003\u0002\u0002\u0002\u035c\u035a\u0003\u0002",
    "\u0002\u0002\u035d\u0360\u0005\u009eP\u0002\u035e\u0360\u0005N(\u0002",
    "\u035f\u035d\u0003\u0002\u0002\u0002\u035f\u035e\u0003\u0002\u0002\u0002",
    "\u0360\u009d\u0003\u0002\u0002\u0002\u0361\u0362\u0007\u0006\u0002\u0002",
    "\u0362\u0363\u0005\u00a0Q\u0002\u0363\u0364\u0007\u0007\u0002\u0002",
    "\u0364\u009f\u0003\u0002\u0002\u0002\u0365\u036a\u0005N(\u0002\u0366",
    "\u0367\u0007\n\u0002\u0002\u0367\u0369\u0005N(\u0002\u0368\u0366\u0003",
    "\u0002\u0002\u0002\u0369\u036c\u0003\u0002\u0002\u0002\u036a\u0368\u0003",
    "\u0002\u0002\u0002\u036a\u036b\u0003\u0002\u0002\u0002\u036b\u00a1\u0003",
    "\u0002\u0002\u0002\u036c\u036a\u0003\u0002\u0002\u0002\u036d\u036e\u0007",
    ":\u0002\u0002\u036e\u036f\u0007U\u0002\u0002\u036f\u00a3\u0003\u0002",
    "\u0002\u0002\u0370\u0371\u0005\u00a6T\u0002\u0371\u00a5\u0003\u0002",
    "\u0002\u0002\u0372\u0373\t\u0003\u0002\u0002\u0373\u00a7\u0003\u0002",
    "\u0002\u0002\u0374\u0375\u0007_\u0002\u0002\u0375\u00a9\u0003\u0002",
    "\u0002\u0002\u0376\u0378\u0005J&\u0002\u0377\u0379\u0005\u00aeX\u0002",
    "\u0378\u0377\u0003\u0002\u0002\u0002\u0379\u037a\u0003\u0002\u0002\u0002",
    "\u037a\u0378\u0003\u0002\u0002\u0002\u037a\u037b\u0003\u0002\u0002\u0002",
    "\u037b\u038a\u0003\u0002\u0002\u0002\u037c\u037e\u0005L\'\u0002\u037d",
    "\u037f\u0005\u00aeX\u0002\u037e\u037d\u0003\u0002\u0002\u0002\u037f",
    "\u0380\u0003\u0002\u0002\u0002\u0380\u037e\u0003\u0002\u0002\u0002\u0380",
    "\u0381\u0003\u0002\u0002\u0002\u0381\u038a\u0003\u0002\u0002\u0002\u0382",
    "\u0386\u0005\u00acW\u0002\u0383\u0385\u0005\u00aeX\u0002\u0384\u0383",
    "\u0003\u0002\u0002\u0002\u0385\u0388\u0003\u0002\u0002\u0002\u0386\u0384",
    "\u0003\u0002\u0002\u0002\u0386\u0387\u0003\u0002\u0002\u0002\u0387\u038a",
    "\u0003\u0002\u0002\u0002\u0388\u0386\u0003\u0002\u0002\u0002\u0389\u0376",
    "\u0003\u0002\u0002\u0002\u0389\u037c\u0003\u0002\u0002\u0002\u0389\u0382",
    "\u0003\u0002\u0002\u0002\u038a\u00ab\u0003\u0002\u0002\u0002\u038b\u038c",
    "\u0007\u001b\u0002\u0002\u038c\u038d\u0005\u00aeX\u0002\u038d\u038e",
    "\u0007F\u0002\u0002\u038e\u038f\u0005H%\u0002\u038f\u00ad\u0003\u0002",
    "\u0002\u0002\u0390\u0391\u0007\f\u0002\u0002\u0391\u0393\u0005\u00b0",
    "Y\u0002\u0392\u0394\u0005\u00e6t\u0002\u0393\u0392\u0003\u0002\u0002",
    "\u0002\u0393\u0394\u0003\u0002\u0002\u0002\u0394\u0395\u0003\u0002\u0002",
    "\u0002\u0395\u0396\u0007\r\u0002\u0002\u0396\u00af\u0003\u0002\u0002",
    "\u0002\u0397\u039a\u0005\u00b2Z\u0002\u0398\u039a\u0005\u0130\u0099",
    "\u0002\u0399\u0397\u0003\u0002\u0002\u0002\u0399\u0398\u0003\u0002\u0002",
    "\u0002\u039a\u00b1\u0003\u0002\u0002\u0002\u039b\u039c\u0005\u00b4[",
    "\u0002\u039c\u00b3\u0003\u0002\u0002\u0002\u039d\u03a9\u0005\u00b6\\",
    "\u0002\u039e\u039f\u0005\u00b6\\\u0002\u039f\u03a0\u0007\n\u0002\u0002",
    "\u03a0\u03a1\u0007\u0004\u0002\u0002\u03a1\u03a9\u0003\u0002\u0002\u0002",
    "\u03a2\u03a3\u0005\u00b6\\\u0002\u03a3\u03a4\u0007\n\u0002\u0002\u03a4",
    "\u03a5\u0007\u0004\u0002\u0002\u03a5\u03a6\u0007\n\u0002\u0002\u03a6",
    "\u03a7\u0005\u00b8]\u0002\u03a7\u03a9\u0003\u0002\u0002\u0002\u03a8",
    "\u039d\u0003\u0002\u0002\u0002\u03a8\u039e\u0003\u0002\u0002\u0002\u03a8",
    "\u03a2\u0003\u0002\u0002\u0002\u03a9\u00b5\u0003\u0002\u0002\u0002\u03aa",
    "\u03ab\u0005\u00ba^\u0002\u03ab\u00b7\u0003\u0002\u0002\u0002\u03ac",
    "\u03ad\u0005\u00ba^\u0002\u03ad\u00b9\u0003\u0002\u0002\u0002\u03ae",
    "\u03af\u0005\u00bc_\u0002\u03af\u00bb\u0003\u0002\u0002\u0002\u03b0",
    "\u03b6\u0005\u00be`\u0002\u03b1\u03b2\u0005\u00c2b\u0002\u03b2\u03b3",
    "\u0005\u00be`\u0002\u03b3\u03b5\u0003\u0002\u0002\u0002\u03b4\u03b1",
    "\u0003\u0002\u0002\u0002\u03b5\u03b8\u0003\u0002\u0002\u0002\u03b6\u03b4",
    "\u0003\u0002\u0002\u0002\u03b6\u03b7\u0003\u0002\u0002\u0002\u03b7\u00bd",
    "\u0003\u0002\u0002\u0002\u03b8\u03b6\u0003\u0002\u0002\u0002\u03b9\u03ba",
    "\u0005\u00c0a\u0002\u03ba\u00bf\u0003\u0002\u0002\u0002\u03bb\u03bc",
    "\u0005\u00c4c\u0002\u03bc\u00c1\u0003\u0002\u0002\u0002\u03bd\u03be",
    "\u0007\u0014\u0002\u0002\u03be\u00c3\u0003\u0002\u0002\u0002\u03bf\u03c6",
    "\u0005\u00c6d\u0002\u03c0\u03c6\u0005\u012c\u0097\u0002\u03c1\u03c2",
    "\u0007\f\u0002\u0002\u03c2\u03c3\u0005\u00ba^\u0002\u03c3\u03c4\u0007",
    "\r\u0002\u0002\u03c4\u03c6\u0003\u0002\u0002\u0002\u03c5\u03bf\u0003",
    "\u0002\u0002\u0002\u03c5\u03c0\u0003\u0002\u0002\u0002\u03c5\u03c1\u0003",
    "\u0002\u0002\u0002\u03c6\u00c5\u0003\u0002\u0002\u0002\u03c7\u03cc\u0005",
    "\u00c8e\u0002\u03c8\u03cc\u0005\u00caf\u0002\u03c9\u03cc\u0005\u00d4",
    "k\u0002\u03ca\u03cc\u0005\u00d6l\u0002\u03cb\u03c7\u0003\u0002\u0002",
    "\u0002\u03cb\u03c8\u0003\u0002\u0002\u0002\u03cb\u03c9\u0003\u0002\u0002",
    "\u0002\u03cb\u03ca\u0003\u0002\u0002\u0002\u03cc\u00c7\u0003\u0002\u0002",
    "\u0002\u03cd\u03ce\u0005P)\u0002\u03ce\u00c9\u0003\u0002\u0002\u0002",
    "\u03cf\u03d0\u0005\u00ccg\u0002\u03d0\u03d1\u0007\u0005\u0002\u0002",
    "\u03d1\u03d2\u0005\u00ceh\u0002\u03d2\u00cb\u0003\u0002\u0002\u0002",
    "\u03d3\u03d4\u0005\u00d0i\u0002\u03d4\u00cd\u0003\u0002\u0002\u0002",
    "\u03d5\u03d6\u0005\u00d2j\u0002\u03d6\u00cf\u0003\u0002\u0002\u0002",
    "\u03d7\u03da\u0005P)\u0002\u03d8\u03da\u0007&\u0002\u0002\u03d9\u03d7",
    "\u0003\u0002\u0002\u0002\u03d9\u03d8\u0003\u0002\u0002\u0002\u03da\u00d1",
    "\u0003\u0002\u0002\u0002\u03db\u03de\u0005P)\u0002\u03dc\u03de\u0007",
    "\"\u0002\u0002\u03dd\u03db\u0003\u0002\u0002\u0002\u03dd\u03dc\u0003",
    "\u0002\u0002\u0002\u03de\u00d3\u0003\u0002\u0002\u0002\u03df\u03e0\u0007",
    "\'\u0002\u0002\u03e0\u03e1\u0005\u00aeX\u0002\u03e1\u00d5\u0003\u0002",
    "\u0002\u0002\u03e2\u03e3\u0007o\u0002\u0002\u03e3\u03e4\u0007P\u0002",
    "\u0002\u03e4\u03e5\u0005\u00d8m\u0002\u03e5\u00d7\u0003\u0002\u0002",
    "\u0002\u03e6\u03e7\u0005\u00dan\u0002\u03e7\u00d9\u0003\u0002\u0002",
    "\u0002\u03e8\u03e9\u0007\b\u0002\u0002\u03e9\u03ea\u0007\u0004\u0002",
    "\u0002\u03ea\u03eb\u0007\n\u0002\u0002\u03eb\u03ec\u0005\u00dco\u0002",
    "\u03ec\u03ed\u0007\t\u0002\u0002\u03ed\u00db\u0003\u0002\u0002\u0002",
    "\u03ee\u03f3\u0005\u00dep\u0002\u03ef\u03f0\u0007\n\u0002\u0002\u03f0",
    "\u03f2\u0005\u00dep\u0002\u03f1\u03ef\u0003\u0002\u0002\u0002\u03f2",
    "\u03f5\u0003\u0002\u0002\u0002\u03f3\u03f1\u0003\u0002\u0002\u0002\u03f3",
    "\u03f4\u0003\u0002\u0002\u0002\u03f4\u00dd\u0003\u0002\u0002\u0002\u03f5",
    "\u03f3\u0003\u0002\u0002\u0002\u03f6\u03f7\u0005\u0006\u0004\u0002\u03f7",
    "\u03f8\u0005\u00e0q\u0002\u03f8\u00df\u0003\u0002\u0002\u0002\u03f9",
    "\u03fb\u0005\u00e2r\u0002\u03fa\u03f9\u0003\u0002\u0002\u0002\u03fa",
    "\u03fb\u0003\u0002\u0002\u0002\u03fb\u03fd\u0003\u0002\u0002\u0002\u03fc",
    "\u03fe\u0005\u00e4s\u0002\u03fd\u03fc\u0003\u0002\u0002\u0002\u03fd",
    "\u03fe\u0003\u0002\u0002\u0002\u03fe\u00e1\u0003\u0002\u0002\u0002\u03ff",
    "\u0400\u0005\u00aeX\u0002\u0400\u00e3\u0003\u0002\u0002\u0002\u0401",
    "\u0402\t\u0004\u0002\u0002\u0402\u00e5\u0003\u0002\u0002\u0002\u0403",
    "\u0404\u0007\u0015\u0002\u0002\u0404\u0405\u0005\u00e8u\u0002\u0405",
    "\u00e7\u0003\u0002\u0002\u0002\u0406\u040d\u0005\\/\u0002\u0407\u040d",
    "\u0005> \u0002\u0408\u0409\u0005H%\u0002\u0409\u040a\u0007\u0011\u0002",
    "\u0002\u040a\u040b\u0005P)\u0002\u040b\u040d\u0003\u0002\u0002\u0002",
    "\u040c\u0406\u0003\u0002\u0002\u0002\u040c\u0407\u0003\u0002\u0002\u0002",
    "\u040c\u0408\u0003\u0002\u0002\u0002\u040d\u00e9\u0003\u0002\u0002\u0002",
    "\u040e\u040f\t\u0005\u0002\u0002\u040f\u00eb\u0003\u0002\u0002\u0002",
    "\u0410\u0411\u0005\u0004\u0003\u0002\u0411\u00ed\u0003\u0002\u0002\u0002",
    "\u0412\u0413\u0007\u0087\u0002\u0002\u0413\u00ef\u0003\u0002\u0002\u0002",
    "\u0414\u0415\u0007\u0016\u0002\u0002\u0415\u0416\u0007\u0087\u0002\u0002",
    "\u0416\u00f1\u0003\u0002\u0002\u0002\u0417\u0418\u0007\u0084\u0002\u0002",
    "\u0418\u00f3\u0003\u0002\u0002\u0002\u0419\u041a\u0007\u0016\u0002\u0002",
    "\u041a\u041b\u0005\u0004\u0003\u0002\u041b\u00f5\u0003\u0002\u0002\u0002",
    "\u041c\u041d\u0005\u00eav\u0002\u041d\u00f7\u0003\u0002\u0002\u0002",
    "\u041e\u041f\u0005\u00ecw\u0002\u041f\u00f9\u0003\u0002\u0002\u0002",
    "\u0420\u0421\u0005\u00eav\u0002\u0421\u0422\u0007\u0003\u0002\u0002",
    "\u0422\u0423\u0005\u00fc\u007f\u0002\u0423\u00fb\u0003\u0002\u0002\u0002",
    "\u0424\u0425\u0005\u00fe\u0080\u0002\u0425\u00fd\u0003\u0002\u0002\u0002",
    "\u0426\u0427\u0007H\u0002\u0002\u0427\u0428\u0007\b\u0002\u0002\u0428",
    "\u042d\u0005\u0102\u0082\u0002\u0429\u042a\u0007\n\u0002\u0002\u042a",
    "\u042c\u0005\u0102\u0082\u0002\u042b\u0429\u0003\u0002\u0002\u0002\u042c",
    "\u042f\u0003\u0002\u0002\u0002\u042d\u042b\u0003\u0002\u0002\u0002\u042d",
    "\u042e\u0003\u0002\u0002\u0002\u042e\u0430\u0003\u0002\u0002\u0002\u042f",
    "\u042d\u0003\u0002\u0002\u0002\u0430\u0432\u0007\t\u0002\u0002\u0431",
    "\u0433\u0005\u0100\u0081\u0002\u0432\u0431\u0003\u0002\u0002\u0002\u0432",
    "\u0433\u0003\u0002\u0002\u0002\u0433\u00ff\u0003\u0002\u0002\u0002\u0434",
    "\u0435\u0007o\u0002\u0002\u0435\u0436\u0007/\u0002\u0002\u0436\u0437",
    "\u0005\u0110\u0089\u0002\u0437\u0101\u0003\u0002\u0002\u0002\u0438\u043b",
    "\u0005\u0104\u0083\u0002\u0439\u043b\u0005\u0108\u0085\u0002\u043a\u0438",
    "\u0003\u0002\u0002\u0002\u043a\u0439\u0003\u0002\u0002\u0002\u043b\u0103",
    "\u0003\u0002\u0002\u0002\u043c\u043e\u0005\u00f4{\u0002\u043d\u043f",
    "\u0005\u0106\u0084\u0002\u043e\u043d\u0003\u0002\u0002\u0002\u043e\u043f",
    "\u0003\u0002\u0002\u0002\u043f\u0105\u0003\u0002\u0002\u0002\u0440\u0444",
    "\u0007N\u0002\u0002\u0441\u0442\u0007d\u0002\u0002\u0442\u0444\u0005",
    "H%\u0002\u0443\u0440\u0003\u0002\u0002\u0002\u0443\u0441\u0003\u0002",
    "\u0002\u0002\u0444\u0107\u0003\u0002\u0002\u0002\u0445\u0446\u0005\u00f0",
    "y\u0002\u0446\u0448\u0005H%\u0002\u0447\u0449\u0007S\u0002\u0002\u0448",
    "\u0447\u0003\u0002\u0002\u0002\u0448\u0449\u0003\u0002\u0002\u0002\u0449",
    "\u044b\u0003\u0002\u0002\u0002\u044a\u044c\u0005\u010a\u0086\u0002\u044b",
    "\u044a\u0003\u0002\u0002\u0002\u044b\u044c\u0003\u0002\u0002\u0002\u044c",
    "\u0109\u0003\u0002\u0002\u0002\u044d\u0451\u0007N\u0002\u0002\u044e",
    "\u044f\u0007d\u0002\u0002\u044f\u0451\u0005P)\u0002\u0450\u044d\u0003",
    "\u0002\u0002\u0002\u0450\u044e\u0003\u0002\u0002\u0002\u0451\u010b\u0003",
    "\u0002\u0002\u0002\u0452\u0455\u0005\u00f4{\u0002\u0453\u0455\u0005",
    "\u00f0y\u0002\u0454\u0452\u0003\u0002\u0002\u0002\u0454\u0453\u0003",
    "\u0002\u0002\u0002\u0455\u010d\u0003\u0002\u0002\u0002\u0456\u045b\u0005",
    "\u010c\u0087\u0002\u0457\u0458\u0007\u000b\u0002\u0002\u0458\u045a\u0005",
    "\u010c\u0087\u0002\u0459\u0457\u0003\u0002\u0002\u0002\u045a\u045d\u0003",
    "\u0002\u0002\u0002\u045b\u0459\u0003\u0002\u0002\u0002\u045b\u045c\u0003",
    "\u0002\u0002\u0002\u045c\u010f\u0003\u0002\u0002\u0002\u045d\u045b\u0003",
    "\u0002\u0002\u0002\u045e\u0460\u0007\b\u0002\u0002\u045f\u0461\u0005",
    "\u0112\u008a\u0002\u0460\u045f\u0003\u0002\u0002\u0002\u0461\u0462\u0003",
    "\u0002\u0002\u0002\u0462\u0460\u0003\u0002\u0002\u0002\u0462\u0463\u0003",
    "\u0002\u0002\u0002\u0463\u0464\u0003\u0002\u0002\u0002\u0464\u0465\u0007",
    "\t\u0002\u0002\u0465\u0111\u0003\u0002\u0002\u0002\u0466\u0469\u0005",
    "\u0116\u008c\u0002\u0467\u0469\u0005\u0114\u008b\u0002\u0468\u0466\u0003",
    "\u0002\u0002\u0002\u0468\u0467\u0003\u0002\u0002\u0002\u0469\u0113\u0003",
    "\u0002\u0002\u0002\u046a\u046c\u0007\u000e\u0002\u0002\u046b\u046d\u0005",
    "\u0112\u008a\u0002\u046c\u046b\u0003\u0002\u0002\u0002\u046d\u046e\u0003",
    "\u0002\u0002\u0002\u046e\u046c\u0003\u0002\u0002\u0002\u046e\u046f\u0003",
    "\u0002\u0002\u0002\u046f\u0470\u0003\u0002\u0002\u0002\u0470\u0471\u0007",
    "\u000f\u0002\u0002\u0471\u0115\u0003\u0002\u0002\u0002\u0472\u0475\u0005",
    "\u0118\u008d\u0002\u0473\u0475\u0005\u010c\u0087\u0002\u0474\u0472\u0003",
    "\u0002\u0002\u0002\u0474\u0473\u0003\u0002\u0002\u0002\u0475\u0117\u0003",
    "\u0002\u0002\u0002\u0476\u0477\u0005\u00f2z\u0002\u0477\u0119\u0003",
    "\u0002\u0002\u0002\u0478\u0479\u0005\u00eex\u0002\u0479\u047a\u0005",
    "\u00f6|\u0002\u047a\u047b\u0007\u0003\u0002\u0002\u047b\u047c\u0005",
    "\u011c\u008f\u0002\u047c\u011b\u0003\u0002\u0002\u0002\u047d\u047e\u0005",
    "\u011e\u0090\u0002\u047e\u011d\u0003\u0002\u0002\u0002\u047f\u0480\u0005",
    "\u0120\u0091\u0002\u0480\u011f\u0003\u0002\u0002\u0002\u0481\u0485\u0007",
    "\b\u0002\u0002\u0482\u0484\u0005\u0122\u0092\u0002\u0483\u0482\u0003",
    "\u0002\u0002\u0002\u0484\u0487\u0003\u0002\u0002\u0002\u0485\u0483\u0003",
    "\u0002\u0002\u0002\u0485\u0486\u0003\u0002\u0002\u0002\u0486\u0488\u0003",
    "\u0002\u0002\u0002\u0487\u0485\u0003\u0002\u0002\u0002\u0488\u0489\u0007",
    "\t\u0002\u0002\u0489\u0121\u0003\u0002\u0002\u0002\u048a\u048d\u0005",
    "\u0118\u008d\u0002\u048b\u048d\u0005\u0124\u0093\u0002\u048c\u048a\u0003",
    "\u0002\u0002\u0002\u048c\u048b\u0003\u0002\u0002\u0002\u048d\u0123\u0003",
    "\u0002\u0002\u0002\u048e\u0491\u0005H%\u0002\u048f\u0491\u0005P)\u0002",
    "\u0490\u048e\u0003\u0002\u0002\u0002\u0490\u048f\u0003\u0002\u0002\u0002",
    "\u0491\u0125\u0003\u0002\u0002\u0002\u0492\u0493\u0005\u00ecw\u0002",
    "\u0493\u0494\u0005\u00f6|\u0002\u0494\u0495\u0007\u0003\u0002\u0002",
    "\u0495\u0496\u0005\u0128\u0095\u0002\u0496\u0127\u0003\u0002\u0002\u0002",
    "\u0497\u0498\u0007\b\u0002\u0002\u0498\u0499\u0005\u012a\u0096\u0002",
    "\u0499\u049a\u0007\t\u0002\u0002\u049a\u0129\u0003\u0002\u0002\u0002",
    "\u049b\u04a8\u0005\u00b6\\\u0002\u049c\u049d\u0005\u00b6\\\u0002\u049d",
    "\u049e\u0007\n\u0002\u0002\u049e\u049f\u0007\u0004\u0002\u0002\u049f",
    "\u04a8\u0003\u0002\u0002\u0002\u04a0\u04a8\u0007\u0004\u0002\u0002\u04a1",
    "\u04a2\u0005\u00b6\\\u0002\u04a2\u04a3\u0007\n\u0002\u0002\u04a3\u04a4",
    "\u0007\u0004\u0002\u0002\u04a4\u04a5\u0007\n\u0002\u0002\u04a5\u04a6",
    "\u0005\u00b8]\u0002\u04a6\u04a8\u0003\u0002\u0002\u0002\u04a7\u049b",
    "\u0003\u0002\u0002\u0002\u04a7\u049c\u0003\u0002\u0002\u0002\u04a7\u04a0",
    "\u0003\u0002\u0002\u0002\u04a7\u04a1\u0003\u0002\u0002\u0002\u04a8\u012b",
    "\u0003\u0002\u0002\u0002\u04a9\u04ac\u0005\u011c\u008f\u0002\u04aa\u04ac",
    "\u0005\u00f8}\u0002\u04ab\u04a9\u0003\u0002\u0002\u0002\u04ab\u04aa",
    "\u0003\u0002\u0002\u0002\u04ac\u012d\u0003\u0002\u0002\u0002\u04ad\u04ae",
    "\u0005\u00f6|\u0002\u04ae\u04af\u0007\u000b\u0002\u0002\u04af\u04b0",
    "\u0005\u010e\u0088\u0002\u04b0\u012f\u0003\u0002\u0002\u0002\u04b1\u04b4",
    "\u0005\u0132\u009a\u0002\u04b2\u04b4\u0005\u013c\u009f\u0002\u04b3\u04b1",
    "\u0003\u0002\u0002\u0002\u04b3\u04b2\u0003\u0002\u0002\u0002\u04b4\u0131",
    "\u0003\u0002\u0002\u0002\u04b5\u04b8\u0005\u0134\u009b\u0002\u04b6\u04b8",
    "\u0005\u0136\u009c\u0002\u04b7\u04b5\u0003\u0002\u0002\u0002\u04b7\u04b6",
    "\u0003\u0002\u0002\u0002\u04b8\u0133\u0003\u0002\u0002\u0002\u04b9\u04ba",
    "\u0005\u0128\u0095\u0002\u04ba\u0135\u0003\u0002\u0002\u0002\u04bb\u04bc",
    "\u0007\b\u0002\u0002\u04bc\u04bd\u0005\u00f8}\u0002\u04bd\u04be\u0007",
    "\t\u0002\u0002\u04be\u04bf\u0007\b\u0002\u0002\u04bf\u04c4\u0005\u0138",
    "\u009d\u0002\u04c0\u04c1\u0007\n\u0002\u0002\u04c1\u04c3\u0005\u0138",
    "\u009d\u0002\u04c2\u04c0\u0003\u0002\u0002\u0002\u04c3\u04c6\u0003\u0002",
    "\u0002\u0002\u04c4\u04c2\u0003\u0002\u0002\u0002\u04c4\u04c5\u0003\u0002",
    "\u0002\u0002\u04c5\u04c7\u0003\u0002\u0002\u0002\u04c6\u04c4\u0003\u0002",
    "\u0002\u0002\u04c7\u04c8\u0007\t\u0002\u0002\u04c8\u0137\u0003\u0002",
    "\u0002\u0002\u04c9\u04ca\u0007\u0013\u0002\u0002\u04ca\u04cb\u0005\u013a",
    "\u009e\u0002\u04cb\u0139\u0003\u0002\u0002\u0002\u04cc\u04d1\u0005\u0006",
    "\u0004\u0002\u04cd\u04ce\u0007\u000b\u0002\u0002\u04ce\u04d0\u0005\u0006",
    "\u0004\u0002\u04cf\u04cd\u0003\u0002\u0002\u0002\u04d0\u04d3\u0003\u0002",
    "\u0002\u0002\u04d1\u04cf\u0003\u0002\u0002\u0002\u04d1\u04d2\u0003\u0002",
    "\u0002\u0002\u04d2\u013b\u0003\u0002\u0002\u0002\u04d3\u04d1\u0003\u0002",
    "\u0002\u0002\u04d4\u04d5\u0007X\u0002\u0002\u04d5\u04d6\u0005H%\u0002",
    "\u04d6\u013d\u0003\u0002\u0002\u0002\u04d7\u04d8\u0005\u0140\u00a1\u0002",
    "\u04d8\u013f\u0003\u0002\u0002\u0002\u04d9\u04da\u0005\u0004\u0003\u0002",
    "\u04da\u04db\u0005\u0142\u00a2\u0002\u04db\u04dc\u0007\u0003\u0002\u0002",
    "\u04dc\u04dd\u0005H%\u0002\u04dd\u0141\u0003\u0002\u0002\u0002\u04de",
    "\u04df\u0007\b\u0002\u0002\u04df\u04e4\u0005\u0144\u00a3\u0002\u04e0",
    "\u04e1\u0007\n\u0002\u0002\u04e1\u04e3\u0005\u0144\u00a3\u0002\u04e2",
    "\u04e0\u0003\u0002\u0002\u0002\u04e3\u04e6\u0003\u0002\u0002\u0002\u04e4",
    "\u04e2\u0003\u0002\u0002\u0002\u04e4\u04e5\u0003\u0002\u0002\u0002\u04e5",
    "\u04e7\u0003\u0002\u0002\u0002\u04e6\u04e4\u0003\u0002\u0002\u0002\u04e7",
    "\u04e8\u0007\t\u0002\u0002\u04e8\u0143\u0003\u0002\u0002\u0002\u04e9",
    "\u04ea\u0005\u0146\u00a4\u0002\u04ea\u04eb\u0007\u0011\u0002\u0002\u04eb",
    "\u04ec\u0005\u014a\u00a6\u0002\u04ec\u04ef\u0003\u0002\u0002\u0002\u04ed",
    "\u04ef\u0005\u014a\u00a6\u0002\u04ee\u04e9\u0003\u0002\u0002\u0002\u04ee",
    "\u04ed\u0003\u0002\u0002\u0002\u04ef\u0145\u0003\u0002\u0002\u0002\u04f0",
    "\u04f1\u0005\u0148\u00a5\u0002\u04f1\u0147\u0003\u0002\u0002\u0002\u04f2",
    "\u04f5\u0005H%\u0002\u04f3\u04f5\u0005\u00f6|\u0002\u04f4\u04f2\u0003",
    "\u0002\u0002\u0002\u04f4\u04f3\u0003\u0002\u0002\u0002\u04f5\u0149\u0003",
    "\u0002\u0002\u0002\u04f6\u04f7\u00056\u001c\u0002\u04f7\u014b\u0003",
    "\u0002\u0002\u0002\u04f8\u04f9\u00056\u001c\u0002\u04f9\u04fa\u0007",
    "\b\u0002\u0002\u04fa\u04fb\u0007\t\u0002\u0002\u04fb\u014d\u0003\u0002",
    "\u0002\u0002\u04fc\u04fd\u0005\u0150\u00a9\u0002\u04fd\u04fe\u0005\u0152",
    "\u00aa\u0002\u04fe\u014f\u0003\u0002\u0002\u0002\u04ff\u0500\u0005\u0004",
    "\u0003\u0002\u0500\u0151\u0003\u0002\u0002\u0002\u0501\u0502\u0007\b",
    "\u0002\u0002\u0502\u0507\u0005\u0154\u00ab\u0002\u0503\u0504\u0007\n",
    "\u0002\u0002\u0504\u0506\u0005\u0154\u00ab\u0002\u0505\u0503\u0003\u0002",
    "\u0002\u0002\u0506\u0509\u0003\u0002\u0002\u0002\u0507\u0505\u0003\u0002",
    "\u0002\u0002\u0507\u0508\u0003\u0002\u0002\u0002\u0508\u050a\u0003\u0002",
    "\u0002\u0002\u0509\u0507\u0003\u0002\u0002\u0002\u050a\u050b\u0007\t",
    "\u0002\u0002\u050b\u0153\u0003\u0002\u0002\u0002\u050c\u0510\u0005H",
    "%\u0002\u050d\u0510\u0005P)\u0002\u050e\u0510\u0005\u0128\u0095\u0002",
    "\u050f\u050c\u0003\u0002\u0002\u0002\u050f\u050d\u0003\u0002\u0002\u0002",
    "\u050f\u050e\u0003\u0002\u0002\u0002\u0510\u0155\u0003\u0002\u0002\u0002",
    "\u0511\u0512\u0007\u0087\u0002\u0002\u0512\u0157\u0003\u0002\u0002\u0002",
    "\u0513\u0514\u0005\u0004\u0003\u0002\u0514\u0159\u0003\u0002\u0002\u0002",
    "\u0515\u0516\u0007\u0017\u0002\u0002\u0516\u0519\u0005\u0004\u0003\u0002",
    "\u0517\u0519\u0005\u0004\u0003\u0002\u0518\u0515\u0003\u0002\u0002\u0002",
    "\u0518\u0517\u0003\u0002\u0002\u0002\u0519\u015b\u0003\u0002\u0002\u0002",
    "\u051a\u051b\u0005\u0178\u00bd\u0002\u051b\u015d\u0003\u0002\u0002\u0002",
    "\u051c\u051d\u0005\u0156\u00ac\u0002\u051d\u015f\u0003\u0002\u0002\u0002",
    "\u051e\u051f\u0005\u0158\u00ad\u0002\u051f\u0161\u0003\u0002\u0002\u0002",
    "\u0520\u0523\u0005\u0160\u00b1\u0002\u0521\u0523\u0005\u018e\u00c8\u0002",
    "\u0522\u0520\u0003\u0002\u0002\u0002\u0522\u0521\u0003\u0002\u0002\u0002",
    "\u0523\u0163\u0003\u0002\u0002\u0002\u0524\u0526\u0005(\u0015\u0002",
    "\u0525\u0524\u0003\u0002\u0002\u0002\u0525\u0526\u0003\u0002\u0002\u0002",
    "\u0526\u0527\u0003\u0002\u0002\u0002\u0527\u0528\u0005\u0166\u00b4\u0002",
    "\u0528\u0165\u0003\u0002\u0002\u0002\u0529\u052b\u0005\u0168\u00b5\u0002",
    "\u052a\u0529\u0003\u0002\u0002\u0002\u052b\u052c\u0003\u0002\u0002\u0002",
    "\u052c\u052a\u0003\u0002\u0002\u0002\u052c\u052d\u0003\u0002\u0002\u0002",
    "\u052d\u0167\u0003\u0002\u0002\u0002\u052e\u052f\u0007u\u0002\u0002",
    "\u052f\u0534\u0005\u0190\u00c9\u0002\u0530\u0531\u0007\n\u0002\u0002",
    "\u0531\u0533\u0005\u0190\u00c9\u0002\u0532\u0530\u0003\u0002\u0002\u0002",
    "\u0533\u0536\u0003\u0002\u0002\u0002\u0534\u0532\u0003\u0002\u0002\u0002",
    "\u0534\u0535\u0003\u0002\u0002\u0002\u0535\u0537\u0003\u0002\u0002\u0002",
    "\u0536\u0534\u0003\u0002\u0002\u0002\u0537\u0538\u0005\u016a\u00b6\u0002",
    "\u0538\u0169\u0003\u0002\u0002\u0002\u0539\u053a\u0007o\u0002\u0002",
    "\u053a\u053c\u0005\u016e\u00b8\u0002\u053b\u053d\u0005\u016c\u00b7\u0002",
    "\u053c\u053b\u0003\u0002\u0002\u0002\u053c\u053d\u0003\u0002\u0002\u0002",
    "\u053d\u016b\u0003\u0002\u0002\u0002\u053e\u053f\u0007t\u0002\u0002",
    "\u053f\u0540\u0007<\u0002\u0002\u0540\u0541\u0005\u0170\u00b9\u0002",
    "\u0541\u016d\u0003\u0002\u0002\u0002\u0542\u0543\u0005\u0188\u00c5\u0002",
    "\u0543\u016f\u0003\u0002\u0002\u0002\u0544\u0545\u0005\u0188\u00c5\u0002",
    "\u0545\u0171\u0003\u0002\u0002\u0002\u0546\u0548\u0005$\u0013\u0002",
    "\u0547\u0546\u0003\u0002\u0002\u0002\u0547\u0548\u0003\u0002\u0002\u0002",
    "\u0548\u054a\u0003\u0002\u0002\u0002\u0549\u054b\u0005(\u0015\u0002",
    "\u054a\u0549\u0003\u0002\u0002\u0002\u054a\u054b\u0003\u0002\u0002\u0002",
    "\u054b\u054d\u0003\u0002\u0002\u0002\u054c\u054e\u0005\u0174\u00bb\u0002",
    "\u054d\u054c\u0003\u0002\u0002\u0002\u054d\u054e\u0003\u0002\u0002\u0002",
    "\u054e\u0173\u0003\u0002\u0002\u0002\u054f\u0551\u0005\u0176\u00bc\u0002",
    "\u0550\u054f\u0003\u0002\u0002\u0002\u0551\u0552\u0003\u0002\u0002\u0002",
    "\u0552\u0550\u0003\u0002\u0002\u0002\u0552\u0553\u0003\u0002\u0002\u0002",
    "\u0553\u0175\u0003\u0002\u0002\u0002\u0554\u0557\u0005\u017c\u00bf\u0002",
    "\u0555\u0557\u0005\u0186\u00c4\u0002\u0556\u0554\u0003\u0002\u0002\u0002",
    "\u0556\u0555\u0003\u0002\u0002\u0002\u0557\u0177\u0003\u0002\u0002\u0002",
    "\u0558\u0559\u0005\u017a\u00be\u0002\u0559\u0179\u0003\u0002\u0002\u0002",
    "\u055a\u055b\u0007\u0017\u0002\u0002\u055b\u055c\u0007\u0080\u0002\u0002",
    "\u055c\u017b\u0003\u0002\u0002\u0002\u055d\u055e\u0005\u0156\u00ac\u0002",
    "\u055e\u055f\u0005\u015c\u00af\u0002\u055f\u0560\u0007\u0003\u0002\u0002",
    "\u0560\u0561\u0005\u017e\u00c0\u0002\u0561\u017d\u0003\u0002\u0002\u0002",
    "\u0562\u0565\u0005\u0180\u00c1\u0002\u0563\u0565\u0005\u0120\u0091\u0002",
    "\u0564\u0562\u0003\u0002\u0002\u0002\u0564\u0563\u0003\u0002\u0002\u0002",
    "\u0565\u017f\u0003\u0002\u0002\u0002\u0566\u0567\u0007\b\u0002\u0002",
    "\u0567\u0568\t\u0006\u0002\u0002\u0568\u0569\u0005\u0182\u00c2\u0002",
    "\u0569\u056a\u0007y\u0002\u0002\u056a\u056b\u0007s\u0002\u0002\u056b",
    "\u056c\u0007}\u0002\u0002\u056c\u056d\u0005\u0184\u00c3\u0002\u056d",
    "\u056e\u0007\t\u0002\u0002\u056e\u0181\u0003\u0002\u0002\u0002\u056f",
    "\u0570\u0005\u017e\u00c0\u0002\u0570\u0183\u0003\u0002\u0002\u0002\u0571",
    "\u0572\u0005\u017e\u00c0\u0002\u0572\u0185\u0003\u0002\u0002\u0002\u0573",
    "\u0574\u0005\u0158\u00ad\u0002\u0574\u0575\u0007\u0017\u0002\u0002\u0575",
    "\u0576\u0007|\u0002\u0002\u0576\u0577\u0007\u0003\u0002\u0002\u0577",
    "\u0579\u0005\u0188\u00c5\u0002\u0578\u057a\u0005\u016c\u00b7\u0002\u0579",
    "\u0578\u0003\u0002\u0002\u0002\u0579\u057a\u0003\u0002\u0002\u0002\u057a",
    "\u0187\u0003\u0002\u0002\u0002\u057b\u057e\u0005\u0162\u00b2\u0002\u057c",
    "\u057e\u0005\u018a\u00c6\u0002\u057d\u057b\u0003\u0002\u0002\u0002\u057d",
    "\u057c\u0003\u0002\u0002\u0002\u057e\u0189\u0003\u0002\u0002\u0002\u057f",
    "\u0580\u0007\b\u0002\u0002\u0580\u0586\u0005\u018c\u00c7\u0002\u0581",
    "\u0582\u0005\u00c2b\u0002\u0582\u0583\u0005\u018c\u00c7\u0002\u0583",
    "\u0585\u0003\u0002\u0002\u0002\u0584\u0581\u0003\u0002\u0002\u0002\u0585",
    "\u0588\u0003\u0002\u0002\u0002\u0586\u0584\u0003\u0002\u0002\u0002\u0586",
    "\u0587\u0003\u0002\u0002\u0002\u0587\u0589\u0003\u0002\u0002\u0002\u0588",
    "\u0586\u0003\u0002\u0002\u0002\u0589\u058a\u0007\t\u0002\u0002\u058a",
    "\u018b\u0003\u0002\u0002\u0002\u058b\u058c\u0005\u015e\u00b0\u0002\u058c",
    "\u018d\u0003\u0002\u0002\u0002\u058d\u058e\u0007\u007f\u0002\u0002\u058e",
    "\u018f\u0003\u0002\u0002\u0002\u058f\u0590\u0005\u015a\u00ae\u0002\u0590",
    "\u0191\u0003\u0002\u0002\u0002{\u0195\u0197\u01a4\u01a9\u01bd\u01c8",
    "\u01d9\u01dc\u01df\u01e5\u01ed\u01f6\u0203\u0208\u020c\u0211\u0219\u021c",
    "\u0221\u0225\u023b\u0249\u024d\u0256\u0260\u0267\u0272\u0276\u0282\u0288",
    "\u028d\u0298\u029d\u02a7\u02ae\u02c4\u02cd\u02d2\u02d4\u02db\u02e0\u02e4",
    "\u02e7\u02ec\u02f0\u02f8\u0300\u0303\u0305\u0314\u0319\u031e\u0325\u032a",
    "\u0335\u033d\u0349\u034c\u034e\u035a\u035f\u036a\u037a\u0380\u0386\u0389",
    "\u0393\u0399\u03a8\u03b6\u03c5\u03cb\u03d9\u03dd\u03f3\u03fa\u03fd\u040c",
    "\u042d\u0432\u043a\u043e\u0443\u0448\u044b\u0450\u0454\u045b\u0462\u0468",
    "\u046e\u0474\u0485\u048c\u0490\u04a7\u04ab\u04b3\u04b7\u04c4\u04d1\u04e4",
    "\u04ee\u04f4\u0507\u050f\u0518\u0522\u0525\u052c\u0534\u053c\u0547\u054a",
    "\u054d\u0552\u0556\u0564\u0579\u057d\u0586"].join("");
const atn = new antlr4_1.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new antlr4_1.default.dfa.DFA(ds, index));
const sharedContextCache = new antlr4_1.default.PredictionContextCache();
class grammar3rdParser extends antlr4_1.default.Parser {
    constructor(input) {
        super(input);
        this._interp = new antlr4_1.default.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = grammar3rdParser.ruleNames;
        this.literalNames = grammar3rdParser.literalNames;
        this.symbolicNames = grammar3rdParser.symbolicNames;
    }
    get atn() {
        return atn;
    }
    moduleDefinitions() {
        let localctx = new ModuleDefinitionsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 0, grammar3rdParser.RULE_moduleDefinitions);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 403;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 403;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);
                switch (la_) {
                    case 1:
                        this.state = 400;
                        this.moduleDefinition();
                        break;
                    case 2:
                        this.state = 401;
                        this.elmDefinition();
                        break;
                    case 3:
                        this.state = 402;
                        this.edmDefinition();
                        break;
                }
                this.state = 405;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)))) !== 0));
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeReference() {
        let localctx = new TypeReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 2, grammar3rdParser.RULE_typeReference);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 407;
            _la = this._input.LA(1);
            if (!(((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    identifier() {
        let localctx = new IdentifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 4, grammar3rdParser.RULE_identifier);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 409;
            this.match(grammar3rdParser.IdentifierL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    valueReference() {
        let localctx = new ValueReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 6, grammar3rdParser.RULE_valueReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 411;
            this.match(grammar3rdParser.IdentifierL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    moduleReference() {
        let localctx = new ModuleReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 8, grammar3rdParser.RULE_moduleReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 413;
            this.typeReference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    moduleDefinition() {
        let localctx = new ModuleDefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 10, grammar3rdParser.RULE_moduleDefinition);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 415;
            this.moduleIdentifier();
            this.state = 416;
            this.match(grammar3rdParser.DEFINITIONS_LITERAL);
            this.state = 418;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.AUTOMATIC_LITERAL || _la === grammar3rdParser.EXPLICIT_LITERAL || _la === grammar3rdParser.IMPLICIT_LITERAL) {
                this.state = 417;
                this.tagDefault();
            }
            this.state = 420;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 421;
            this.match(grammar3rdParser.BEGIN_LITERAL);
            this.state = 423;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.EXPORTS_LITERAL || _la === grammar3rdParser.IMPORTS_LITERAL || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)))) !== 0)) {
                this.state = 422;
                this.moduleBody();
            }
            this.state = 425;
            this.match(grammar3rdParser.END_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elmDefinition() {
        let localctx = new ElmDefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 12, grammar3rdParser.RULE_elmDefinition);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 427;
            this.moduleIdentifier();
            this.state = 428;
            this.match(grammar3rdParser.LINK_DEFINITIONS_LITERAL);
            this.state = 429;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 430;
            this.match(grammar3rdParser.BEGIN_LITERAL);
            this.state = 431;
            this.elmModuleBody();
            this.state = 432;
            this.match(grammar3rdParser.END_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    edmDefinition() {
        let localctx = new EdmDefinitionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 14, grammar3rdParser.RULE_edmDefinition);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 434;
            this.moduleIdentifier();
            this.state = 435;
            this.match(grammar3rdParser.ENCODING_DEFINITIONS_LITERAL);
            this.state = 436;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 437;
            this.match(grammar3rdParser.BEGIN_LITERAL);
            this.state = 438;
            this.edmModuleBody();
            this.state = 439;
            this.match(grammar3rdParser.END_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    moduleIdentifier() {
        let localctx = new ModuleIdentifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 16, grammar3rdParser.RULE_moduleIdentifier);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 441;
            this.moduleReference();
            this.state = 443;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.L_BRACE) {
                this.state = 442;
                this.definitiveIdentification();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definitiveIdentification() {
        let localctx = new DefinitiveIdentificationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 18, grammar3rdParser.RULE_definitiveIdentification);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 445;
            this.definitiveOid();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definitiveOid() {
        let localctx = new DefinitiveOidContext(this, this._ctx, this.state);
        this.enterRule(localctx, 20, grammar3rdParser.RULE_definitiveOid);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 447;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 448;
            this.definitiveObjIdComponentList();
            this.state = 449;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definitiveObjIdComponentList() {
        let localctx = new DefinitiveObjIdComponentListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 22, grammar3rdParser.RULE_definitiveObjIdComponentList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 452;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 451;
                this.definitiveObjIdComponent();
                this.state = 454;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === grammar3rdParser.IdentifierL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definitiveObjIdComponent() {
        let localctx = new DefinitiveObjIdComponentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 24, grammar3rdParser.RULE_definitiveObjIdComponent);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 456;
            this.definitiveNameAndNumberForm();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definitiveNameAndNumberForm() {
        let localctx = new DefinitiveNameAndNumberFormContext(this, this._ctx, this.state);
        this.enterRule(localctx, 26, grammar3rdParser.RULE_definitiveNameAndNumberForm);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 458;
            this.identifier();
            this.state = 459;
            this.match(grammar3rdParser.L_PAREN);
            this.state = 460;
            this.definitiveNumberForm();
            this.state = 461;
            this.match(grammar3rdParser.R_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definitiveNumberForm() {
        let localctx = new DefinitiveNumberFormContext(this, this._ctx, this.state);
        this.enterRule(localctx, 28, grammar3rdParser.RULE_definitiveNumberForm);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 463;
            this.match(grammar3rdParser.Number);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tagDefault() {
        let localctx = new TagDefaultContext(this, this._ctx, this.state);
        this.enterRule(localctx, 30, grammar3rdParser.RULE_tagDefault);
        try {
            this.state = 471;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.EXPLICIT_LITERAL:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 465;
                    this.match(grammar3rdParser.EXPLICIT_LITERAL);
                    this.state = 466;
                    this.match(grammar3rdParser.TAGS_LITERAL);
                    break;
                case grammar3rdParser.IMPLICIT_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 467;
                    this.match(grammar3rdParser.IMPLICIT_LITERAL);
                    this.state = 468;
                    this.match(grammar3rdParser.TAGS_LITERAL);
                    break;
                case grammar3rdParser.AUTOMATIC_LITERAL:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 469;
                    this.match(grammar3rdParser.AUTOMATIC_LITERAL);
                    this.state = 470;
                    this.match(grammar3rdParser.TAGS_LITERAL);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    moduleBody() {
        let localctx = new ModuleBodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 32, grammar3rdParser.RULE_moduleBody);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 474;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.EXPORTS_LITERAL) {
                this.state = 473;
                this.exports();
            }
            this.state = 477;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.IMPORTS_LITERAL) {
                this.state = 476;
                this.imports();
            }
            this.state = 479;
            this.assignmentList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    exports() {
        let localctx = new ExportsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 34, grammar3rdParser.RULE_exports);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 481;
            this.match(grammar3rdParser.EXPORTS_LITERAL);
            this.state = 483;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)))) !== 0)) {
                this.state = 482;
                this.symbolsExported();
            }
            this.state = 485;
            this.match(grammar3rdParser.SEMICOLON_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    symbolsExported() {
        let localctx = new SymbolsExportedContext(this, this._ctx, this.state);
        this.enterRule(localctx, 36, grammar3rdParser.RULE_symbolsExported);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 487;
            this.symbolList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    imports() {
        let localctx = new ImportsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 38, grammar3rdParser.RULE_imports);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 489;
            this.match(grammar3rdParser.IMPORTS_LITERAL);
            this.state = 491;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)))) !== 0)) {
                this.state = 490;
                this.symbolsImported();
            }
            this.state = 493;
            this.match(grammar3rdParser.SEMICOLON_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    symbolsImported() {
        let localctx = new SymbolsImportedContext(this, this._ctx, this.state);
        this.enterRule(localctx, 40, grammar3rdParser.RULE_symbolsImported);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 495;
            this.symbolsFromModuleList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    symbolsFromModuleList() {
        let localctx = new SymbolsFromModuleListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 42, grammar3rdParser.RULE_symbolsFromModuleList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 498;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 497;
                this.symbolsFromModule();
                this.state = 500;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)))) !== 0));
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    symbolsFromModule() {
        let localctx = new SymbolsFromModuleContext(this, this._ctx, this.state);
        this.enterRule(localctx, 44, grammar3rdParser.RULE_symbolsFromModule);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 502;
            this.symbolList();
            this.state = 503;
            this.match(grammar3rdParser.FROM_LITERAL);
            this.state = 504;
            this.globalModuleReference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    globalModuleReference() {
        let localctx = new GlobalModuleReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 46, grammar3rdParser.RULE_globalModuleReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 506;
            this.moduleReference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    symbolList() {
        let localctx = new SymbolListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 48, grammar3rdParser.RULE_symbolList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 508;
            this.symbol();
            this.state = 513;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 509;
                this.match(grammar3rdParser.COMMA);
                this.state = 510;
                this.symbol();
                this.state = 515;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    symbol() {
        let localctx = new SymbolContext(this, this._ctx, this.state);
        this.enterRule(localctx, 50, grammar3rdParser.RULE_symbol);
        try {
            this.state = 518;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 13, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 516;
                    this.reference();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 517;
                    this.parameterizedReference();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    reference() {
        let localctx = new ReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 52, grammar3rdParser.RULE_reference);
        try {
            this.state = 522;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 520;
                    this.typeReference();
                    break;
                case grammar3rdParser.IdentifierL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 521;
                    this.valueReference();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    assignmentList() {
        let localctx = new AssignmentListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 54, grammar3rdParser.RULE_assignmentList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 525;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 524;
                this.assignment();
                this.state = 527;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)))) !== 0));
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    assignment() {
        let localctx = new AssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 56, grammar3rdParser.RULE_assignment);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 535;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 16, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 529;
                    this.typeAssignment();
                    break;
                case 2:
                    this.state = 530;
                    this.valueAssignment();
                    break;
                case 3:
                    this.state = 531;
                    this.objectClassAssignment();
                    break;
                case 4:
                    this.state = 532;
                    this.objectAssignment();
                    break;
                case 5:
                    this.state = 533;
                    this.objectSetAssignment();
                    break;
                case 6:
                    this.state = 534;
                    this.parameterizedAssignment();
                    break;
            }
            this.state = 538;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.Tag) {
                this.state = 537;
                this.match(grammar3rdParser.Tag);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedType() {
        let localctx = new DefinedTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 58, grammar3rdParser.RULE_definedType);
        try {
            this.state = 543;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 18, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 540;
                    this.externalTypeReference();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 541;
                    this.typeReference();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 542;
                    this.parameterizedTypeAmbiguous();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedValue() {
        let localctx = new DefinedValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 60, grammar3rdParser.RULE_definedValue);
        try {
            this.state = 547;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 545;
                    this.externalValueReference();
                    break;
                case grammar3rdParser.IdentifierL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 546;
                    this.valueReference();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    externalTypeReference() {
        let localctx = new ExternalTypeReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 62, grammar3rdParser.RULE_externalTypeReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 549;
            this.moduleReference();
            this.state = 550;
            this.match(grammar3rdParser.PERIOD);
            this.state = 551;
            this.typeReference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    externalValueReference() {
        let localctx = new ExternalValueReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 64, grammar3rdParser.RULE_externalValueReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 553;
            this.moduleReference();
            this.state = 554;
            this.match(grammar3rdParser.PERIOD);
            this.state = 555;
            this.valueReference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeAssignment() {
        let localctx = new TypeAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 66, grammar3rdParser.RULE_typeAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 557;
            this.typeReference();
            this.state = 558;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 559;
            this.type();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    valueAssignment() {
        let localctx = new ValueAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 68, grammar3rdParser.RULE_valueAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 561;
            this.valueReference();
            this.state = 562;
            this.type();
            this.state = 563;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 564;
            this.value();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    type() {
        let localctx = new TypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 70, grammar3rdParser.RULE_type);
        try {
            this.state = 569;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 20, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 566;
                    this.builtinType();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 567;
                    this.referencedType();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 568;
                    this.constrainedType();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    builtinType() {
        let localctx = new BuiltinTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 72, grammar3rdParser.RULE_builtinType);
        try {
            this.state = 583;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 21, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 571;
                    this.bitStringType();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 572;
                    this.booleanType();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 573;
                    this.characterStringType();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 574;
                    this.choiceType();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 575;
                    this.enumeratedType();
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 576;
                    this.integerType();
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 577;
                    this.nullType();
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 578;
                    this.objectClassFieldType();
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    this.state = 579;
                    this.objectIdentifierType();
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    this.state = 580;
                    this.octetStringType();
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    this.state = 581;
                    this.sequenceType();
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    this.state = 582;
                    this.sequenceOfType();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    referencedType() {
        let localctx = new ReferencedTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 74, grammar3rdParser.RULE_referencedType);
        try {
            this.state = 587;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 585;
                    this.definedType();
                    break;
                case grammar3rdParser.UTCTime_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 586;
                    this.usefulType();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namedType() {
        let localctx = new NamedTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 76, grammar3rdParser.RULE_namedType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 589;
            this.identifier();
            this.state = 590;
            this.type();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    value() {
        let localctx = new ValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 78, grammar3rdParser.RULE_value);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 592;
            this.builtinValue();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    builtinValue() {
        let localctx = new BuiltinValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 80, grammar3rdParser.RULE_builtinValue);
        try {
            this.state = 596;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.Bstring:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 594;
                    this.bitStringValue();
                    break;
                case grammar3rdParser.HYPHEN_MINUS:
                case grammar3rdParser.IdentifierL:
                case grammar3rdParser.Number:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 595;
                    this.integerValue();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    booleanType() {
        let localctx = new BooleanTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 82, grammar3rdParser.RULE_booleanType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 598;
            this.match(grammar3rdParser.BOOLEAN_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    integerType() {
        let localctx = new IntegerTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 84, grammar3rdParser.RULE_integerType);
        try {
            this.state = 606;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 24, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 600;
                    this.match(grammar3rdParser.INTEGER_LITERAL);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 601;
                    this.match(grammar3rdParser.INTEGER_LITERAL);
                    this.state = 602;
                    this.match(grammar3rdParser.L_BRACE);
                    this.state = 603;
                    this.namedNumberList();
                    this.state = 604;
                    this.match(grammar3rdParser.R_BRACE);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namedNumberList() {
        let localctx = new NamedNumberListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 86, grammar3rdParser.RULE_namedNumberList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 608;
            this.namedNumber();
            this.state = 613;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 609;
                this.match(grammar3rdParser.COMMA);
                this.state = 610;
                this.namedNumber();
                this.state = 615;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namedNumber() {
        let localctx = new NamedNumberContext(this, this._ctx, this.state);
        this.enterRule(localctx, 88, grammar3rdParser.RULE_namedNumber);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 616;
            this.identifier();
            this.state = 617;
            this.match(grammar3rdParser.L_PAREN);
            this.state = 618;
            this.signedNumber();
            this.state = 619;
            this.match(grammar3rdParser.R_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    signedNumber() {
        let localctx = new SignedNumberContext(this, this._ctx, this.state);
        this.enterRule(localctx, 90, grammar3rdParser.RULE_signedNumber);
        try {
            this.state = 624;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.Number:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 621;
                    this.match(grammar3rdParser.Number);
                    break;
                case grammar3rdParser.HYPHEN_MINUS:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 622;
                    this.match(grammar3rdParser.HYPHEN_MINUS);
                    this.state = 623;
                    this.match(grammar3rdParser.Number);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    integerValue() {
        let localctx = new IntegerValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 92, grammar3rdParser.RULE_integerValue);
        try {
            this.state = 628;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.HYPHEN_MINUS:
                case grammar3rdParser.Number:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 626;
                    this.signedNumber();
                    break;
                case grammar3rdParser.IdentifierL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 627;
                    this.valueReference();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enumeratedType() {
        let localctx = new EnumeratedTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 94, grammar3rdParser.RULE_enumeratedType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 630;
            this.match(grammar3rdParser.ENUMERATED_LITERAL);
            this.state = 631;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 632;
            this.enumerations();
            this.state = 633;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enumerations() {
        let localctx = new EnumerationsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 96, grammar3rdParser.RULE_enumerations);
        var _la = 0; // Token type
        try {
            this.state = 651;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 30, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 635;
                    this.rootEnumeration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 636;
                    this.rootEnumeration();
                    this.state = 637;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 638;
                    this.match(grammar3rdParser.ELLIPSIS);
                    this.state = 640;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.EXCLAM) {
                        this.state = 639;
                        this.exceptionSpec();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 642;
                    this.rootEnumeration();
                    this.state = 643;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 644;
                    this.match(grammar3rdParser.ELLIPSIS);
                    this.state = 646;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.EXCLAM) {
                        this.state = 645;
                        this.exceptionSpec();
                    }
                    this.state = 648;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 649;
                    this.additionalEnumeration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    rootEnumeration() {
        let localctx = new RootEnumerationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 98, grammar3rdParser.RULE_rootEnumeration);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 653;
            this.enumeration();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    additionalEnumeration() {
        let localctx = new AdditionalEnumerationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 100, grammar3rdParser.RULE_additionalEnumeration);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 655;
            this.enumeration();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enumeration() {
        let localctx = new EnumerationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 102, grammar3rdParser.RULE_enumeration);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 657;
            this.enumerationItem();
            this.state = 662;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 31, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 658;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 659;
                    this.enumerationItem();
                }
                this.state = 664;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 31, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enumerationItem() {
        let localctx = new EnumerationItemContext(this, this._ctx, this.state);
        this.enterRule(localctx, 104, grammar3rdParser.RULE_enumerationItem);
        try {
            this.state = 667;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 32, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 665;
                    this.identifier();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 666;
                    this.namedNumber();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    bitStringType() {
        let localctx = new BitStringTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 106, grammar3rdParser.RULE_bitStringType);
        try {
            this.state = 677;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 33, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 669;
                    this.match(grammar3rdParser.BIT_LITERAL);
                    this.state = 670;
                    this.match(grammar3rdParser.STRING_LITERAL);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 671;
                    this.match(grammar3rdParser.BIT_LITERAL);
                    this.state = 672;
                    this.match(grammar3rdParser.STRING_LITERAL);
                    this.state = 673;
                    this.match(grammar3rdParser.L_BRACE);
                    this.state = 674;
                    this.namedBitList();
                    this.state = 675;
                    this.match(grammar3rdParser.R_BRACE);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namedBitList() {
        let localctx = new NamedBitListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 108, grammar3rdParser.RULE_namedBitList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 679;
            this.namedBit();
            this.state = 684;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 680;
                this.match(grammar3rdParser.COMMA);
                this.state = 681;
                this.namedBit();
                this.state = 686;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namedBit() {
        let localctx = new NamedBitContext(this, this._ctx, this.state);
        this.enterRule(localctx, 110, grammar3rdParser.RULE_namedBit);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 687;
            this.identifier();
            this.state = 688;
            this.match(grammar3rdParser.L_PAREN);
            this.state = 689;
            this.match(grammar3rdParser.Number);
            this.state = 690;
            this.match(grammar3rdParser.R_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    bitStringValue() {
        let localctx = new BitStringValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 112, grammar3rdParser.RULE_bitStringValue);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 692;
            this.match(grammar3rdParser.Bstring);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    octetStringType() {
        let localctx = new OctetStringTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 114, grammar3rdParser.RULE_octetStringType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 694;
            this.match(grammar3rdParser.OCTET_LITERAL);
            this.state = 695;
            this.match(grammar3rdParser.STRING_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    nullType() {
        let localctx = new NullTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 116, grammar3rdParser.RULE_nullType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 697;
            this.match(grammar3rdParser.NULL_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    sequenceType() {
        let localctx = new SequenceTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 118, grammar3rdParser.RULE_sequenceType);
        var _la = 0; // Token type
        try {
            this.state = 715;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 36, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 699;
                    this.match(grammar3rdParser.SEQUENCE_LITERAL);
                    this.state = 700;
                    this.match(grammar3rdParser.L_BRACE);
                    this.state = 701;
                    this.match(grammar3rdParser.R_BRACE);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 702;
                    this.match(grammar3rdParser.SEQUENCE_LITERAL);
                    this.state = 703;
                    this.match(grammar3rdParser.L_BRACE);
                    this.state = 704;
                    this.extensionAndException();
                    this.state = 706;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.COMMA) {
                        this.state = 705;
                        this.optionalExtensionMarker();
                    }
                    this.state = 708;
                    this.match(grammar3rdParser.R_BRACE);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 710;
                    this.match(grammar3rdParser.SEQUENCE_LITERAL);
                    this.state = 711;
                    this.match(grammar3rdParser.L_BRACE);
                    this.state = 712;
                    this.componentTypeLists();
                    this.state = 713;
                    this.match(grammar3rdParser.R_BRACE);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAndException() {
        let localctx = new ExtensionAndExceptionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 120, grammar3rdParser.RULE_extensionAndException);
        var _la = 0; // Token type
        try {
            this.state = 722;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 38, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 717;
                    this.match(grammar3rdParser.ELLIPSIS);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 718;
                    this.match(grammar3rdParser.ELLIPSIS);
                    this.state = 720;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.EXCLAM) {
                        this.state = 719;
                        this.exceptionSpec();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    optionalExtensionMarker() {
        let localctx = new OptionalExtensionMarkerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 122, grammar3rdParser.RULE_optionalExtensionMarker);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 724;
            this.match(grammar3rdParser.COMMA);
            this.state = 725;
            this.match(grammar3rdParser.ELLIPSIS);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    componentTypeLists() {
        let localctx = new ComponentTypeListsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 124, grammar3rdParser.RULE_componentTypeLists);
        var _la = 0; // Token type
        try {
            this.state = 771;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 48, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 727;
                    this.rootComponentTypeList();
                    this.state = 729;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.Tag) {
                        this.state = 728;
                        this.match(grammar3rdParser.Tag);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 731;
                    this.rootComponentTypeList();
                    this.state = 732;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 734;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.Tag) {
                        this.state = 733;
                        this.match(grammar3rdParser.Tag);
                    }
                    this.state = 736;
                    this.extensionAndException();
                    this.state = 738;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 41, this._ctx);
                    if (la_ === 1) {
                        this.state = 737;
                        this.extensionAdditions();
                    }
                    this.state = 741;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.COMMA) {
                        this.state = 740;
                        this.optionalExtensionMarker();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 743;
                    this.rootComponentTypeList();
                    this.state = 744;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 746;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.Tag) {
                        this.state = 745;
                        this.match(grammar3rdParser.Tag);
                    }
                    this.state = 748;
                    this.extensionAndException();
                    this.state = 750;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 44, this._ctx);
                    if (la_ === 1) {
                        this.state = 749;
                        this.extensionAdditions();
                    }
                    this.state = 752;
                    this.extensionEndMarker();
                    this.state = 753;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 754;
                    this.rootComponentTypeList();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 756;
                    this.extensionAndException();
                    this.state = 758;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 45, this._ctx);
                    if (la_ === 1) {
                        this.state = 757;
                        this.extensionAdditions();
                    }
                    this.state = 760;
                    this.extensionEndMarker();
                    this.state = 761;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 762;
                    this.rootComponentTypeList();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 764;
                    this.extensionAndException();
                    this.state = 766;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 46, this._ctx);
                    if (la_ === 1) {
                        this.state = 765;
                        this.extensionAdditions();
                    }
                    this.state = 769;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.COMMA) {
                        this.state = 768;
                        this.optionalExtensionMarker();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    rootComponentTypeList() {
        let localctx = new RootComponentTypeListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 126, grammar3rdParser.RULE_rootComponentTypeList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 773;
            this.componentTypeList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionEndMarker() {
        let localctx = new ExtensionEndMarkerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 128, grammar3rdParser.RULE_extensionEndMarker);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 775;
            this.match(grammar3rdParser.COMMA);
            this.state = 776;
            this.match(grammar3rdParser.ELLIPSIS);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAdditions() {
        let localctx = new ExtensionAdditionsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 130, grammar3rdParser.RULE_extensionAdditions);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 778;
            this.match(grammar3rdParser.COMMA);
            this.state = 779;
            this.extensionAdditionList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAdditionList() {
        let localctx = new ExtensionAdditionListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 132, grammar3rdParser.RULE_extensionAdditionList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 781;
            this.extensionAddition();
            this.state = 786;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 49, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 782;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 783;
                    this.extensionAddition();
                }
                this.state = 788;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 49, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAddition() {
        let localctx = new ExtensionAdditionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 134, grammar3rdParser.RULE_extensionAddition);
        try {
            this.state = 791;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.IdentifierL:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 789;
                    this.componentType();
                    break;
                case grammar3rdParser.L_VERSION_BRACKET:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 790;
                    this.extensionAdditionGroup();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAdditionGroup() {
        let localctx = new ExtensionAdditionGroupContext(this, this._ctx, this.state);
        this.enterRule(localctx, 136, grammar3rdParser.RULE_extensionAdditionGroup);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 793;
            this.match(grammar3rdParser.L_VERSION_BRACKET);
            this.state = 794;
            this.componentTypeList();
            this.state = 796;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.Tag) {
                this.state = 795;
                this.match(grammar3rdParser.Tag);
            }
            this.state = 798;
            this.match(grammar3rdParser.R_VERSION_BRACKET);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    componentTypeList() {
        let localctx = new ComponentTypeListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 138, grammar3rdParser.RULE_componentTypeList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 800;
            this.componentType();
            this.state = 808;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 53, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 801;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 803;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.Tag) {
                        this.state = 802;
                        this.match(grammar3rdParser.Tag);
                    }
                    this.state = 805;
                    this.componentType();
                }
                this.state = 810;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 53, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    componentType() {
        let localctx = new ComponentTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 140, grammar3rdParser.RULE_componentType);
        try {
            this.state = 819;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 54, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 811;
                    this.namedType();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 812;
                    this.namedType();
                    this.state = 813;
                    this.match(grammar3rdParser.OPTIONAL_LITERAL);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 815;
                    this.namedType();
                    this.state = 816;
                    this.match(grammar3rdParser.DEFAULT_LITERAL);
                    this.state = 817;
                    this.value();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    sequenceOfType() {
        let localctx = new SequenceOfTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 142, grammar3rdParser.RULE_sequenceOfType);
        try {
            this.state = 827;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 55, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 821;
                    this.match(grammar3rdParser.SEQUENCE_LITERAL);
                    this.state = 822;
                    this.match(grammar3rdParser.OF_LITERAL);
                    this.state = 823;
                    this.type();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 824;
                    this.match(grammar3rdParser.SEQUENCE_LITERAL);
                    this.state = 825;
                    this.match(grammar3rdParser.OF_LITERAL);
                    this.state = 826;
                    this.namedType();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    choiceType() {
        let localctx = new ChoiceTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 144, grammar3rdParser.RULE_choiceType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 829;
            this.match(grammar3rdParser.CHOICE_LITERAL);
            this.state = 830;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 831;
            this.alternativeTypeLists();
            this.state = 832;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    alternativeTypeLists() {
        let localctx = new AlternativeTypeListsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 146, grammar3rdParser.RULE_alternativeTypeLists);
        var _la = 0; // Token type
        try {
            this.state = 844;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 58, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 834;
                    this.rootAlternativeTypeList();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 835;
                    this.rootAlternativeTypeList();
                    this.state = 836;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 837;
                    this.extensionAndException();
                    this.state = 839;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 56, this._ctx);
                    if (la_ === 1) {
                        this.state = 838;
                        this.extensionAdditionAlternatives();
                    }
                    this.state = 842;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === grammar3rdParser.COMMA) {
                        this.state = 841;
                        this.optionalExtensionMarker();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    rootAlternativeTypeList() {
        let localctx = new RootAlternativeTypeListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 148, grammar3rdParser.RULE_rootAlternativeTypeList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 846;
            this.alternativeTypeList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAdditionAlternatives() {
        let localctx = new ExtensionAdditionAlternativesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 150, grammar3rdParser.RULE_extensionAdditionAlternatives);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 848;
            this.match(grammar3rdParser.COMMA);
            this.state = 849;
            this.extensionAdditionAlternativesList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAdditionAlternativesList() {
        let localctx = new ExtensionAdditionAlternativesListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 152, grammar3rdParser.RULE_extensionAdditionAlternativesList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 851;
            this.extensionAdditionAlternative();
            this.state = 856;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 59, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 852;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 853;
                    this.extensionAdditionAlternative();
                }
                this.state = 858;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 59, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAdditionAlternative() {
        let localctx = new ExtensionAdditionAlternativeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 154, grammar3rdParser.RULE_extensionAdditionAlternative);
        try {
            this.state = 861;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.L_VERSION_BRACKET:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 859;
                    this.extensionAdditionAlternativesGroup();
                    break;
                case grammar3rdParser.IdentifierL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 860;
                    this.namedType();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extensionAdditionAlternativesGroup() {
        let localctx = new ExtensionAdditionAlternativesGroupContext(this, this._ctx, this.state);
        this.enterRule(localctx, 156, grammar3rdParser.RULE_extensionAdditionAlternativesGroup);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 863;
            this.match(grammar3rdParser.L_VERSION_BRACKET);
            this.state = 864;
            this.alternativeTypeList();
            this.state = 865;
            this.match(grammar3rdParser.R_VERSION_BRACKET);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    alternativeTypeList() {
        let localctx = new AlternativeTypeListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 158, grammar3rdParser.RULE_alternativeTypeList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 867;
            this.namedType();
            this.state = 872;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 61, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 868;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 869;
                    this.namedType();
                }
                this.state = 874;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 61, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectIdentifierType() {
        let localctx = new ObjectIdentifierTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 160, grammar3rdParser.RULE_objectIdentifierType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 875;
            this.match(grammar3rdParser.OBJECT_LITERAL);
            this.state = 876;
            this.match(grammar3rdParser.IDENTIFIER_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    characterStringType() {
        let localctx = new CharacterStringTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 162, grammar3rdParser.RULE_characterStringType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 878;
            this.restrictedCharacterStringType();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    restrictedCharacterStringType() {
        let localctx = new RestrictedCharacterStringTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 164, grammar3rdParser.RULE_restrictedCharacterStringType);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 880;
            _la = this._input.LA(1);
            if (!(((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (grammar3rdParser.PrintableString_LITERAL - 96)) | (1 << (grammar3rdParser.UTF8String_LITERAL - 96)) | (1 << (grammar3rdParser.VisibleString_LITERAL - 96)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    usefulType() {
        let localctx = new UsefulTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 166, grammar3rdParser.RULE_usefulType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 882;
            this.match(grammar3rdParser.UTCTime_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constrainedType() {
        let localctx = new ConstrainedTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 168, grammar3rdParser.RULE_constrainedType);
        try {
            this.state = 903;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 65, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 884;
                    this.builtinType();
                    this.state = 886;
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                this.state = 885;
                                this.constraint();
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 888;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 62, this._ctx);
                    } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 890;
                    this.referencedType();
                    this.state = 892;
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                this.state = 891;
                                this.constraint();
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 894;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 63, this._ctx);
                    } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 896;
                    this.typeWithConstraint();
                    this.state = 900;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 64, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 897;
                            this.constraint();
                        }
                        this.state = 902;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 64, this._ctx);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeWithConstraint() {
        let localctx = new TypeWithConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 170, grammar3rdParser.RULE_typeWithConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 905;
            this.match(grammar3rdParser.SEQUENCE_LITERAL);
            this.state = 906;
            this.constraint();
            this.state = 907;
            this.match(grammar3rdParser.OF_LITERAL);
            this.state = 908;
            this.type();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constraint() {
        let localctx = new ConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 172, grammar3rdParser.RULE_constraint);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 910;
            this.match(grammar3rdParser.L_PAREN);
            this.state = 911;
            this.constraintSpec();
            this.state = 913;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.EXCLAM) {
                this.state = 912;
                this.exceptionSpec();
            }
            this.state = 915;
            this.match(grammar3rdParser.R_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constraintSpec() {
        let localctx = new ConstraintSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 174, grammar3rdParser.RULE_constraintSpec);
        try {
            this.state = 919;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 67, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 917;
                    this.subtypeConstraint();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 918;
                    this.generalConstraint();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    subtypeConstraint() {
        let localctx = new SubtypeConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 176, grammar3rdParser.RULE_subtypeConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 921;
            this.elementSetSpecs();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elementSetSpecs() {
        let localctx = new ElementSetSpecsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 178, grammar3rdParser.RULE_elementSetSpecs);
        try {
            this.state = 934;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 68, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 923;
                    this.rootElementSetSpec();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 924;
                    this.rootElementSetSpec();
                    this.state = 925;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 926;
                    this.match(grammar3rdParser.ELLIPSIS);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 928;
                    this.rootElementSetSpec();
                    this.state = 929;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 930;
                    this.match(grammar3rdParser.ELLIPSIS);
                    this.state = 931;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 932;
                    this.additionalElementSetSpec();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    rootElementSetSpec() {
        let localctx = new RootElementSetSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 180, grammar3rdParser.RULE_rootElementSetSpec);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 936;
            this.elementSetSpec();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    additionalElementSetSpec() {
        let localctx = new AdditionalElementSetSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 182, grammar3rdParser.RULE_additionalElementSetSpec);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 938;
            this.elementSetSpec();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elementSetSpec() {
        let localctx = new ElementSetSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 184, grammar3rdParser.RULE_elementSetSpec);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 940;
            this.unions();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    unions() {
        let localctx = new UnionsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 186, grammar3rdParser.RULE_unions);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 942;
            this.intersections();
            this.state = 948;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.PIPE) {
                this.state = 943;
                this.unionMark();
                this.state = 944;
                this.intersections();
                this.state = 950;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    intersections() {
        let localctx = new IntersectionsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 188, grammar3rdParser.RULE_intersections);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 951;
            this.intersectionElements();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    intersectionElements() {
        let localctx = new IntersectionElementsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 190, grammar3rdParser.RULE_intersectionElements);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 953;
            this.elements();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    unionMark() {
        let localctx = new UnionMarkContext(this, this._ctx, this.state);
        this.enterRule(localctx, 192, grammar3rdParser.RULE_unionMark);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 955;
            this.match(grammar3rdParser.PIPE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elements() {
        let localctx = new ElementsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 194, grammar3rdParser.RULE_elements);
        try {
            this.state = 963;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.HYPHEN_MINUS:
                case grammar3rdParser.MIN_LITERAL:
                case grammar3rdParser.SIZE_LITERAL:
                case grammar3rdParser.WITH_LITERAL:
                case grammar3rdParser.IdentifierL:
                case grammar3rdParser.Number:
                case grammar3rdParser.Bstring:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 957;
                    this.subtypeElements();
                    break;
                case grammar3rdParser.L_BRACE:
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 958;
                    this.objectSetElements();
                    break;
                case grammar3rdParser.L_PAREN:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 959;
                    this.match(grammar3rdParser.L_PAREN);
                    this.state = 960;
                    this.elementSetSpec();
                    this.state = 961;
                    this.match(grammar3rdParser.R_PAREN);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    subtypeElements() {
        let localctx = new SubtypeElementsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 196, grammar3rdParser.RULE_subtypeElements);
        try {
            this.state = 969;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 71, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 965;
                    this.singleValue();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 966;
                    this.valueRange();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 967;
                    this.sizeConstraint();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 968;
                    this.innerTypeConstraints();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    singleValue() {
        let localctx = new SingleValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 198, grammar3rdParser.RULE_singleValue);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 971;
            this.value();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    valueRange() {
        let localctx = new ValueRangeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 200, grammar3rdParser.RULE_valueRange);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 973;
            this.lowerEndpoint();
            this.state = 974;
            this.match(grammar3rdParser.RANGE_SEPARATOR);
            this.state = 975;
            this.upperEndpoint();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lowerEndpoint() {
        let localctx = new LowerEndpointContext(this, this._ctx, this.state);
        this.enterRule(localctx, 202, grammar3rdParser.RULE_lowerEndpoint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 977;
            this.lowerEndValue();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    upperEndpoint() {
        let localctx = new UpperEndpointContext(this, this._ctx, this.state);
        this.enterRule(localctx, 204, grammar3rdParser.RULE_upperEndpoint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 979;
            this.upperEndValue();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lowerEndValue() {
        let localctx = new LowerEndValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 206, grammar3rdParser.RULE_lowerEndValue);
        try {
            this.state = 983;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.HYPHEN_MINUS:
                case grammar3rdParser.IdentifierL:
                case grammar3rdParser.Number:
                case grammar3rdParser.Bstring:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 981;
                    this.value();
                    break;
                case grammar3rdParser.MIN_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 982;
                    this.match(grammar3rdParser.MIN_LITERAL);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    upperEndValue() {
        let localctx = new UpperEndValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 208, grammar3rdParser.RULE_upperEndValue);
        try {
            this.state = 987;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.HYPHEN_MINUS:
                case grammar3rdParser.IdentifierL:
                case grammar3rdParser.Number:
                case grammar3rdParser.Bstring:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 985;
                    this.value();
                    break;
                case grammar3rdParser.MAX_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 986;
                    this.match(grammar3rdParser.MAX_LITERAL);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    sizeConstraint() {
        let localctx = new SizeConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 210, grammar3rdParser.RULE_sizeConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 989;
            this.match(grammar3rdParser.SIZE_LITERAL);
            this.state = 990;
            this.constraint();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    innerTypeConstraints() {
        let localctx = new InnerTypeConstraintsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 212, grammar3rdParser.RULE_innerTypeConstraints);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 992;
            this.match(grammar3rdParser.WITH_LITERAL);
            this.state = 993;
            this.match(grammar3rdParser.COMPONENTS_LITERAL);
            this.state = 994;
            this.multipleTypeConstraints();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    multipleTypeConstraints() {
        let localctx = new MultipleTypeConstraintsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 214, grammar3rdParser.RULE_multipleTypeConstraints);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 996;
            this.partialSpecification();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    partialSpecification() {
        let localctx = new PartialSpecificationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 216, grammar3rdParser.RULE_partialSpecification);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 998;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 999;
            this.match(grammar3rdParser.ELLIPSIS);
            this.state = 1000;
            this.match(grammar3rdParser.COMMA);
            this.state = 1001;
            this.typeConstraints();
            this.state = 1002;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeConstraints() {
        let localctx = new TypeConstraintsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 218, grammar3rdParser.RULE_typeConstraints);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1004;
            this.namedConstraint();
            this.state = 1009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 1005;
                this.match(grammar3rdParser.COMMA);
                this.state = 1006;
                this.namedConstraint();
                this.state = 1011;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namedConstraint() {
        let localctx = new NamedConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 220, grammar3rdParser.RULE_namedConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1012;
            this.identifier();
            this.state = 1013;
            this.componentConstraint();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    componentConstraint() {
        let localctx = new ComponentConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 222, grammar3rdParser.RULE_componentConstraint);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1016;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.L_PAREN) {
                this.state = 1015;
                this.valueConstraint();
            }
            this.state = 1019;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.ABSENT_LITERAL || _la === grammar3rdParser.OPTIONAL_LITERAL || _la === grammar3rdParser.PRESENT_LITERAL) {
                this.state = 1018;
                this.presenceConstraint();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    valueConstraint() {
        let localctx = new ValueConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 224, grammar3rdParser.RULE_valueConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1021;
            this.constraint();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    presenceConstraint() {
        let localctx = new PresenceConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 226, grammar3rdParser.RULE_presenceConstraint);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1023;
            _la = this._input.LA(1);
            if (!(_la === grammar3rdParser.ABSENT_LITERAL || _la === grammar3rdParser.OPTIONAL_LITERAL || _la === grammar3rdParser.PRESENT_LITERAL)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    exceptionSpec() {
        let localctx = new ExceptionSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 228, grammar3rdParser.RULE_exceptionSpec);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1025;
            this.match(grammar3rdParser.EXCLAM);
            this.state = 1026;
            this.exceptionIdentification();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    exceptionIdentification() {
        let localctx = new ExceptionIdentificationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 230, grammar3rdParser.RULE_exceptionIdentification);
        try {
            this.state = 1034;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 77, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1028;
                    this.signedNumber();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1029;
                    this.definedValue();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1030;
                    this.type();
                    this.state = 1031;
                    this.match(grammar3rdParser.COLON);
                    this.state = 1032;
                    this.value();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectClassReference() {
        let localctx = new ObjectClassReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 232, grammar3rdParser.RULE_objectClassReference);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1036;
            _la = this._input.LA(1);
            if (!(_la === grammar3rdParser.Word || _la === grammar3rdParser.ObjectClassReference)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectSetReference() {
        let localctx = new ObjectSetReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 234, grammar3rdParser.RULE_objectSetReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1038;
            this.typeReference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectReference() {
        let localctx = new ObjectReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 236, grammar3rdParser.RULE_objectReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1040;
            this.match(grammar3rdParser.IdentifierL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    valueFieldReference() {
        let localctx = new ValueFieldReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 238, grammar3rdParser.RULE_valueFieldReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1042;
            this.match(grammar3rdParser.AMP);
            this.state = 1043;
            this.match(grammar3rdParser.IdentifierL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    word() {
        let localctx = new WordContext(this, this._ctx, this.state);
        this.enterRule(localctx, 240, grammar3rdParser.RULE_word);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1045;
            this.match(grammar3rdParser.Word);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeFieldReference() {
        let localctx = new TypeFieldReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 242, grammar3rdParser.RULE_typeFieldReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1047;
            this.match(grammar3rdParser.AMP);
            this.state = 1048;
            this.typeReference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedObjectClass() {
        let localctx = new DefinedObjectClassContext(this, this._ctx, this.state);
        this.enterRule(localctx, 244, grammar3rdParser.RULE_definedObjectClass);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1050;
            this.objectClassReference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedObjectSet() {
        let localctx = new DefinedObjectSetContext(this, this._ctx, this.state);
        this.enterRule(localctx, 246, grammar3rdParser.RULE_definedObjectSet);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1052;
            this.objectSetReference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectClassAssignment() {
        let localctx = new ObjectClassAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 248, grammar3rdParser.RULE_objectClassAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1054;
            this.objectClassReference();
            this.state = 1055;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 1056;
            this.objectClass();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectClass() {
        let localctx = new ObjectClassContext(this, this._ctx, this.state);
        this.enterRule(localctx, 250, grammar3rdParser.RULE_objectClass);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1058;
            this.objectClassDefn();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectClassDefn() {
        let localctx = new ObjectClassDefnContext(this, this._ctx, this.state);
        this.enterRule(localctx, 252, grammar3rdParser.RULE_objectClassDefn);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1060;
            this.match(grammar3rdParser.CLASS_LITERAL);
            this.state = 1061;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1062;
            this.fieldSpec();
            this.state = 1067;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 1063;
                this.match(grammar3rdParser.COMMA);
                this.state = 1064;
                this.fieldSpec();
                this.state = 1069;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1070;
            this.match(grammar3rdParser.R_BRACE);
            this.state = 1072;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.WITH_LITERAL) {
                this.state = 1071;
                this.withSyntaxSpec();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    withSyntaxSpec() {
        let localctx = new WithSyntaxSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 254, grammar3rdParser.RULE_withSyntaxSpec);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1074;
            this.match(grammar3rdParser.WITH_LITERAL);
            this.state = 1075;
            this.match(grammar3rdParser.SYNTAX_LITERAL);
            this.state = 1076;
            this.syntaxList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fieldSpec() {
        let localctx = new FieldSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 256, grammar3rdParser.RULE_fieldSpec);
        try {
            this.state = 1080;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 80, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1078;
                    this.typeFieldSpec();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1079;
                    this.fixedTypeValueFieldSpec();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeFieldSpec() {
        let localctx = new TypeFieldSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 258, grammar3rdParser.RULE_typeFieldSpec);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1082;
            this.typeFieldReference();
            this.state = 1084;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.OPTIONAL_LITERAL || _la === grammar3rdParser.DEFAULT_LITERAL) {
                this.state = 1083;
                this.typeOptionalitySpec();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeOptionalitySpec() {
        let localctx = new TypeOptionalitySpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 260, grammar3rdParser.RULE_typeOptionalitySpec);
        try {
            this.state = 1089;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.OPTIONAL_LITERAL:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1086;
                    this.match(grammar3rdParser.OPTIONAL_LITERAL);
                    break;
                case grammar3rdParser.DEFAULT_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1087;
                    this.match(grammar3rdParser.DEFAULT_LITERAL);
                    this.state = 1088;
                    this.type();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fixedTypeValueFieldSpec() {
        let localctx = new FixedTypeValueFieldSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 262, grammar3rdParser.RULE_fixedTypeValueFieldSpec);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1091;
            this.valueFieldReference();
            this.state = 1092;
            this.type();
            this.state = 1094;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.UNIQUE_LITERAL) {
                this.state = 1093;
                this.match(grammar3rdParser.UNIQUE_LITERAL);
            }
            this.state = 1097;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.OPTIONAL_LITERAL || _la === grammar3rdParser.DEFAULT_LITERAL) {
                this.state = 1096;
                this.valueOptionalitySpec();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    valueOptionalitySpec() {
        let localctx = new ValueOptionalitySpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 264, grammar3rdParser.RULE_valueOptionalitySpec);
        try {
            this.state = 1102;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.OPTIONAL_LITERAL:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1099;
                    this.match(grammar3rdParser.OPTIONAL_LITERAL);
                    break;
                case grammar3rdParser.DEFAULT_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1100;
                    this.match(grammar3rdParser.DEFAULT_LITERAL);
                    this.state = 1101;
                    this.value();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    primitiveFieldName() {
        let localctx = new PrimitiveFieldNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 266, grammar3rdParser.RULE_primitiveFieldName);
        try {
            this.state = 1106;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 86, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1104;
                    this.typeFieldReference();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1105;
                    this.valueFieldReference();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fieldName() {
        let localctx = new FieldNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 268, grammar3rdParser.RULE_fieldName);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1108;
            this.primitiveFieldName();
            this.state = 1113;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.PERIOD) {
                this.state = 1109;
                this.match(grammar3rdParser.PERIOD);
                this.state = 1110;
                this.primitiveFieldName();
                this.state = 1115;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    syntaxList() {
        let localctx = new SyntaxListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 270, grammar3rdParser.RULE_syntaxList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1116;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1118;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1117;
                this.tokenOrGroupSpec();
                this.state = 1120;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === grammar3rdParser.L_BRACKET || _la === grammar3rdParser.AMP || _la === grammar3rdParser.Word);
            this.state = 1122;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tokenOrGroupSpec() {
        let localctx = new TokenOrGroupSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 272, grammar3rdParser.RULE_tokenOrGroupSpec);
        try {
            this.state = 1126;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.AMP:
                case grammar3rdParser.Word:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1124;
                    this.requiredToken();
                    break;
                case grammar3rdParser.L_BRACKET:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1125;
                    this.optionalGroup();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    optionalGroup() {
        let localctx = new OptionalGroupContext(this, this._ctx, this.state);
        this.enterRule(localctx, 274, grammar3rdParser.RULE_optionalGroup);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1128;
            this.match(grammar3rdParser.L_BRACKET);
            this.state = 1130;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1129;
                this.tokenOrGroupSpec();
                this.state = 1132;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === grammar3rdParser.L_BRACKET || _la === grammar3rdParser.AMP || _la === grammar3rdParser.Word);
            this.state = 1134;
            this.match(grammar3rdParser.R_BRACKET);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    requiredToken() {
        let localctx = new RequiredTokenContext(this, this._ctx, this.state);
        this.enterRule(localctx, 276, grammar3rdParser.RULE_requiredToken);
        try {
            this.state = 1138;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.Word:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1136;
                    this.literal();
                    break;
                case grammar3rdParser.AMP:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1137;
                    this.primitiveFieldName();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    literal() {
        let localctx = new LiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 278, grammar3rdParser.RULE_literal);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1140;
            this.word();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectAssignment() {
        let localctx = new ObjectAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 280, grammar3rdParser.RULE_objectAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1142;
            this.objectReference();
            this.state = 1143;
            this.definedObjectClass();
            this.state = 1144;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 1145;
            this.object();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    object() {
        let localctx = new ObjectContext(this, this._ctx, this.state);
        this.enterRule(localctx, 282, grammar3rdParser.RULE_object);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1147;
            this.objectDefn();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectDefn() {
        let localctx = new ObjectDefnContext(this, this._ctx, this.state);
        this.enterRule(localctx, 284, grammar3rdParser.RULE_objectDefn);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1149;
            this.definedSyntax();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedSyntax() {
        let localctx = new DefinedSyntaxContext(this, this._ctx, this.state);
        this.enterRule(localctx, 286, grammar3rdParser.RULE_definedSyntax);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1151;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1155;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.HYPHEN_MINUS || _la === grammar3rdParser.SEQUENCE_LITERAL || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (grammar3rdParser.ENUMERATED_LITERAL - 35)) | (1 << (grammar3rdParser.BIT_LITERAL - 35)) | (1 << (grammar3rdParser.NULL_LITERAL - 35)) | (1 << (grammar3rdParser.BOOLEAN_LITERAL - 35)) | (1 << (grammar3rdParser.OBJECT_LITERAL - 35)) | (1 << (grammar3rdParser.OCTET_LITERAL - 35)) | (1 << (grammar3rdParser.CHOICE_LITERAL - 35)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (grammar3rdParser.UTCTime_LITERAL - 93)) | (1 << (grammar3rdParser.PrintableString_LITERAL - 93)) | (1 << (grammar3rdParser.UTF8String_LITERAL - 93)) | (1 << (grammar3rdParser.VisibleString_LITERAL - 93)) | (1 << (grammar3rdParser.INTEGER_LITERAL - 93)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)) | (1 << (grammar3rdParser.Number - 130)) | (1 << (grammar3rdParser.Bstring - 130)))) !== 0)) {
                this.state = 1152;
                this.definedSyntaxToken();
                this.state = 1157;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1158;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedSyntaxToken() {
        let localctx = new DefinedSyntaxTokenContext(this, this._ctx, this.state);
        this.enterRule(localctx, 288, grammar3rdParser.RULE_definedSyntaxToken);
        try {
            this.state = 1162;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 93, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1160;
                    this.literal();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1161;
                    this.setting();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    setting() {
        let localctx = new SettingContext(this, this._ctx, this.state);
        this.enterRule(localctx, 290, grammar3rdParser.RULE_setting);
        try {
            this.state = 1166;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.SEQUENCE_LITERAL:
                case grammar3rdParser.ENUMERATED_LITERAL:
                case grammar3rdParser.BIT_LITERAL:
                case grammar3rdParser.NULL_LITERAL:
                case grammar3rdParser.BOOLEAN_LITERAL:
                case grammar3rdParser.OBJECT_LITERAL:
                case grammar3rdParser.OCTET_LITERAL:
                case grammar3rdParser.CHOICE_LITERAL:
                case grammar3rdParser.UTCTime_LITERAL:
                case grammar3rdParser.PrintableString_LITERAL:
                case grammar3rdParser.UTF8String_LITERAL:
                case grammar3rdParser.VisibleString_LITERAL:
                case grammar3rdParser.INTEGER_LITERAL:
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1164;
                    this.type();
                    break;
                case grammar3rdParser.HYPHEN_MINUS:
                case grammar3rdParser.IdentifierL:
                case grammar3rdParser.Number:
                case grammar3rdParser.Bstring:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1165;
                    this.value();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectSetAssignment() {
        let localctx = new ObjectSetAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 292, grammar3rdParser.RULE_objectSetAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1168;
            this.objectSetReference();
            this.state = 1169;
            this.definedObjectClass();
            this.state = 1170;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 1171;
            this.objectSet();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectSet() {
        let localctx = new ObjectSetContext(this, this._ctx, this.state);
        this.enterRule(localctx, 294, grammar3rdParser.RULE_objectSet);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1173;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1174;
            this.objectSetSpec();
            this.state = 1175;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectSetSpec() {
        let localctx = new ObjectSetSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 296, grammar3rdParser.RULE_objectSetSpec);
        try {
            this.state = 1189;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 95, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1177;
                    this.rootElementSetSpec();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1178;
                    this.rootElementSetSpec();
                    this.state = 1179;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 1180;
                    this.match(grammar3rdParser.ELLIPSIS);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1182;
                    this.match(grammar3rdParser.ELLIPSIS);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1183;
                    this.rootElementSetSpec();
                    this.state = 1184;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 1185;
                    this.match(grammar3rdParser.ELLIPSIS);
                    this.state = 1186;
                    this.match(grammar3rdParser.COMMA);
                    this.state = 1187;
                    this.additionalElementSetSpec();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectSetElements() {
        let localctx = new ObjectSetElementsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 298, grammar3rdParser.RULE_objectSetElements);
        try {
            this.state = 1193;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.L_BRACE:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1191;
                    this.object();
                    break;
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1192;
                    this.definedObjectSet();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectClassFieldType() {
        let localctx = new ObjectClassFieldTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 300, grammar3rdParser.RULE_objectClassFieldType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1195;
            this.definedObjectClass();
            this.state = 1196;
            this.match(grammar3rdParser.PERIOD);
            this.state = 1197;
            this.fieldName();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    generalConstraint() {
        let localctx = new GeneralConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 302, grammar3rdParser.RULE_generalConstraint);
        try {
            this.state = 1201;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.L_BRACE:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1199;
                    this.tableConstraint();
                    break;
                case grammar3rdParser.CONTAINING_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1200;
                    this.contentsConstraint();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tableConstraint() {
        let localctx = new TableConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 304, grammar3rdParser.RULE_tableConstraint);
        try {
            this.state = 1205;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 98, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1203;
                    this.simpleTableConstraint();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1204;
                    this.componentRelationConstraint();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    simpleTableConstraint() {
        let localctx = new SimpleTableConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 306, grammar3rdParser.RULE_simpleTableConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1207;
            this.objectSet();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    componentRelationConstraint() {
        let localctx = new ComponentRelationConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 308, grammar3rdParser.RULE_componentRelationConstraint);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1209;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1210;
            this.definedObjectSet();
            this.state = 1211;
            this.match(grammar3rdParser.R_BRACE);
            this.state = 1212;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1213;
            this.atNotation();
            this.state = 1218;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 1214;
                this.match(grammar3rdParser.COMMA);
                this.state = 1215;
                this.atNotation();
                this.state = 1220;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1221;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    atNotation() {
        let localctx = new AtNotationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 310, grammar3rdParser.RULE_atNotation);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1223;
            this.match(grammar3rdParser.AT);
            this.state = 1224;
            this.componentIdList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    componentIdList() {
        let localctx = new ComponentIdListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 312, grammar3rdParser.RULE_componentIdList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1226;
            this.identifier();
            this.state = 1231;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.PERIOD) {
                this.state = 1227;
                this.match(grammar3rdParser.PERIOD);
                this.state = 1228;
                this.identifier();
                this.state = 1233;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    contentsConstraint() {
        let localctx = new ContentsConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 314, grammar3rdParser.RULE_contentsConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1234;
            this.match(grammar3rdParser.CONTAINING_LITERAL);
            this.state = 1235;
            this.type();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterizedAssignment() {
        let localctx = new ParameterizedAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 316, grammar3rdParser.RULE_parameterizedAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1237;
            this.parameterizedTypeAssignment();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterizedTypeAssignment() {
        let localctx = new ParameterizedTypeAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 318, grammar3rdParser.RULE_parameterizedTypeAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1239;
            this.typeReference();
            this.state = 1240;
            this.parameterList();
            this.state = 1241;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 1242;
            this.type();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterList() {
        let localctx = new ParameterListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 320, grammar3rdParser.RULE_parameterList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1244;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1245;
            this.parameter();
            this.state = 1250;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 1246;
                this.match(grammar3rdParser.COMMA);
                this.state = 1247;
                this.parameter();
                this.state = 1252;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1253;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameter() {
        let localctx = new ParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 322, grammar3rdParser.RULE_parameter);
        try {
            this.state = 1260;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 102, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1255;
                    this.paramGovernor();
                    this.state = 1256;
                    this.match(grammar3rdParser.COLON);
                    this.state = 1257;
                    this.dummyReference();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1259;
                    this.dummyReference();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    paramGovernor() {
        let localctx = new ParamGovernorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 324, grammar3rdParser.RULE_paramGovernor);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1262;
            this.governor();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    governor() {
        let localctx = new GovernorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 326, grammar3rdParser.RULE_governor);
        try {
            this.state = 1266;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 103, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1264;
                    this.type();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1265;
                    this.definedObjectClass();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    dummyReference() {
        let localctx = new DummyReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 328, grammar3rdParser.RULE_dummyReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1268;
            this.reference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterizedReference() {
        let localctx = new ParameterizedReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 330, grammar3rdParser.RULE_parameterizedReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1270;
            this.reference();
            this.state = 1271;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1272;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterizedTypeAmbiguous() {
        let localctx = new ParameterizedTypeAmbiguousContext(this, this._ctx, this.state);
        this.enterRule(localctx, 332, grammar3rdParser.RULE_parameterizedTypeAmbiguous);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1274;
            this.simpleDefinedType();
            this.state = 1275;
            this.actualParameterList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    simpleDefinedType() {
        let localctx = new SimpleDefinedTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 334, grammar3rdParser.RULE_simpleDefinedType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1277;
            this.typeReference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    actualParameterList() {
        let localctx = new ActualParameterListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 336, grammar3rdParser.RULE_actualParameterList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1279;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1280;
            this.actualParameter();
            this.state = 1285;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 1281;
                this.match(grammar3rdParser.COMMA);
                this.state = 1282;
                this.actualParameter();
                this.state = 1287;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1288;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    actualParameter() {
        let localctx = new ActualParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 338, grammar3rdParser.RULE_actualParameter);
        try {
            this.state = 1293;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.SEQUENCE_LITERAL:
                case grammar3rdParser.ENUMERATED_LITERAL:
                case grammar3rdParser.BIT_LITERAL:
                case grammar3rdParser.NULL_LITERAL:
                case grammar3rdParser.BOOLEAN_LITERAL:
                case grammar3rdParser.OBJECT_LITERAL:
                case grammar3rdParser.OCTET_LITERAL:
                case grammar3rdParser.CHOICE_LITERAL:
                case grammar3rdParser.UTCTime_LITERAL:
                case grammar3rdParser.PrintableString_LITERAL:
                case grammar3rdParser.UTF8String_LITERAL:
                case grammar3rdParser.VisibleString_LITERAL:
                case grammar3rdParser.INTEGER_LITERAL:
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1290;
                    this.type();
                    break;
                case grammar3rdParser.HYPHEN_MINUS:
                case grammar3rdParser.IdentifierL:
                case grammar3rdParser.Number:
                case grammar3rdParser.Bstring:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1291;
                    this.value();
                    break;
                case grammar3rdParser.L_BRACE:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1292;
                    this.objectSet();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObjectReference() {
        let localctx = new EncodingObjectReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 340, grammar3rdParser.RULE_encodingObjectReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1295;
            this.match(grammar3rdParser.IdentifierL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObjectSetReference() {
        let localctx = new EncodingObjectSetReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 342, grammar3rdParser.RULE_encodingObjectSetReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1297;
            this.typeReference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingClassReferenceVariant() {
        let localctx = new EncodingClassReferenceVariantContext(this, this._ctx, this.state);
        this.enterRule(localctx, 344, grammar3rdParser.RULE_encodingClassReferenceVariant);
        try {
            this.state = 1302;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.NUMBER_SIGN:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1299;
                    this.match(grammar3rdParser.NUMBER_SIGN);
                    this.state = 1300;
                    this.typeReference();
                    break;
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1301;
                    this.typeReference();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedOrBuiltinEncodingClass() {
        let localctx = new DefinedOrBuiltinEncodingClassContext(this, this._ctx, this.state);
        this.enterRule(localctx, 346, grammar3rdParser.RULE_definedOrBuiltinEncodingClass);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1304;
            this.builtinEncodingClassReference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedEncodingObject() {
        let localctx = new DefinedEncodingObjectContext(this, this._ctx, this.state);
        this.enterRule(localctx, 348, grammar3rdParser.RULE_definedEncodingObject);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1306;
            this.encodingObjectReference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedEncodingObjectSet() {
        let localctx = new DefinedEncodingObjectSetContext(this, this._ctx, this.state);
        this.enterRule(localctx, 350, grammar3rdParser.RULE_definedEncodingObjectSet);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1308;
            this.encodingObjectSetReference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    definedOrBuiltinEncodingObjectSet() {
        let localctx = new DefinedOrBuiltinEncodingObjectSetContext(this, this._ctx, this.state);
        this.enterRule(localctx, 352, grammar3rdParser.RULE_definedOrBuiltinEncodingObjectSet);
        try {
            this.state = 1312;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1310;
                    this.definedEncodingObjectSet();
                    break;
                case grammar3rdParser.PER_BASIC_UNALIGNED_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1311;
                    this.builtinEncodingObjectSetReference();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elmModuleBody() {
        let localctx = new ElmModuleBodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 354, grammar3rdParser.RULE_elmModuleBody);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1315;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.IMPORTS_LITERAL) {
                this.state = 1314;
                this.imports();
            }
            this.state = 1317;
            this.encodingApplicationList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingApplicationList() {
        let localctx = new EncodingApplicationListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 356, grammar3rdParser.RULE_encodingApplicationList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1320;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1319;
                this.encodingApplication();
                this.state = 1322;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === grammar3rdParser.ENCODE_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingApplication() {
        let localctx = new EncodingApplicationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 358, grammar3rdParser.RULE_encodingApplication);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1324;
            this.match(grammar3rdParser.ENCODE_LITERAL);
            this.state = 1325;
            this.simpleDefinedEncodingClass();
            this.state = 1330;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.COMMA) {
                this.state = 1326;
                this.match(grammar3rdParser.COMMA);
                this.state = 1327;
                this.simpleDefinedEncodingClass();
                this.state = 1332;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1333;
            this.combinedEncodings();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    combinedEncodings() {
        let localctx = new CombinedEncodingsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 360, grammar3rdParser.RULE_combinedEncodings);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1335;
            this.match(grammar3rdParser.WITH_LITERAL);
            this.state = 1336;
            this.primaryEncodings();
            this.state = 1338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.COMPLETED_LITERAL) {
                this.state = 1337;
                this.completionClause();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    completionClause() {
        let localctx = new CompletionClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 362, grammar3rdParser.RULE_completionClause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1340;
            this.match(grammar3rdParser.COMPLETED_LITERAL);
            this.state = 1341;
            this.match(grammar3rdParser.BY_LITERAL);
            this.state = 1342;
            this.secondaryEncodings();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    primaryEncodings() {
        let localctx = new PrimaryEncodingsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 364, grammar3rdParser.RULE_primaryEncodings);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1344;
            this.encodingObjectSet();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    secondaryEncodings() {
        let localctx = new SecondaryEncodingsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 366, grammar3rdParser.RULE_secondaryEncodings);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1346;
            this.encodingObjectSet();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    edmModuleBody() {
        let localctx = new EdmModuleBodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 368, grammar3rdParser.RULE_edmModuleBody);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.EXPORTS_LITERAL) {
                this.state = 1348;
                this.exports();
            }
            this.state = 1352;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.IMPORTS_LITERAL) {
                this.state = 1351;
                this.imports();
            }
            this.state = 1355;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)))) !== 0)) {
                this.state = 1354;
                this.edmAssignmentList();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    edmAssignmentList() {
        let localctx = new EdmAssignmentListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 370, grammar3rdParser.RULE_edmAssignmentList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1357;
                this.edmAssignment();
                this.state = 1360;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (grammar3rdParser.Word - 130)) | (1 << (grammar3rdParser.ObjectClassReference - 130)) | (1 << (grammar3rdParser.TypeReference - 130)) | (1 << (grammar3rdParser.IdentifierL - 130)))) !== 0));
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    edmAssignment() {
        let localctx = new EdmAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 372, grammar3rdParser.RULE_edmAssignment);
        try {
            this.state = 1364;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.IdentifierL:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1362;
                    this.encodingObjectAssignment();
                    break;
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1363;
                    this.encodingObjectSetAssignment();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    builtinEncodingClassReference() {
        let localctx = new BuiltinEncodingClassReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 374, grammar3rdParser.RULE_builtinEncodingClassReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1366;
            this.encodingProcedureClassReference();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingProcedureClassReference() {
        let localctx = new EncodingProcedureClassReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 376, grammar3rdParser.RULE_encodingProcedureClassReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1368;
            this.match(grammar3rdParser.NUMBER_SIGN);
            this.state = 1369;
            this.match(grammar3rdParser.OUTER_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObjectAssignment() {
        let localctx = new EncodingObjectAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 378, grammar3rdParser.RULE_encodingObjectAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1371;
            this.encodingObjectReference();
            this.state = 1372;
            this.definedOrBuiltinEncodingClass();
            this.state = 1373;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 1374;
            this.encodingObject();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObject() {
        let localctx = new EncodingObjectContext(this, this._ctx, this.state);
        this.enterRule(localctx, 380, grammar3rdParser.RULE_encodingObject);
        try {
            this.state = 1378;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 117, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1376;
                    this.differentialEncodeDecodeObjectVariant();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1377;
                    this.definedSyntax();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    differentialEncodeDecodeObjectVariant() {
        let localctx = new DifferentialEncodeDecodeObjectVariantContext(this, this._ctx, this.state);
        this.enterRule(localctx, 382, grammar3rdParser.RULE_differentialEncodeDecodeObjectVariant);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1380;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1381;
            _la = this._input.LA(1);
            if (!(_la === grammar3rdParser.ENCODE_DECODE_LITERAL || _la === grammar3rdParser.ENCODER_DECODER_LITERAL)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1382;
            this.specForEncoding();
            this.state = 1383;
            this.match(grammar3rdParser.DECODE_LITERAL);
            this.state = 1384;
            this.match(grammar3rdParser.AS_LITERAL);
            this.state = 1385;
            this.match(grammar3rdParser.IF_LITERAL);
            this.state = 1386;
            this.specForDecoders();
            this.state = 1387;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    specForEncoding() {
        let localctx = new SpecForEncodingContext(this, this._ctx, this.state);
        this.enterRule(localctx, 384, grammar3rdParser.RULE_specForEncoding);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1389;
            this.encodingObject();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    specForDecoders() {
        let localctx = new SpecForDecodersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 386, grammar3rdParser.RULE_specForDecoders);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1391;
            this.encodingObject();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObjectSetAssignment() {
        let localctx = new EncodingObjectSetAssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 388, grammar3rdParser.RULE_encodingObjectSetAssignment);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1393;
            this.encodingObjectSetReference();
            this.state = 1394;
            this.match(grammar3rdParser.NUMBER_SIGN);
            this.state = 1395;
            this.match(grammar3rdParser.ENCODINGS_LITERAL);
            this.state = 1396;
            this.match(grammar3rdParser.ASSIGNMENT);
            this.state = 1397;
            this.encodingObjectSet();
            this.state = 1399;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === grammar3rdParser.COMPLETED_LITERAL) {
                this.state = 1398;
                this.completionClause();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObjectSet() {
        let localctx = new EncodingObjectSetContext(this, this._ctx, this.state);
        this.enterRule(localctx, 390, grammar3rdParser.RULE_encodingObjectSet);
        try {
            this.state = 1403;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case grammar3rdParser.PER_BASIC_UNALIGNED_LITERAL:
                case grammar3rdParser.Word:
                case grammar3rdParser.ObjectClassReference:
                case grammar3rdParser.TypeReference:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1401;
                    this.definedOrBuiltinEncodingObjectSet();
                    break;
                case grammar3rdParser.L_BRACE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1402;
                    this.encodingObjectSetSpec();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObjectSetSpec() {
        let localctx = new EncodingObjectSetSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 392, grammar3rdParser.RULE_encodingObjectSetSpec);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1405;
            this.match(grammar3rdParser.L_BRACE);
            this.state = 1406;
            this.encodingObjects();
            this.state = 1412;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === grammar3rdParser.PIPE) {
                this.state = 1407;
                this.unionMark();
                this.state = 1408;
                this.encodingObjects();
                this.state = 1414;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1415;
            this.match(grammar3rdParser.R_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    encodingObjects() {
        let localctx = new EncodingObjectsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 394, grammar3rdParser.RULE_encodingObjects);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1417;
            this.definedEncodingObject();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    builtinEncodingObjectSetReference() {
        let localctx = new BuiltinEncodingObjectSetReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 396, grammar3rdParser.RULE_builtinEncodingObjectSetReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1419;
            this.match(grammar3rdParser.PER_BASIC_UNALIGNED_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    simpleDefinedEncodingClass() {
        let localctx = new SimpleDefinedEncodingClassContext(this, this._ctx, this.state);
        this.enterRule(localctx, 398, grammar3rdParser.RULE_simpleDefinedEncodingClass);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1421;
            this.encodingClassReferenceVariant();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
}
exports.default = grammar3rdParser;
grammar3rdParser.grammarFileName = "grammar3rd.g4";
grammar3rdParser.literalNames = [null, "'::='", "'...'", "'..'", "'[['", "']]'",
    "'{'", "'}'", "','", "'.'", "'('", "')'", "'['",
    "']'", "'-'", "':'", "';'", "'@'", "'|'", "'!'",
    "'&'", "'#'", "'ABSENT'", "'ENCODED'", "'INTERSECTION'",
    "'SEQUENCE'", "'ABSTRACT-SYNTAX'", "'ENCODING-CONTROL'",
    "'ISO646String'", "'SET'", "'ALL'", "'END'",
    "'MAX'", "'SETTINGS'", "'APPLICATION'", "'ENUMERATED'",
    "'MIN'", "'SIZE'", "'AUTOMATIC'", "'EXCEPT'",
    "'MINUS-INFINITY'", "'STRING'", "'BEGIN'", "'EXPLICIT'",
    "'NOT-A-NUMBER'", "'SYNTAX'", "'BIT'", "'EXPORTS'",
    "'NULL'", "'T61String'", "'BMPString'", "'EXTENSIBILITY'",
    "'NumericString'", "'TAGS'", "'BOOLEAN'", "'EXTERNAL'",
    "'OBJECT'", "'TeletexString'", "'BY'", "'FALSE'",
    "'ObjectDescriptor'", "'TIME'", "'CHARACTER'",
    "'FROM'", "'OCTET'", "'TIME-OF-DAY'", "'CHOICE'",
    "'GeneralizedTime'", "'OF'", "'TRUE'", "'CLASS'",
    "'GeneralString'", "'OID-IRI'", "'TYPE-IDENTIFIER'",
    "'COMPONENT'", "'GraphicString'", "'OPTIONAL'",
    "'UNION'", "'COMPONENTS'", "'IA5String'", "'PATTERN'",
    "'UNIQUE'", "'CONSTRAINED'", "'IDENTIFIER'",
    "'PDV'", "'UNIVERSAL'", "'CONTAINING'", "'IMPLICIT'",
    "'PLUS-INFINITY'", "'UniversalString'", "'DATE'",
    "'IMPLIED'", "'PRESENT'", "'UTCTime'", "'DATE-TIME'",
    "'IMPORTS'", "'PrintableString'", "'UTF8String'",
    "'DEFAULT'", "'INCLUDES'", "'PRIVATE'", "'VideotexString'",
    "'DEFINITIONS'", "'INSTANCE'", "'REAL'", "'VisibleString'",
    "'DURATION'", "'INSTRUCTIONS'", "'RELATIVE-OID'",
    "'WITH'", "'EMBEDDED'", "'INTEGER'", "'RELATIVE-OID-IRI'",
    "'AS'", "'COMPLETED'", "'ENCODE'", "'ENCODE-DECODE'",
    "'ENCODER'", "'ENCODER-DECODER'", "'DECODE'",
    "'DECODER'", "'ENCODING-DEFINITIONS'", "'ENCODINGS'",
    "'IF'", "'LINK-DEFINITIONS'", "'PER-BASIC-UNALIGNED'",
    "'OUTER'"];
grammar3rdParser.symbolicNames = [null, "ASSIGNMENT", "ELLIPSIS", "RANGE_SEPARATOR",
    "L_VERSION_BRACKET", "R_VERSION_BRACKET", "L_BRACE",
    "R_BRACE", "COMMA", "PERIOD", "L_PAREN", "R_PAREN",
    "L_BRACKET", "R_BRACKET", "HYPHEN_MINUS", "COLON",
    "SEMICOLON_LITERAL", "AT", "PIPE", "EXCLAM",
    "AMP", "NUMBER_SIGN", "ABSENT_LITERAL", "ENCODED_LITERAL",
    "INTERSECTION_LITERAL", "SEQUENCE_LITERAL",
    "ABSTRACT_SYNTAX_LITERAL", "ENCODING_CONTROL_LITERAL",
    "ISO646String_LITERAL", "SET_LITERAL", "ALL_LITERAL",
    "END_LITERAL", "MAX_LITERAL", "SETTINGS_LITERAL",
    "APPLICATION_LITERAL", "ENUMERATED_LITERAL",
    "MIN_LITERAL", "SIZE_LITERAL", "AUTOMATIC_LITERAL",
    "EXCEPT_LITERAL", "MINUS_INFINITY_LITERAL",
    "STRING_LITERAL", "BEGIN_LITERAL", "EXPLICIT_LITERAL",
    "NOT_A_NUMBER_LITERAL", "SYNTAX_LITERAL", "BIT_LITERAL",
    "EXPORTS_LITERAL", "NULL_LITERAL", "T61String_LITERAL",
    "BMPString_LITERAL", "EXTENSIBILITY_LITERAL",
    "NumericString_LITERAL", "TAGS_LITERAL", "BOOLEAN_LITERAL",
    "EXTERNAL_LITERAL", "OBJECT_LITERAL", "TeletexString_LITERAL",
    "BY_LITERAL", "FALSE_LITERAL", "ObjectDescriptor_LITERAL",
    "TIME_LITERAL", "CHARACTER_LITERAL", "FROM_LITERAL",
    "OCTET_LITERAL", "TIME_OF_DAY_LITERAL", "CHOICE_LITERAL",
    "GeneralizedTime_LITERAL", "OF_LITERAL", "TRUE_LITERAL",
    "CLASS_LITERAL", "GeneralString_LITERAL", "OID_IRI_LITERAL",
    "TYPE_IDENTIFIER_LITERAL", "COMPONENT_LITERAL",
    "GraphicString_LITERAL", "OPTIONAL_LITERAL",
    "UNION_LITERAL", "COMPONENTS_LITERAL", "IA5String_LITERAL",
    "PATTERN_LITERAL", "UNIQUE_LITERAL", "CONSTRAINED_LITERAL",
    "IDENTIFIER_LITERAL", "PDV_LITERAL", "UNIVERSAL_LITERAL",
    "CONTAINING_LITERAL", "IMPLICIT_LITERAL", "PLUS_INFINITY_LITERAL",
    "UniversalString_LITERAL", "DATE_LITERAL",
    "IMPLIED_LITERAL", "PRESENT_LITERAL", "UTCTime_LITERAL",
    "DATE_TIME_LITERAL", "IMPORTS_LITERAL", "PrintableString_LITERAL",
    "UTF8String_LITERAL", "DEFAULT_LITERAL", "INCLUDES_LITERAL",
    "PRIVATE_LITERAL", "VideotexString_LITERAL",
    "DEFINITIONS_LITERAL", "INSTANCE_LITERAL",
    "REAL_LITERAL", "VisibleString_LITERAL", "DURATION_LITERAL",
    "INSTRUCTIONS_LITERAL", "RELATIVE_OID_LITERAL",
    "WITH_LITERAL", "EMBEDDED_LITERAL", "INTEGER_LITERAL",
    "RELATIVE_OID_IRI_LITERAL", "AS_LITERAL", "COMPLETED_LITERAL",
    "ENCODE_LITERAL", "ENCODE_DECODE_LITERAL",
    "ENCODER_LITERAL", "ENCODER_DECODER_LITERAL",
    "DECODE_LITERAL", "DECODER_LITERAL", "ENCODING_DEFINITIONS_LITERAL",
    "ENCODINGS_LITERAL", "IF_LITERAL", "LINK_DEFINITIONS_LITERAL",
    "PER_BASIC_UNALIGNED_LITERAL", "OUTER_LITERAL",
    "WS", "Tag", "Comment", "Word", "ObjectClassReference",
    "TypeReference", "IdentifierL", "Number", "Bstring"];
grammar3rdParser.ruleNames = ["moduleDefinitions", "typeReference", "identifier",
    "valueReference", "moduleReference", "moduleDefinition",
    "elmDefinition", "edmDefinition", "moduleIdentifier",
    "definitiveIdentification", "definitiveOid", "definitiveObjIdComponentList",
    "definitiveObjIdComponent", "definitiveNameAndNumberForm",
    "definitiveNumberForm", "tagDefault", "moduleBody",
    "exports", "symbolsExported", "imports", "symbolsImported",
    "symbolsFromModuleList", "symbolsFromModule", "globalModuleReference",
    "symbolList", "symbol", "reference", "assignmentList",
    "assignment", "definedType", "definedValue", "externalTypeReference",
    "externalValueReference", "typeAssignment", "valueAssignment",
    "type", "builtinType", "referencedType", "namedType",
    "value", "builtinValue", "booleanType", "integerType",
    "namedNumberList", "namedNumber", "signedNumber",
    "integerValue", "enumeratedType", "enumerations",
    "rootEnumeration", "additionalEnumeration", "enumeration",
    "enumerationItem", "bitStringType", "namedBitList",
    "namedBit", "bitStringValue", "octetStringType",
    "nullType", "sequenceType", "extensionAndException",
    "optionalExtensionMarker", "componentTypeLists",
    "rootComponentTypeList", "extensionEndMarker",
    "extensionAdditions", "extensionAdditionList",
    "extensionAddition", "extensionAdditionGroup",
    "componentTypeList", "componentType", "sequenceOfType",
    "choiceType", "alternativeTypeLists", "rootAlternativeTypeList",
    "extensionAdditionAlternatives", "extensionAdditionAlternativesList",
    "extensionAdditionAlternative", "extensionAdditionAlternativesGroup",
    "alternativeTypeList", "objectIdentifierType",
    "characterStringType", "restrictedCharacterStringType",
    "usefulType", "constrainedType", "typeWithConstraint",
    "constraint", "constraintSpec", "subtypeConstraint",
    "elementSetSpecs", "rootElementSetSpec", "additionalElementSetSpec",
    "elementSetSpec", "unions", "intersections", "intersectionElements",
    "unionMark", "elements", "subtypeElements", "singleValue",
    "valueRange", "lowerEndpoint", "upperEndpoint",
    "lowerEndValue", "upperEndValue", "sizeConstraint",
    "innerTypeConstraints", "multipleTypeConstraints",
    "partialSpecification", "typeConstraints", "namedConstraint",
    "componentConstraint", "valueConstraint", "presenceConstraint",
    "exceptionSpec", "exceptionIdentification", "objectClassReference",
    "objectSetReference", "objectReference", "valueFieldReference",
    "word", "typeFieldReference", "definedObjectClass",
    "definedObjectSet", "objectClassAssignment", "objectClass",
    "objectClassDefn", "withSyntaxSpec", "fieldSpec",
    "typeFieldSpec", "typeOptionalitySpec", "fixedTypeValueFieldSpec",
    "valueOptionalitySpec", "primitiveFieldName", "fieldName",
    "syntaxList", "tokenOrGroupSpec", "optionalGroup",
    "requiredToken", "literal", "objectAssignment",
    "object", "objectDefn", "definedSyntax", "definedSyntaxToken",
    "setting", "objectSetAssignment", "objectSet",
    "objectSetSpec", "objectSetElements", "objectClassFieldType",
    "generalConstraint", "tableConstraint", "simpleTableConstraint",
    "componentRelationConstraint", "atNotation", "componentIdList",
    "contentsConstraint", "parameterizedAssignment",
    "parameterizedTypeAssignment", "parameterList",
    "parameter", "paramGovernor", "governor", "dummyReference",
    "parameterizedReference", "parameterizedTypeAmbiguous",
    "simpleDefinedType", "actualParameterList", "actualParameter",
    "encodingObjectReference", "encodingObjectSetReference",
    "encodingClassReferenceVariant", "definedOrBuiltinEncodingClass",
    "definedEncodingObject", "definedEncodingObjectSet",
    "definedOrBuiltinEncodingObjectSet", "elmModuleBody",
    "encodingApplicationList", "encodingApplication",
    "combinedEncodings", "completionClause", "primaryEncodings",
    "secondaryEncodings", "edmModuleBody", "edmAssignmentList",
    "edmAssignment", "builtinEncodingClassReference",
    "encodingProcedureClassReference", "encodingObjectAssignment",
    "encodingObject", "differentialEncodeDecodeObjectVariant",
    "specForEncoding", "specForDecoders", "encodingObjectSetAssignment",
    "encodingObjectSet", "encodingObjectSetSpec", "encodingObjects",
    "builtinEncodingObjectSetReference", "simpleDefinedEncodingClass"];
grammar3rdParser.EOF = antlr4_1.default.Token.EOF;
grammar3rdParser.ASSIGNMENT = 1;
grammar3rdParser.ELLIPSIS = 2;
grammar3rdParser.RANGE_SEPARATOR = 3;
grammar3rdParser.L_VERSION_BRACKET = 4;
grammar3rdParser.R_VERSION_BRACKET = 5;
grammar3rdParser.L_BRACE = 6;
grammar3rdParser.R_BRACE = 7;
grammar3rdParser.COMMA = 8;
grammar3rdParser.PERIOD = 9;
grammar3rdParser.L_PAREN = 10;
grammar3rdParser.R_PAREN = 11;
grammar3rdParser.L_BRACKET = 12;
grammar3rdParser.R_BRACKET = 13;
grammar3rdParser.HYPHEN_MINUS = 14;
grammar3rdParser.COLON = 15;
grammar3rdParser.SEMICOLON_LITERAL = 16;
grammar3rdParser.AT = 17;
grammar3rdParser.PIPE = 18;
grammar3rdParser.EXCLAM = 19;
grammar3rdParser.AMP = 20;
grammar3rdParser.NUMBER_SIGN = 21;
grammar3rdParser.ABSENT_LITERAL = 22;
grammar3rdParser.ENCODED_LITERAL = 23;
grammar3rdParser.INTERSECTION_LITERAL = 24;
grammar3rdParser.SEQUENCE_LITERAL = 25;
grammar3rdParser.ABSTRACT_SYNTAX_LITERAL = 26;
grammar3rdParser.ENCODING_CONTROL_LITERAL = 27;
grammar3rdParser.ISO646String_LITERAL = 28;
grammar3rdParser.SET_LITERAL = 29;
grammar3rdParser.ALL_LITERAL = 30;
grammar3rdParser.END_LITERAL = 31;
grammar3rdParser.MAX_LITERAL = 32;
grammar3rdParser.SETTINGS_LITERAL = 33;
grammar3rdParser.APPLICATION_LITERAL = 34;
grammar3rdParser.ENUMERATED_LITERAL = 35;
grammar3rdParser.MIN_LITERAL = 36;
grammar3rdParser.SIZE_LITERAL = 37;
grammar3rdParser.AUTOMATIC_LITERAL = 38;
grammar3rdParser.EXCEPT_LITERAL = 39;
grammar3rdParser.MINUS_INFINITY_LITERAL = 40;
grammar3rdParser.STRING_LITERAL = 41;
grammar3rdParser.BEGIN_LITERAL = 42;
grammar3rdParser.EXPLICIT_LITERAL = 43;
grammar3rdParser.NOT_A_NUMBER_LITERAL = 44;
grammar3rdParser.SYNTAX_LITERAL = 45;
grammar3rdParser.BIT_LITERAL = 46;
grammar3rdParser.EXPORTS_LITERAL = 47;
grammar3rdParser.NULL_LITERAL = 48;
grammar3rdParser.T61String_LITERAL = 49;
grammar3rdParser.BMPString_LITERAL = 50;
grammar3rdParser.EXTENSIBILITY_LITERAL = 51;
grammar3rdParser.NumericString_LITERAL = 52;
grammar3rdParser.TAGS_LITERAL = 53;
grammar3rdParser.BOOLEAN_LITERAL = 54;
grammar3rdParser.EXTERNAL_LITERAL = 55;
grammar3rdParser.OBJECT_LITERAL = 56;
grammar3rdParser.TeletexString_LITERAL = 57;
grammar3rdParser.BY_LITERAL = 58;
grammar3rdParser.FALSE_LITERAL = 59;
grammar3rdParser.ObjectDescriptor_LITERAL = 60;
grammar3rdParser.TIME_LITERAL = 61;
grammar3rdParser.CHARACTER_LITERAL = 62;
grammar3rdParser.FROM_LITERAL = 63;
grammar3rdParser.OCTET_LITERAL = 64;
grammar3rdParser.TIME_OF_DAY_LITERAL = 65;
grammar3rdParser.CHOICE_LITERAL = 66;
grammar3rdParser.GeneralizedTime_LITERAL = 67;
grammar3rdParser.OF_LITERAL = 68;
grammar3rdParser.TRUE_LITERAL = 69;
grammar3rdParser.CLASS_LITERAL = 70;
grammar3rdParser.GeneralString_LITERAL = 71;
grammar3rdParser.OID_IRI_LITERAL = 72;
grammar3rdParser.TYPE_IDENTIFIER_LITERAL = 73;
grammar3rdParser.COMPONENT_LITERAL = 74;
grammar3rdParser.GraphicString_LITERAL = 75;
grammar3rdParser.OPTIONAL_LITERAL = 76;
grammar3rdParser.UNION_LITERAL = 77;
grammar3rdParser.COMPONENTS_LITERAL = 78;
grammar3rdParser.IA5String_LITERAL = 79;
grammar3rdParser.PATTERN_LITERAL = 80;
grammar3rdParser.UNIQUE_LITERAL = 81;
grammar3rdParser.CONSTRAINED_LITERAL = 82;
grammar3rdParser.IDENTIFIER_LITERAL = 83;
grammar3rdParser.PDV_LITERAL = 84;
grammar3rdParser.UNIVERSAL_LITERAL = 85;
grammar3rdParser.CONTAINING_LITERAL = 86;
grammar3rdParser.IMPLICIT_LITERAL = 87;
grammar3rdParser.PLUS_INFINITY_LITERAL = 88;
grammar3rdParser.UniversalString_LITERAL = 89;
grammar3rdParser.DATE_LITERAL = 90;
grammar3rdParser.IMPLIED_LITERAL = 91;
grammar3rdParser.PRESENT_LITERAL = 92;
grammar3rdParser.UTCTime_LITERAL = 93;
grammar3rdParser.DATE_TIME_LITERAL = 94;
grammar3rdParser.IMPORTS_LITERAL = 95;
grammar3rdParser.PrintableString_LITERAL = 96;
grammar3rdParser.UTF8String_LITERAL = 97;
grammar3rdParser.DEFAULT_LITERAL = 98;
grammar3rdParser.INCLUDES_LITERAL = 99;
grammar3rdParser.PRIVATE_LITERAL = 100;
grammar3rdParser.VideotexString_LITERAL = 101;
grammar3rdParser.DEFINITIONS_LITERAL = 102;
grammar3rdParser.INSTANCE_LITERAL = 103;
grammar3rdParser.REAL_LITERAL = 104;
grammar3rdParser.VisibleString_LITERAL = 105;
grammar3rdParser.DURATION_LITERAL = 106;
grammar3rdParser.INSTRUCTIONS_LITERAL = 107;
grammar3rdParser.RELATIVE_OID_LITERAL = 108;
grammar3rdParser.WITH_LITERAL = 109;
grammar3rdParser.EMBEDDED_LITERAL = 110;
grammar3rdParser.INTEGER_LITERAL = 111;
grammar3rdParser.RELATIVE_OID_IRI_LITERAL = 112;
grammar3rdParser.AS_LITERAL = 113;
grammar3rdParser.COMPLETED_LITERAL = 114;
grammar3rdParser.ENCODE_LITERAL = 115;
grammar3rdParser.ENCODE_DECODE_LITERAL = 116;
grammar3rdParser.ENCODER_LITERAL = 117;
grammar3rdParser.ENCODER_DECODER_LITERAL = 118;
grammar3rdParser.DECODE_LITERAL = 119;
grammar3rdParser.DECODER_LITERAL = 120;
grammar3rdParser.ENCODING_DEFINITIONS_LITERAL = 121;
grammar3rdParser.ENCODINGS_LITERAL = 122;
grammar3rdParser.IF_LITERAL = 123;
grammar3rdParser.LINK_DEFINITIONS_LITERAL = 124;
grammar3rdParser.PER_BASIC_UNALIGNED_LITERAL = 125;
grammar3rdParser.OUTER_LITERAL = 126;
grammar3rdParser.WS = 127;
grammar3rdParser.Tag = 128;
grammar3rdParser.Comment = 129;
grammar3rdParser.Word = 130;
grammar3rdParser.ObjectClassReference = 131;
grammar3rdParser.TypeReference = 132;
grammar3rdParser.IdentifierL = 133;
grammar3rdParser.Number = 134;
grammar3rdParser.Bstring = 135;
grammar3rdParser.RULE_moduleDefinitions = 0;
grammar3rdParser.RULE_typeReference = 1;
grammar3rdParser.RULE_identifier = 2;
grammar3rdParser.RULE_valueReference = 3;
grammar3rdParser.RULE_moduleReference = 4;
grammar3rdParser.RULE_moduleDefinition = 5;
grammar3rdParser.RULE_elmDefinition = 6;
grammar3rdParser.RULE_edmDefinition = 7;
grammar3rdParser.RULE_moduleIdentifier = 8;
grammar3rdParser.RULE_definitiveIdentification = 9;
grammar3rdParser.RULE_definitiveOid = 10;
grammar3rdParser.RULE_definitiveObjIdComponentList = 11;
grammar3rdParser.RULE_definitiveObjIdComponent = 12;
grammar3rdParser.RULE_definitiveNameAndNumberForm = 13;
grammar3rdParser.RULE_definitiveNumberForm = 14;
grammar3rdParser.RULE_tagDefault = 15;
grammar3rdParser.RULE_moduleBody = 16;
grammar3rdParser.RULE_exports = 17;
grammar3rdParser.RULE_symbolsExported = 18;
grammar3rdParser.RULE_imports = 19;
grammar3rdParser.RULE_symbolsImported = 20;
grammar3rdParser.RULE_symbolsFromModuleList = 21;
grammar3rdParser.RULE_symbolsFromModule = 22;
grammar3rdParser.RULE_globalModuleReference = 23;
grammar3rdParser.RULE_symbolList = 24;
grammar3rdParser.RULE_symbol = 25;
grammar3rdParser.RULE_reference = 26;
grammar3rdParser.RULE_assignmentList = 27;
grammar3rdParser.RULE_assignment = 28;
grammar3rdParser.RULE_definedType = 29;
grammar3rdParser.RULE_definedValue = 30;
grammar3rdParser.RULE_externalTypeReference = 31;
grammar3rdParser.RULE_externalValueReference = 32;
grammar3rdParser.RULE_typeAssignment = 33;
grammar3rdParser.RULE_valueAssignment = 34;
grammar3rdParser.RULE_type = 35;
grammar3rdParser.RULE_builtinType = 36;
grammar3rdParser.RULE_referencedType = 37;
grammar3rdParser.RULE_namedType = 38;
grammar3rdParser.RULE_value = 39;
grammar3rdParser.RULE_builtinValue = 40;
grammar3rdParser.RULE_booleanType = 41;
grammar3rdParser.RULE_integerType = 42;
grammar3rdParser.RULE_namedNumberList = 43;
grammar3rdParser.RULE_namedNumber = 44;
grammar3rdParser.RULE_signedNumber = 45;
grammar3rdParser.RULE_integerValue = 46;
grammar3rdParser.RULE_enumeratedType = 47;
grammar3rdParser.RULE_enumerations = 48;
grammar3rdParser.RULE_rootEnumeration = 49;
grammar3rdParser.RULE_additionalEnumeration = 50;
grammar3rdParser.RULE_enumeration = 51;
grammar3rdParser.RULE_enumerationItem = 52;
grammar3rdParser.RULE_bitStringType = 53;
grammar3rdParser.RULE_namedBitList = 54;
grammar3rdParser.RULE_namedBit = 55;
grammar3rdParser.RULE_bitStringValue = 56;
grammar3rdParser.RULE_octetStringType = 57;
grammar3rdParser.RULE_nullType = 58;
grammar3rdParser.RULE_sequenceType = 59;
grammar3rdParser.RULE_extensionAndException = 60;
grammar3rdParser.RULE_optionalExtensionMarker = 61;
grammar3rdParser.RULE_componentTypeLists = 62;
grammar3rdParser.RULE_rootComponentTypeList = 63;
grammar3rdParser.RULE_extensionEndMarker = 64;
grammar3rdParser.RULE_extensionAdditions = 65;
grammar3rdParser.RULE_extensionAdditionList = 66;
grammar3rdParser.RULE_extensionAddition = 67;
grammar3rdParser.RULE_extensionAdditionGroup = 68;
grammar3rdParser.RULE_componentTypeList = 69;
grammar3rdParser.RULE_componentType = 70;
grammar3rdParser.RULE_sequenceOfType = 71;
grammar3rdParser.RULE_choiceType = 72;
grammar3rdParser.RULE_alternativeTypeLists = 73;
grammar3rdParser.RULE_rootAlternativeTypeList = 74;
grammar3rdParser.RULE_extensionAdditionAlternatives = 75;
grammar3rdParser.RULE_extensionAdditionAlternativesList = 76;
grammar3rdParser.RULE_extensionAdditionAlternative = 77;
grammar3rdParser.RULE_extensionAdditionAlternativesGroup = 78;
grammar3rdParser.RULE_alternativeTypeList = 79;
grammar3rdParser.RULE_objectIdentifierType = 80;
grammar3rdParser.RULE_characterStringType = 81;
grammar3rdParser.RULE_restrictedCharacterStringType = 82;
grammar3rdParser.RULE_usefulType = 83;
grammar3rdParser.RULE_constrainedType = 84;
grammar3rdParser.RULE_typeWithConstraint = 85;
grammar3rdParser.RULE_constraint = 86;
grammar3rdParser.RULE_constraintSpec = 87;
grammar3rdParser.RULE_subtypeConstraint = 88;
grammar3rdParser.RULE_elementSetSpecs = 89;
grammar3rdParser.RULE_rootElementSetSpec = 90;
grammar3rdParser.RULE_additionalElementSetSpec = 91;
grammar3rdParser.RULE_elementSetSpec = 92;
grammar3rdParser.RULE_unions = 93;
grammar3rdParser.RULE_intersections = 94;
grammar3rdParser.RULE_intersectionElements = 95;
grammar3rdParser.RULE_unionMark = 96;
grammar3rdParser.RULE_elements = 97;
grammar3rdParser.RULE_subtypeElements = 98;
grammar3rdParser.RULE_singleValue = 99;
grammar3rdParser.RULE_valueRange = 100;
grammar3rdParser.RULE_lowerEndpoint = 101;
grammar3rdParser.RULE_upperEndpoint = 102;
grammar3rdParser.RULE_lowerEndValue = 103;
grammar3rdParser.RULE_upperEndValue = 104;
grammar3rdParser.RULE_sizeConstraint = 105;
grammar3rdParser.RULE_innerTypeConstraints = 106;
grammar3rdParser.RULE_multipleTypeConstraints = 107;
grammar3rdParser.RULE_partialSpecification = 108;
grammar3rdParser.RULE_typeConstraints = 109;
grammar3rdParser.RULE_namedConstraint = 110;
grammar3rdParser.RULE_componentConstraint = 111;
grammar3rdParser.RULE_valueConstraint = 112;
grammar3rdParser.RULE_presenceConstraint = 113;
grammar3rdParser.RULE_exceptionSpec = 114;
grammar3rdParser.RULE_exceptionIdentification = 115;
grammar3rdParser.RULE_objectClassReference = 116;
grammar3rdParser.RULE_objectSetReference = 117;
grammar3rdParser.RULE_objectReference = 118;
grammar3rdParser.RULE_valueFieldReference = 119;
grammar3rdParser.RULE_word = 120;
grammar3rdParser.RULE_typeFieldReference = 121;
grammar3rdParser.RULE_definedObjectClass = 122;
grammar3rdParser.RULE_definedObjectSet = 123;
grammar3rdParser.RULE_objectClassAssignment = 124;
grammar3rdParser.RULE_objectClass = 125;
grammar3rdParser.RULE_objectClassDefn = 126;
grammar3rdParser.RULE_withSyntaxSpec = 127;
grammar3rdParser.RULE_fieldSpec = 128;
grammar3rdParser.RULE_typeFieldSpec = 129;
grammar3rdParser.RULE_typeOptionalitySpec = 130;
grammar3rdParser.RULE_fixedTypeValueFieldSpec = 131;
grammar3rdParser.RULE_valueOptionalitySpec = 132;
grammar3rdParser.RULE_primitiveFieldName = 133;
grammar3rdParser.RULE_fieldName = 134;
grammar3rdParser.RULE_syntaxList = 135;
grammar3rdParser.RULE_tokenOrGroupSpec = 136;
grammar3rdParser.RULE_optionalGroup = 137;
grammar3rdParser.RULE_requiredToken = 138;
grammar3rdParser.RULE_literal = 139;
grammar3rdParser.RULE_objectAssignment = 140;
grammar3rdParser.RULE_object = 141;
grammar3rdParser.RULE_objectDefn = 142;
grammar3rdParser.RULE_definedSyntax = 143;
grammar3rdParser.RULE_definedSyntaxToken = 144;
grammar3rdParser.RULE_setting = 145;
grammar3rdParser.RULE_objectSetAssignment = 146;
grammar3rdParser.RULE_objectSet = 147;
grammar3rdParser.RULE_objectSetSpec = 148;
grammar3rdParser.RULE_objectSetElements = 149;
grammar3rdParser.RULE_objectClassFieldType = 150;
grammar3rdParser.RULE_generalConstraint = 151;
grammar3rdParser.RULE_tableConstraint = 152;
grammar3rdParser.RULE_simpleTableConstraint = 153;
grammar3rdParser.RULE_componentRelationConstraint = 154;
grammar3rdParser.RULE_atNotation = 155;
grammar3rdParser.RULE_componentIdList = 156;
grammar3rdParser.RULE_contentsConstraint = 157;
grammar3rdParser.RULE_parameterizedAssignment = 158;
grammar3rdParser.RULE_parameterizedTypeAssignment = 159;
grammar3rdParser.RULE_parameterList = 160;
grammar3rdParser.RULE_parameter = 161;
grammar3rdParser.RULE_paramGovernor = 162;
grammar3rdParser.RULE_governor = 163;
grammar3rdParser.RULE_dummyReference = 164;
grammar3rdParser.RULE_parameterizedReference = 165;
grammar3rdParser.RULE_parameterizedTypeAmbiguous = 166;
grammar3rdParser.RULE_simpleDefinedType = 167;
grammar3rdParser.RULE_actualParameterList = 168;
grammar3rdParser.RULE_actualParameter = 169;
grammar3rdParser.RULE_encodingObjectReference = 170;
grammar3rdParser.RULE_encodingObjectSetReference = 171;
grammar3rdParser.RULE_encodingClassReferenceVariant = 172;
grammar3rdParser.RULE_definedOrBuiltinEncodingClass = 173;
grammar3rdParser.RULE_definedEncodingObject = 174;
grammar3rdParser.RULE_definedEncodingObjectSet = 175;
grammar3rdParser.RULE_definedOrBuiltinEncodingObjectSet = 176;
grammar3rdParser.RULE_elmModuleBody = 177;
grammar3rdParser.RULE_encodingApplicationList = 178;
grammar3rdParser.RULE_encodingApplication = 179;
grammar3rdParser.RULE_combinedEncodings = 180;
grammar3rdParser.RULE_completionClause = 181;
grammar3rdParser.RULE_primaryEncodings = 182;
grammar3rdParser.RULE_secondaryEncodings = 183;
grammar3rdParser.RULE_edmModuleBody = 184;
grammar3rdParser.RULE_edmAssignmentList = 185;
grammar3rdParser.RULE_edmAssignment = 186;
grammar3rdParser.RULE_builtinEncodingClassReference = 187;
grammar3rdParser.RULE_encodingProcedureClassReference = 188;
grammar3rdParser.RULE_encodingObjectAssignment = 189;
grammar3rdParser.RULE_encodingObject = 190;
grammar3rdParser.RULE_differentialEncodeDecodeObjectVariant = 191;
grammar3rdParser.RULE_specForEncoding = 192;
grammar3rdParser.RULE_specForDecoders = 193;
grammar3rdParser.RULE_encodingObjectSetAssignment = 194;
grammar3rdParser.RULE_encodingObjectSet = 195;
grammar3rdParser.RULE_encodingObjectSetSpec = 196;
grammar3rdParser.RULE_encodingObjects = 197;
grammar3rdParser.RULE_builtinEncodingObjectSetReference = 198;
grammar3rdParser.RULE_simpleDefinedEncodingClass = 199;
class ModuleDefinitionsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.moduleDefinition = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ModuleDefinitionContext);
            }
            else {
                return this.getTypedRuleContext(ModuleDefinitionContext, i);
            }
        };
        this.elmDefinition = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ElmDefinitionContext);
            }
            else {
                return this.getTypedRuleContext(ElmDefinitionContext, i);
            }
        };
        this.edmDefinition = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EdmDefinitionContext);
            }
            else {
                return this.getTypedRuleContext(EdmDefinitionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_moduleDefinitions;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterModuleDefinitions(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitModuleDefinitions(this);
        }
    }
}
class TypeReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_typeReference;
    }
    Word() {
        return this.getToken(grammar3rdParser.Word, 0);
    }
    ;
    ObjectClassReference() {
        return this.getToken(grammar3rdParser.ObjectClassReference, 0);
    }
    ;
    TypeReference() {
        return this.getToken(grammar3rdParser.TypeReference, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterTypeReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitTypeReference(this);
        }
    }
}
class IdentifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_identifier;
    }
    IdentifierL() {
        return this.getToken(grammar3rdParser.IdentifierL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterIdentifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitIdentifier(this);
        }
    }
}
class ValueReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_valueReference;
    }
    IdentifierL() {
        return this.getToken(grammar3rdParser.IdentifierL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterValueReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitValueReference(this);
        }
    }
}
class ModuleReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_moduleReference;
    }
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterModuleReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitModuleReference(this);
        }
    }
}
class ModuleDefinitionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_moduleDefinition;
    }
    moduleIdentifier() {
        return this.getTypedRuleContext(ModuleIdentifierContext, 0);
    }
    ;
    DEFINITIONS_LITERAL() {
        return this.getToken(grammar3rdParser.DEFINITIONS_LITERAL, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    BEGIN_LITERAL() {
        return this.getToken(grammar3rdParser.BEGIN_LITERAL, 0);
    }
    ;
    END_LITERAL() {
        return this.getToken(grammar3rdParser.END_LITERAL, 0);
    }
    ;
    tagDefault() {
        return this.getTypedRuleContext(TagDefaultContext, 0);
    }
    ;
    moduleBody() {
        return this.getTypedRuleContext(ModuleBodyContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterModuleDefinition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitModuleDefinition(this);
        }
    }
}
class ElmDefinitionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_elmDefinition;
    }
    moduleIdentifier() {
        return this.getTypedRuleContext(ModuleIdentifierContext, 0);
    }
    ;
    LINK_DEFINITIONS_LITERAL() {
        return this.getToken(grammar3rdParser.LINK_DEFINITIONS_LITERAL, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    BEGIN_LITERAL() {
        return this.getToken(grammar3rdParser.BEGIN_LITERAL, 0);
    }
    ;
    elmModuleBody() {
        return this.getTypedRuleContext(ElmModuleBodyContext, 0);
    }
    ;
    END_LITERAL() {
        return this.getToken(grammar3rdParser.END_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterElmDefinition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitElmDefinition(this);
        }
    }
}
class EdmDefinitionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_edmDefinition;
    }
    moduleIdentifier() {
        return this.getTypedRuleContext(ModuleIdentifierContext, 0);
    }
    ;
    ENCODING_DEFINITIONS_LITERAL() {
        return this.getToken(grammar3rdParser.ENCODING_DEFINITIONS_LITERAL, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    BEGIN_LITERAL() {
        return this.getToken(grammar3rdParser.BEGIN_LITERAL, 0);
    }
    ;
    edmModuleBody() {
        return this.getTypedRuleContext(EdmModuleBodyContext, 0);
    }
    ;
    END_LITERAL() {
        return this.getToken(grammar3rdParser.END_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEdmDefinition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEdmDefinition(this);
        }
    }
}
class ModuleIdentifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_moduleIdentifier;
    }
    moduleReference() {
        return this.getTypedRuleContext(ModuleReferenceContext, 0);
    }
    ;
    definitiveIdentification() {
        return this.getTypedRuleContext(DefinitiveIdentificationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterModuleIdentifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitModuleIdentifier(this);
        }
    }
}
class DefinitiveIdentificationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definitiveIdentification;
    }
    definitiveOid() {
        return this.getTypedRuleContext(DefinitiveOidContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinitiveIdentification(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinitiveIdentification(this);
        }
    }
}
class DefinitiveOidContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definitiveOid;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    definitiveObjIdComponentList() {
        return this.getTypedRuleContext(DefinitiveObjIdComponentListContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinitiveOid(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinitiveOid(this);
        }
    }
}
class DefinitiveObjIdComponentListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.definitiveObjIdComponent = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(DefinitiveObjIdComponentContext);
            }
            else {
                return this.getTypedRuleContext(DefinitiveObjIdComponentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definitiveObjIdComponentList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinitiveObjIdComponentList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinitiveObjIdComponentList(this);
        }
    }
}
class DefinitiveObjIdComponentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definitiveObjIdComponent;
    }
    definitiveNameAndNumberForm() {
        return this.getTypedRuleContext(DefinitiveNameAndNumberFormContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinitiveObjIdComponent(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinitiveObjIdComponent(this);
        }
    }
}
class DefinitiveNameAndNumberFormContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definitiveNameAndNumberForm;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    L_PAREN() {
        return this.getToken(grammar3rdParser.L_PAREN, 0);
    }
    ;
    definitiveNumberForm() {
        return this.getTypedRuleContext(DefinitiveNumberFormContext, 0);
    }
    ;
    R_PAREN() {
        return this.getToken(grammar3rdParser.R_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinitiveNameAndNumberForm(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinitiveNameAndNumberForm(this);
        }
    }
}
class DefinitiveNumberFormContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definitiveNumberForm;
    }
    Number() {
        return this.getToken(grammar3rdParser.Number, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinitiveNumberForm(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinitiveNumberForm(this);
        }
    }
}
class TagDefaultContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_tagDefault;
    }
    EXPLICIT_LITERAL() {
        return this.getToken(grammar3rdParser.EXPLICIT_LITERAL, 0);
    }
    ;
    TAGS_LITERAL() {
        return this.getToken(grammar3rdParser.TAGS_LITERAL, 0);
    }
    ;
    IMPLICIT_LITERAL() {
        return this.getToken(grammar3rdParser.IMPLICIT_LITERAL, 0);
    }
    ;
    AUTOMATIC_LITERAL() {
        return this.getToken(grammar3rdParser.AUTOMATIC_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterTagDefault(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitTagDefault(this);
        }
    }
}
class ModuleBodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_moduleBody;
    }
    assignmentList() {
        return this.getTypedRuleContext(AssignmentListContext, 0);
    }
    ;
    exports() {
        return this.getTypedRuleContext(ExportsContext, 0);
    }
    ;
    imports() {
        return this.getTypedRuleContext(ImportsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterModuleBody(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitModuleBody(this);
        }
    }
}
class ExportsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_exports;
    }
    EXPORTS_LITERAL() {
        return this.getToken(grammar3rdParser.EXPORTS_LITERAL, 0);
    }
    ;
    SEMICOLON_LITERAL() {
        return this.getToken(grammar3rdParser.SEMICOLON_LITERAL, 0);
    }
    ;
    symbolsExported() {
        return this.getTypedRuleContext(SymbolsExportedContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterExports(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitExports(this);
        }
    }
}
class SymbolsExportedContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_symbolsExported;
    }
    symbolList() {
        return this.getTypedRuleContext(SymbolListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSymbolsExported(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSymbolsExported(this);
        }
    }
}
class ImportsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_imports;
    }
    IMPORTS_LITERAL() {
        return this.getToken(grammar3rdParser.IMPORTS_LITERAL, 0);
    }
    ;
    SEMICOLON_LITERAL() {
        return this.getToken(grammar3rdParser.SEMICOLON_LITERAL, 0);
    }
    ;
    symbolsImported() {
        return this.getTypedRuleContext(SymbolsImportedContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterImports(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitImports(this);
        }
    }
}
class SymbolsImportedContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_symbolsImported;
    }
    symbolsFromModuleList() {
        return this.getTypedRuleContext(SymbolsFromModuleListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSymbolsImported(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSymbolsImported(this);
        }
    }
}
class SymbolsFromModuleListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.symbolsFromModule = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SymbolsFromModuleContext);
            }
            else {
                return this.getTypedRuleContext(SymbolsFromModuleContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_symbolsFromModuleList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSymbolsFromModuleList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSymbolsFromModuleList(this);
        }
    }
}
class SymbolsFromModuleContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_symbolsFromModule;
    }
    symbolList() {
        return this.getTypedRuleContext(SymbolListContext, 0);
    }
    ;
    FROM_LITERAL() {
        return this.getToken(grammar3rdParser.FROM_LITERAL, 0);
    }
    ;
    globalModuleReference() {
        return this.getTypedRuleContext(GlobalModuleReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSymbolsFromModule(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSymbolsFromModule(this);
        }
    }
}
class GlobalModuleReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_globalModuleReference;
    }
    moduleReference() {
        return this.getTypedRuleContext(ModuleReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterGlobalModuleReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitGlobalModuleReference(this);
        }
    }
}
class SymbolListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.symbol = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SymbolContext);
            }
            else {
                return this.getTypedRuleContext(SymbolContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_symbolList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSymbolList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSymbolList(this);
        }
    }
}
class SymbolContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_symbol;
    }
    reference() {
        return this.getTypedRuleContext(ReferenceContext, 0);
    }
    ;
    parameterizedReference() {
        return this.getTypedRuleContext(ParameterizedReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSymbol(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSymbol(this);
        }
    }
}
class ReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_reference;
    }
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    valueReference() {
        return this.getTypedRuleContext(ValueReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitReference(this);
        }
    }
}
class AssignmentListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.assignment = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AssignmentContext);
            }
            else {
                return this.getTypedRuleContext(AssignmentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_assignmentList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterAssignmentList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitAssignmentList(this);
        }
    }
}
class AssignmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_assignment;
    }
    typeAssignment() {
        return this.getTypedRuleContext(TypeAssignmentContext, 0);
    }
    ;
    valueAssignment() {
        return this.getTypedRuleContext(ValueAssignmentContext, 0);
    }
    ;
    objectClassAssignment() {
        return this.getTypedRuleContext(ObjectClassAssignmentContext, 0);
    }
    ;
    objectAssignment() {
        return this.getTypedRuleContext(ObjectAssignmentContext, 0);
    }
    ;
    objectSetAssignment() {
        return this.getTypedRuleContext(ObjectSetAssignmentContext, 0);
    }
    ;
    parameterizedAssignment() {
        return this.getTypedRuleContext(ParameterizedAssignmentContext, 0);
    }
    ;
    Tag() {
        return this.getToken(grammar3rdParser.Tag, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitAssignment(this);
        }
    }
}
class DefinedTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedType;
    }
    externalTypeReference() {
        return this.getTypedRuleContext(ExternalTypeReferenceContext, 0);
    }
    ;
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    parameterizedTypeAmbiguous() {
        return this.getTypedRuleContext(ParameterizedTypeAmbiguousContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinedType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinedType(this);
        }
    }
}
class DefinedValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedValue;
    }
    externalValueReference() {
        return this.getTypedRuleContext(ExternalValueReferenceContext, 0);
    }
    ;
    valueReference() {
        return this.getTypedRuleContext(ValueReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinedValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinedValue(this);
        }
    }
}
class ExternalTypeReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_externalTypeReference;
    }
    moduleReference() {
        return this.getTypedRuleContext(ModuleReferenceContext, 0);
    }
    ;
    PERIOD() {
        return this.getToken(grammar3rdParser.PERIOD, 0);
    }
    ;
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterExternalTypeReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitExternalTypeReference(this);
        }
    }
}
class ExternalValueReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_externalValueReference;
    }
    moduleReference() {
        return this.getTypedRuleContext(ModuleReferenceContext, 0);
    }
    ;
    PERIOD() {
        return this.getToken(grammar3rdParser.PERIOD, 0);
    }
    ;
    valueReference() {
        return this.getTypedRuleContext(ValueReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterExternalValueReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitExternalValueReference(this);
        }
    }
}
class TypeAssignmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_typeAssignment;
    }
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterTypeAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitTypeAssignment(this);
        }
    }
}
class ValueAssignmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_valueAssignment;
    }
    valueReference() {
        return this.getTypedRuleContext(ValueReferenceContext, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterValueAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitValueAssignment(this);
        }
    }
}
class TypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_type;
    }
    builtinType() {
        return this.getTypedRuleContext(BuiltinTypeContext, 0);
    }
    ;
    referencedType() {
        return this.getTypedRuleContext(ReferencedTypeContext, 0);
    }
    ;
    constrainedType() {
        return this.getTypedRuleContext(ConstrainedTypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitType(this);
        }
    }
}
class BuiltinTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_builtinType;
    }
    bitStringType() {
        return this.getTypedRuleContext(BitStringTypeContext, 0);
    }
    ;
    booleanType() {
        return this.getTypedRuleContext(BooleanTypeContext, 0);
    }
    ;
    characterStringType() {
        return this.getTypedRuleContext(CharacterStringTypeContext, 0);
    }
    ;
    choiceType() {
        return this.getTypedRuleContext(ChoiceTypeContext, 0);
    }
    ;
    enumeratedType() {
        return this.getTypedRuleContext(EnumeratedTypeContext, 0);
    }
    ;
    integerType() {
        return this.getTypedRuleContext(IntegerTypeContext, 0);
    }
    ;
    nullType() {
        return this.getTypedRuleContext(NullTypeContext, 0);
    }
    ;
    objectClassFieldType() {
        return this.getTypedRuleContext(ObjectClassFieldTypeContext, 0);
    }
    ;
    objectIdentifierType() {
        return this.getTypedRuleContext(ObjectIdentifierTypeContext, 0);
    }
    ;
    octetStringType() {
        return this.getTypedRuleContext(OctetStringTypeContext, 0);
    }
    ;
    sequenceType() {
        return this.getTypedRuleContext(SequenceTypeContext, 0);
    }
    ;
    sequenceOfType() {
        return this.getTypedRuleContext(SequenceOfTypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterBuiltinType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitBuiltinType(this);
        }
    }
}
class ReferencedTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_referencedType;
    }
    definedType() {
        return this.getTypedRuleContext(DefinedTypeContext, 0);
    }
    ;
    usefulType() {
        return this.getTypedRuleContext(UsefulTypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterReferencedType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitReferencedType(this);
        }
    }
}
class NamedTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_namedType;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterNamedType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitNamedType(this);
        }
    }
}
class ValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_value;
    }
    builtinValue() {
        return this.getTypedRuleContext(BuiltinValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitValue(this);
        }
    }
}
class BuiltinValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_builtinValue;
    }
    bitStringValue() {
        return this.getTypedRuleContext(BitStringValueContext, 0);
    }
    ;
    integerValue() {
        return this.getTypedRuleContext(IntegerValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterBuiltinValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitBuiltinValue(this);
        }
    }
}
class BooleanTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_booleanType;
    }
    BOOLEAN_LITERAL() {
        return this.getToken(grammar3rdParser.BOOLEAN_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterBooleanType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitBooleanType(this);
        }
    }
}
class IntegerTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_integerType;
    }
    INTEGER_LITERAL() {
        return this.getToken(grammar3rdParser.INTEGER_LITERAL, 0);
    }
    ;
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    namedNumberList() {
        return this.getTypedRuleContext(NamedNumberListContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterIntegerType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitIntegerType(this);
        }
    }
}
class NamedNumberListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.namedNumber = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NamedNumberContext);
            }
            else {
                return this.getTypedRuleContext(NamedNumberContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_namedNumberList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterNamedNumberList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitNamedNumberList(this);
        }
    }
}
class NamedNumberContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_namedNumber;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    L_PAREN() {
        return this.getToken(grammar3rdParser.L_PAREN, 0);
    }
    ;
    signedNumber() {
        return this.getTypedRuleContext(SignedNumberContext, 0);
    }
    ;
    R_PAREN() {
        return this.getToken(grammar3rdParser.R_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterNamedNumber(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitNamedNumber(this);
        }
    }
}
class SignedNumberContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_signedNumber;
    }
    Number() {
        return this.getToken(grammar3rdParser.Number, 0);
    }
    ;
    HYPHEN_MINUS() {
        return this.getToken(grammar3rdParser.HYPHEN_MINUS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSignedNumber(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSignedNumber(this);
        }
    }
}
class IntegerValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_integerValue;
    }
    signedNumber() {
        return this.getTypedRuleContext(SignedNumberContext, 0);
    }
    ;
    valueReference() {
        return this.getTypedRuleContext(ValueReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterIntegerValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitIntegerValue(this);
        }
    }
}
class EnumeratedTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_enumeratedType;
    }
    ENUMERATED_LITERAL() {
        return this.getToken(grammar3rdParser.ENUMERATED_LITERAL, 0);
    }
    ;
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    enumerations() {
        return this.getTypedRuleContext(EnumerationsContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEnumeratedType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEnumeratedType(this);
        }
    }
}
class EnumerationsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_enumerations;
    }
    rootEnumeration() {
        return this.getTypedRuleContext(RootEnumerationContext, 0);
    }
    ;
    ELLIPSIS() {
        return this.getToken(grammar3rdParser.ELLIPSIS, 0);
    }
    ;
    exceptionSpec() {
        return this.getTypedRuleContext(ExceptionSpecContext, 0);
    }
    ;
    additionalEnumeration() {
        return this.getTypedRuleContext(AdditionalEnumerationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEnumerations(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEnumerations(this);
        }
    }
}
class RootEnumerationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_rootEnumeration;
    }
    enumeration() {
        return this.getTypedRuleContext(EnumerationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterRootEnumeration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitRootEnumeration(this);
        }
    }
}
class AdditionalEnumerationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_additionalEnumeration;
    }
    enumeration() {
        return this.getTypedRuleContext(EnumerationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterAdditionalEnumeration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitAdditionalEnumeration(this);
        }
    }
}
class EnumerationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.enumerationItem = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EnumerationItemContext);
            }
            else {
                return this.getTypedRuleContext(EnumerationItemContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_enumeration;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEnumeration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEnumeration(this);
        }
    }
}
class EnumerationItemContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_enumerationItem;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    namedNumber() {
        return this.getTypedRuleContext(NamedNumberContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEnumerationItem(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEnumerationItem(this);
        }
    }
}
class BitStringTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_bitStringType;
    }
    BIT_LITERAL() {
        return this.getToken(grammar3rdParser.BIT_LITERAL, 0);
    }
    ;
    STRING_LITERAL() {
        return this.getToken(grammar3rdParser.STRING_LITERAL, 0);
    }
    ;
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    namedBitList() {
        return this.getTypedRuleContext(NamedBitListContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterBitStringType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitBitStringType(this);
        }
    }
}
class NamedBitListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.namedBit = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NamedBitContext);
            }
            else {
                return this.getTypedRuleContext(NamedBitContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_namedBitList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterNamedBitList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitNamedBitList(this);
        }
    }
}
class NamedBitContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_namedBit;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    L_PAREN() {
        return this.getToken(grammar3rdParser.L_PAREN, 0);
    }
    ;
    Number() {
        return this.getToken(grammar3rdParser.Number, 0);
    }
    ;
    R_PAREN() {
        return this.getToken(grammar3rdParser.R_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterNamedBit(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitNamedBit(this);
        }
    }
}
class BitStringValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_bitStringValue;
    }
    Bstring() {
        return this.getToken(grammar3rdParser.Bstring, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterBitStringValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitBitStringValue(this);
        }
    }
}
class OctetStringTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_octetStringType;
    }
    OCTET_LITERAL() {
        return this.getToken(grammar3rdParser.OCTET_LITERAL, 0);
    }
    ;
    STRING_LITERAL() {
        return this.getToken(grammar3rdParser.STRING_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterOctetStringType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitOctetStringType(this);
        }
    }
}
class NullTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_nullType;
    }
    NULL_LITERAL() {
        return this.getToken(grammar3rdParser.NULL_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterNullType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitNullType(this);
        }
    }
}
class SequenceTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_sequenceType;
    }
    SEQUENCE_LITERAL() {
        return this.getToken(grammar3rdParser.SEQUENCE_LITERAL, 0);
    }
    ;
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    extensionAndException() {
        return this.getTypedRuleContext(ExtensionAndExceptionContext, 0);
    }
    ;
    optionalExtensionMarker() {
        return this.getTypedRuleContext(OptionalExtensionMarkerContext, 0);
    }
    ;
    componentTypeLists() {
        return this.getTypedRuleContext(ComponentTypeListsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSequenceType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSequenceType(this);
        }
    }
}
class ExtensionAndExceptionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAndException;
    }
    ELLIPSIS() {
        return this.getToken(grammar3rdParser.ELLIPSIS, 0);
    }
    ;
    exceptionSpec() {
        return this.getTypedRuleContext(ExceptionSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterExtensionAndException(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitExtensionAndException(this);
        }
    }
}
class OptionalExtensionMarkerContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_optionalExtensionMarker;
    }
    COMMA() {
        return this.getToken(grammar3rdParser.COMMA, 0);
    }
    ;
    ELLIPSIS() {
        return this.getToken(grammar3rdParser.ELLIPSIS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterOptionalExtensionMarker(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitOptionalExtensionMarker(this);
        }
    }
}
class ComponentTypeListsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.rootComponentTypeList = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(RootComponentTypeListContext);
            }
            else {
                return this.getTypedRuleContext(RootComponentTypeListContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_componentTypeLists;
    }
    Tag() {
        return this.getToken(grammar3rdParser.Tag, 0);
    }
    ;
    extensionAndException() {
        return this.getTypedRuleContext(ExtensionAndExceptionContext, 0);
    }
    ;
    extensionAdditions() {
        return this.getTypedRuleContext(ExtensionAdditionsContext, 0);
    }
    ;
    optionalExtensionMarker() {
        return this.getTypedRuleContext(OptionalExtensionMarkerContext, 0);
    }
    ;
    extensionEndMarker() {
        return this.getTypedRuleContext(ExtensionEndMarkerContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterComponentTypeLists(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitComponentTypeLists(this);
        }
    }
}
class RootComponentTypeListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_rootComponentTypeList;
    }
    componentTypeList() {
        return this.getTypedRuleContext(ComponentTypeListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterRootComponentTypeList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitRootComponentTypeList(this);
        }
    }
}
class ExtensionEndMarkerContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionEndMarker;
    }
    COMMA() {
        return this.getToken(grammar3rdParser.COMMA, 0);
    }
    ;
    ELLIPSIS() {
        return this.getToken(grammar3rdParser.ELLIPSIS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterExtensionEndMarker(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitExtensionEndMarker(this);
        }
    }
}
class ExtensionAdditionsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAdditions;
    }
    COMMA() {
        return this.getToken(grammar3rdParser.COMMA, 0);
    }
    ;
    extensionAdditionList() {
        return this.getTypedRuleContext(ExtensionAdditionListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterExtensionAdditions(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitExtensionAdditions(this);
        }
    }
}
class ExtensionAdditionListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.extensionAddition = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExtensionAdditionContext);
            }
            else {
                return this.getTypedRuleContext(ExtensionAdditionContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAdditionList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterExtensionAdditionList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitExtensionAdditionList(this);
        }
    }
}
class ExtensionAdditionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAddition;
    }
    componentType() {
        return this.getTypedRuleContext(ComponentTypeContext, 0);
    }
    ;
    extensionAdditionGroup() {
        return this.getTypedRuleContext(ExtensionAdditionGroupContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterExtensionAddition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitExtensionAddition(this);
        }
    }
}
class ExtensionAdditionGroupContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAdditionGroup;
    }
    L_VERSION_BRACKET() {
        return this.getToken(grammar3rdParser.L_VERSION_BRACKET, 0);
    }
    ;
    componentTypeList() {
        return this.getTypedRuleContext(ComponentTypeListContext, 0);
    }
    ;
    R_VERSION_BRACKET() {
        return this.getToken(grammar3rdParser.R_VERSION_BRACKET, 0);
    }
    ;
    Tag() {
        return this.getToken(grammar3rdParser.Tag, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterExtensionAdditionGroup(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitExtensionAdditionGroup(this);
        }
    }
}
class ComponentTypeListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.componentType = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ComponentTypeContext);
            }
            else {
                return this.getTypedRuleContext(ComponentTypeContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.Tag = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.Tag);
            }
            else {
                return this.getToken(grammar3rdParser.Tag, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_componentTypeList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterComponentTypeList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitComponentTypeList(this);
        }
    }
}
class ComponentTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_componentType;
    }
    namedType() {
        return this.getTypedRuleContext(NamedTypeContext, 0);
    }
    ;
    OPTIONAL_LITERAL() {
        return this.getToken(grammar3rdParser.OPTIONAL_LITERAL, 0);
    }
    ;
    DEFAULT_LITERAL() {
        return this.getToken(grammar3rdParser.DEFAULT_LITERAL, 0);
    }
    ;
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterComponentType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitComponentType(this);
        }
    }
}
class SequenceOfTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_sequenceOfType;
    }
    SEQUENCE_LITERAL() {
        return this.getToken(grammar3rdParser.SEQUENCE_LITERAL, 0);
    }
    ;
    OF_LITERAL() {
        return this.getToken(grammar3rdParser.OF_LITERAL, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    namedType() {
        return this.getTypedRuleContext(NamedTypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSequenceOfType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSequenceOfType(this);
        }
    }
}
class ChoiceTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_choiceType;
    }
    CHOICE_LITERAL() {
        return this.getToken(grammar3rdParser.CHOICE_LITERAL, 0);
    }
    ;
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    alternativeTypeLists() {
        return this.getTypedRuleContext(AlternativeTypeListsContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterChoiceType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitChoiceType(this);
        }
    }
}
class AlternativeTypeListsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_alternativeTypeLists;
    }
    rootAlternativeTypeList() {
        return this.getTypedRuleContext(RootAlternativeTypeListContext, 0);
    }
    ;
    COMMA() {
        return this.getToken(grammar3rdParser.COMMA, 0);
    }
    ;
    extensionAndException() {
        return this.getTypedRuleContext(ExtensionAndExceptionContext, 0);
    }
    ;
    extensionAdditionAlternatives() {
        return this.getTypedRuleContext(ExtensionAdditionAlternativesContext, 0);
    }
    ;
    optionalExtensionMarker() {
        return this.getTypedRuleContext(OptionalExtensionMarkerContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterAlternativeTypeLists(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitAlternativeTypeLists(this);
        }
    }
}
class RootAlternativeTypeListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_rootAlternativeTypeList;
    }
    alternativeTypeList() {
        return this.getTypedRuleContext(AlternativeTypeListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterRootAlternativeTypeList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitRootAlternativeTypeList(this);
        }
    }
}
class ExtensionAdditionAlternativesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAdditionAlternatives;
    }
    COMMA() {
        return this.getToken(grammar3rdParser.COMMA, 0);
    }
    ;
    extensionAdditionAlternativesList() {
        return this.getTypedRuleContext(ExtensionAdditionAlternativesListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterExtensionAdditionAlternatives(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitExtensionAdditionAlternatives(this);
        }
    }
}
class ExtensionAdditionAlternativesListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.extensionAdditionAlternative = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExtensionAdditionAlternativeContext);
            }
            else {
                return this.getTypedRuleContext(ExtensionAdditionAlternativeContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAdditionAlternativesList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterExtensionAdditionAlternativesList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitExtensionAdditionAlternativesList(this);
        }
    }
}
class ExtensionAdditionAlternativeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAdditionAlternative;
    }
    extensionAdditionAlternativesGroup() {
        return this.getTypedRuleContext(ExtensionAdditionAlternativesGroupContext, 0);
    }
    ;
    namedType() {
        return this.getTypedRuleContext(NamedTypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterExtensionAdditionAlternative(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitExtensionAdditionAlternative(this);
        }
    }
}
class ExtensionAdditionAlternativesGroupContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_extensionAdditionAlternativesGroup;
    }
    L_VERSION_BRACKET() {
        return this.getToken(grammar3rdParser.L_VERSION_BRACKET, 0);
    }
    ;
    alternativeTypeList() {
        return this.getTypedRuleContext(AlternativeTypeListContext, 0);
    }
    ;
    R_VERSION_BRACKET() {
        return this.getToken(grammar3rdParser.R_VERSION_BRACKET, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterExtensionAdditionAlternativesGroup(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitExtensionAdditionAlternativesGroup(this);
        }
    }
}
class AlternativeTypeListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.namedType = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NamedTypeContext);
            }
            else {
                return this.getTypedRuleContext(NamedTypeContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_alternativeTypeList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterAlternativeTypeList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitAlternativeTypeList(this);
        }
    }
}
class ObjectIdentifierTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectIdentifierType;
    }
    OBJECT_LITERAL() {
        return this.getToken(grammar3rdParser.OBJECT_LITERAL, 0);
    }
    ;
    IDENTIFIER_LITERAL() {
        return this.getToken(grammar3rdParser.IDENTIFIER_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterObjectIdentifierType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitObjectIdentifierType(this);
        }
    }
}
class CharacterStringTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_characterStringType;
    }
    restrictedCharacterStringType() {
        return this.getTypedRuleContext(RestrictedCharacterStringTypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterCharacterStringType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitCharacterStringType(this);
        }
    }
}
class RestrictedCharacterStringTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_restrictedCharacterStringType;
    }
    PrintableString_LITERAL() {
        return this.getToken(grammar3rdParser.PrintableString_LITERAL, 0);
    }
    ;
    UTF8String_LITERAL() {
        return this.getToken(grammar3rdParser.UTF8String_LITERAL, 0);
    }
    ;
    VisibleString_LITERAL() {
        return this.getToken(grammar3rdParser.VisibleString_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterRestrictedCharacterStringType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitRestrictedCharacterStringType(this);
        }
    }
}
class UsefulTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_usefulType;
    }
    UTCTime_LITERAL() {
        return this.getToken(grammar3rdParser.UTCTime_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterUsefulType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitUsefulType(this);
        }
    }
}
class ConstrainedTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.constraint = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ConstraintContext);
            }
            else {
                return this.getTypedRuleContext(ConstraintContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_constrainedType;
    }
    builtinType() {
        return this.getTypedRuleContext(BuiltinTypeContext, 0);
    }
    ;
    referencedType() {
        return this.getTypedRuleContext(ReferencedTypeContext, 0);
    }
    ;
    typeWithConstraint() {
        return this.getTypedRuleContext(TypeWithConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterConstrainedType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitConstrainedType(this);
        }
    }
}
class TypeWithConstraintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_typeWithConstraint;
    }
    SEQUENCE_LITERAL() {
        return this.getToken(grammar3rdParser.SEQUENCE_LITERAL, 0);
    }
    ;
    constraint() {
        return this.getTypedRuleContext(ConstraintContext, 0);
    }
    ;
    OF_LITERAL() {
        return this.getToken(grammar3rdParser.OF_LITERAL, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterTypeWithConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitTypeWithConstraint(this);
        }
    }
}
class ConstraintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_constraint;
    }
    L_PAREN() {
        return this.getToken(grammar3rdParser.L_PAREN, 0);
    }
    ;
    constraintSpec() {
        return this.getTypedRuleContext(ConstraintSpecContext, 0);
    }
    ;
    R_PAREN() {
        return this.getToken(grammar3rdParser.R_PAREN, 0);
    }
    ;
    exceptionSpec() {
        return this.getTypedRuleContext(ExceptionSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitConstraint(this);
        }
    }
}
class ConstraintSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_constraintSpec;
    }
    subtypeConstraint() {
        return this.getTypedRuleContext(SubtypeConstraintContext, 0);
    }
    ;
    generalConstraint() {
        return this.getTypedRuleContext(GeneralConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterConstraintSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitConstraintSpec(this);
        }
    }
}
class SubtypeConstraintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_subtypeConstraint;
    }
    elementSetSpecs() {
        return this.getTypedRuleContext(ElementSetSpecsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSubtypeConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSubtypeConstraint(this);
        }
    }
}
class ElementSetSpecsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_elementSetSpecs;
    }
    rootElementSetSpec() {
        return this.getTypedRuleContext(RootElementSetSpecContext, 0);
    }
    ;
    ELLIPSIS() {
        return this.getToken(grammar3rdParser.ELLIPSIS, 0);
    }
    ;
    additionalElementSetSpec() {
        return this.getTypedRuleContext(AdditionalElementSetSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterElementSetSpecs(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitElementSetSpecs(this);
        }
    }
}
class RootElementSetSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_rootElementSetSpec;
    }
    elementSetSpec() {
        return this.getTypedRuleContext(ElementSetSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterRootElementSetSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitRootElementSetSpec(this);
        }
    }
}
class AdditionalElementSetSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_additionalElementSetSpec;
    }
    elementSetSpec() {
        return this.getTypedRuleContext(ElementSetSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterAdditionalElementSetSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitAdditionalElementSetSpec(this);
        }
    }
}
class ElementSetSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_elementSetSpec;
    }
    unions() {
        return this.getTypedRuleContext(UnionsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterElementSetSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitElementSetSpec(this);
        }
    }
}
class UnionsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.intersections = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IntersectionsContext);
            }
            else {
                return this.getTypedRuleContext(IntersectionsContext, i);
            }
        };
        this.unionMark = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(UnionMarkContext);
            }
            else {
                return this.getTypedRuleContext(UnionMarkContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_unions;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterUnions(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitUnions(this);
        }
    }
}
class IntersectionsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_intersections;
    }
    intersectionElements() {
        return this.getTypedRuleContext(IntersectionElementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterIntersections(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitIntersections(this);
        }
    }
}
class IntersectionElementsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_intersectionElements;
    }
    elements() {
        return this.getTypedRuleContext(ElementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterIntersectionElements(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitIntersectionElements(this);
        }
    }
}
class UnionMarkContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_unionMark;
    }
    PIPE() {
        return this.getToken(grammar3rdParser.PIPE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterUnionMark(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitUnionMark(this);
        }
    }
}
class ElementsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_elements;
    }
    subtypeElements() {
        return this.getTypedRuleContext(SubtypeElementsContext, 0);
    }
    ;
    objectSetElements() {
        return this.getTypedRuleContext(ObjectSetElementsContext, 0);
    }
    ;
    L_PAREN() {
        return this.getToken(grammar3rdParser.L_PAREN, 0);
    }
    ;
    elementSetSpec() {
        return this.getTypedRuleContext(ElementSetSpecContext, 0);
    }
    ;
    R_PAREN() {
        return this.getToken(grammar3rdParser.R_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterElements(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitElements(this);
        }
    }
}
class SubtypeElementsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_subtypeElements;
    }
    singleValue() {
        return this.getTypedRuleContext(SingleValueContext, 0);
    }
    ;
    valueRange() {
        return this.getTypedRuleContext(ValueRangeContext, 0);
    }
    ;
    sizeConstraint() {
        return this.getTypedRuleContext(SizeConstraintContext, 0);
    }
    ;
    innerTypeConstraints() {
        return this.getTypedRuleContext(InnerTypeConstraintsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSubtypeElements(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSubtypeElements(this);
        }
    }
}
class SingleValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_singleValue;
    }
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSingleValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSingleValue(this);
        }
    }
}
class ValueRangeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_valueRange;
    }
    lowerEndpoint() {
        return this.getTypedRuleContext(LowerEndpointContext, 0);
    }
    ;
    RANGE_SEPARATOR() {
        return this.getToken(grammar3rdParser.RANGE_SEPARATOR, 0);
    }
    ;
    upperEndpoint() {
        return this.getTypedRuleContext(UpperEndpointContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterValueRange(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitValueRange(this);
        }
    }
}
class LowerEndpointContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_lowerEndpoint;
    }
    lowerEndValue() {
        return this.getTypedRuleContext(LowerEndValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterLowerEndpoint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitLowerEndpoint(this);
        }
    }
}
class UpperEndpointContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_upperEndpoint;
    }
    upperEndValue() {
        return this.getTypedRuleContext(UpperEndValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterUpperEndpoint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitUpperEndpoint(this);
        }
    }
}
class LowerEndValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_lowerEndValue;
    }
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    MIN_LITERAL() {
        return this.getToken(grammar3rdParser.MIN_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterLowerEndValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitLowerEndValue(this);
        }
    }
}
class UpperEndValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_upperEndValue;
    }
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    MAX_LITERAL() {
        return this.getToken(grammar3rdParser.MAX_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterUpperEndValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitUpperEndValue(this);
        }
    }
}
class SizeConstraintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_sizeConstraint;
    }
    SIZE_LITERAL() {
        return this.getToken(grammar3rdParser.SIZE_LITERAL, 0);
    }
    ;
    constraint() {
        return this.getTypedRuleContext(ConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSizeConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSizeConstraint(this);
        }
    }
}
class InnerTypeConstraintsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_innerTypeConstraints;
    }
    WITH_LITERAL() {
        return this.getToken(grammar3rdParser.WITH_LITERAL, 0);
    }
    ;
    COMPONENTS_LITERAL() {
        return this.getToken(grammar3rdParser.COMPONENTS_LITERAL, 0);
    }
    ;
    multipleTypeConstraints() {
        return this.getTypedRuleContext(MultipleTypeConstraintsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterInnerTypeConstraints(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitInnerTypeConstraints(this);
        }
    }
}
class MultipleTypeConstraintsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_multipleTypeConstraints;
    }
    partialSpecification() {
        return this.getTypedRuleContext(PartialSpecificationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterMultipleTypeConstraints(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitMultipleTypeConstraints(this);
        }
    }
}
class PartialSpecificationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_partialSpecification;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    ELLIPSIS() {
        return this.getToken(grammar3rdParser.ELLIPSIS, 0);
    }
    ;
    COMMA() {
        return this.getToken(grammar3rdParser.COMMA, 0);
    }
    ;
    typeConstraints() {
        return this.getTypedRuleContext(TypeConstraintsContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterPartialSpecification(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitPartialSpecification(this);
        }
    }
}
class TypeConstraintsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.namedConstraint = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NamedConstraintContext);
            }
            else {
                return this.getTypedRuleContext(NamedConstraintContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_typeConstraints;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterTypeConstraints(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitTypeConstraints(this);
        }
    }
}
class NamedConstraintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_namedConstraint;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    componentConstraint() {
        return this.getTypedRuleContext(ComponentConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterNamedConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitNamedConstraint(this);
        }
    }
}
class ComponentConstraintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_componentConstraint;
    }
    valueConstraint() {
        return this.getTypedRuleContext(ValueConstraintContext, 0);
    }
    ;
    presenceConstraint() {
        return this.getTypedRuleContext(PresenceConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterComponentConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitComponentConstraint(this);
        }
    }
}
class ValueConstraintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_valueConstraint;
    }
    constraint() {
        return this.getTypedRuleContext(ConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterValueConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitValueConstraint(this);
        }
    }
}
class PresenceConstraintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_presenceConstraint;
    }
    PRESENT_LITERAL() {
        return this.getToken(grammar3rdParser.PRESENT_LITERAL, 0);
    }
    ;
    ABSENT_LITERAL() {
        return this.getToken(grammar3rdParser.ABSENT_LITERAL, 0);
    }
    ;
    OPTIONAL_LITERAL() {
        return this.getToken(grammar3rdParser.OPTIONAL_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterPresenceConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitPresenceConstraint(this);
        }
    }
}
class ExceptionSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_exceptionSpec;
    }
    EXCLAM() {
        return this.getToken(grammar3rdParser.EXCLAM, 0);
    }
    ;
    exceptionIdentification() {
        return this.getTypedRuleContext(ExceptionIdentificationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterExceptionSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitExceptionSpec(this);
        }
    }
}
class ExceptionIdentificationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_exceptionIdentification;
    }
    signedNumber() {
        return this.getTypedRuleContext(SignedNumberContext, 0);
    }
    ;
    definedValue() {
        return this.getTypedRuleContext(DefinedValueContext, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    COLON() {
        return this.getToken(grammar3rdParser.COLON, 0);
    }
    ;
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterExceptionIdentification(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitExceptionIdentification(this);
        }
    }
}
class ObjectClassReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectClassReference;
    }
    Word() {
        return this.getToken(grammar3rdParser.Word, 0);
    }
    ;
    ObjectClassReference() {
        return this.getToken(grammar3rdParser.ObjectClassReference, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterObjectClassReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitObjectClassReference(this);
        }
    }
}
class ObjectSetReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectSetReference;
    }
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterObjectSetReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitObjectSetReference(this);
        }
    }
}
class ObjectReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectReference;
    }
    IdentifierL() {
        return this.getToken(grammar3rdParser.IdentifierL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterObjectReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitObjectReference(this);
        }
    }
}
class ValueFieldReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_valueFieldReference;
    }
    AMP() {
        return this.getToken(grammar3rdParser.AMP, 0);
    }
    ;
    IdentifierL() {
        return this.getToken(grammar3rdParser.IdentifierL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterValueFieldReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitValueFieldReference(this);
        }
    }
}
class WordContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_word;
    }
    Word() {
        return this.getToken(grammar3rdParser.Word, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterWord(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitWord(this);
        }
    }
}
class TypeFieldReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_typeFieldReference;
    }
    AMP() {
        return this.getToken(grammar3rdParser.AMP, 0);
    }
    ;
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterTypeFieldReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitTypeFieldReference(this);
        }
    }
}
class DefinedObjectClassContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedObjectClass;
    }
    objectClassReference() {
        return this.getTypedRuleContext(ObjectClassReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinedObjectClass(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinedObjectClass(this);
        }
    }
}
class DefinedObjectSetContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedObjectSet;
    }
    objectSetReference() {
        return this.getTypedRuleContext(ObjectSetReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinedObjectSet(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinedObjectSet(this);
        }
    }
}
class ObjectClassAssignmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectClassAssignment;
    }
    objectClassReference() {
        return this.getTypedRuleContext(ObjectClassReferenceContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    objectClass() {
        return this.getTypedRuleContext(ObjectClassContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterObjectClassAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitObjectClassAssignment(this);
        }
    }
}
class ObjectClassContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectClass;
    }
    objectClassDefn() {
        return this.getTypedRuleContext(ObjectClassDefnContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterObjectClass(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitObjectClass(this);
        }
    }
}
class ObjectClassDefnContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.fieldSpec = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(FieldSpecContext);
            }
            else {
                return this.getTypedRuleContext(FieldSpecContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectClassDefn;
    }
    CLASS_LITERAL() {
        return this.getToken(grammar3rdParser.CLASS_LITERAL, 0);
    }
    ;
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    withSyntaxSpec() {
        return this.getTypedRuleContext(WithSyntaxSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterObjectClassDefn(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitObjectClassDefn(this);
        }
    }
}
class WithSyntaxSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_withSyntaxSpec;
    }
    WITH_LITERAL() {
        return this.getToken(grammar3rdParser.WITH_LITERAL, 0);
    }
    ;
    SYNTAX_LITERAL() {
        return this.getToken(grammar3rdParser.SYNTAX_LITERAL, 0);
    }
    ;
    syntaxList() {
        return this.getTypedRuleContext(SyntaxListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterWithSyntaxSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitWithSyntaxSpec(this);
        }
    }
}
class FieldSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_fieldSpec;
    }
    typeFieldSpec() {
        return this.getTypedRuleContext(TypeFieldSpecContext, 0);
    }
    ;
    fixedTypeValueFieldSpec() {
        return this.getTypedRuleContext(FixedTypeValueFieldSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterFieldSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitFieldSpec(this);
        }
    }
}
class TypeFieldSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_typeFieldSpec;
    }
    typeFieldReference() {
        return this.getTypedRuleContext(TypeFieldReferenceContext, 0);
    }
    ;
    typeOptionalitySpec() {
        return this.getTypedRuleContext(TypeOptionalitySpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterTypeFieldSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitTypeFieldSpec(this);
        }
    }
}
class TypeOptionalitySpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_typeOptionalitySpec;
    }
    OPTIONAL_LITERAL() {
        return this.getToken(grammar3rdParser.OPTIONAL_LITERAL, 0);
    }
    ;
    DEFAULT_LITERAL() {
        return this.getToken(grammar3rdParser.DEFAULT_LITERAL, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterTypeOptionalitySpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitTypeOptionalitySpec(this);
        }
    }
}
class FixedTypeValueFieldSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_fixedTypeValueFieldSpec;
    }
    valueFieldReference() {
        return this.getTypedRuleContext(ValueFieldReferenceContext, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    UNIQUE_LITERAL() {
        return this.getToken(grammar3rdParser.UNIQUE_LITERAL, 0);
    }
    ;
    valueOptionalitySpec() {
        return this.getTypedRuleContext(ValueOptionalitySpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterFixedTypeValueFieldSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitFixedTypeValueFieldSpec(this);
        }
    }
}
class ValueOptionalitySpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_valueOptionalitySpec;
    }
    OPTIONAL_LITERAL() {
        return this.getToken(grammar3rdParser.OPTIONAL_LITERAL, 0);
    }
    ;
    DEFAULT_LITERAL() {
        return this.getToken(grammar3rdParser.DEFAULT_LITERAL, 0);
    }
    ;
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterValueOptionalitySpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitValueOptionalitySpec(this);
        }
    }
}
class PrimitiveFieldNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_primitiveFieldName;
    }
    typeFieldReference() {
        return this.getTypedRuleContext(TypeFieldReferenceContext, 0);
    }
    ;
    valueFieldReference() {
        return this.getTypedRuleContext(ValueFieldReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterPrimitiveFieldName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitPrimitiveFieldName(this);
        }
    }
}
class FieldNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.primitiveFieldName = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(PrimitiveFieldNameContext);
            }
            else {
                return this.getTypedRuleContext(PrimitiveFieldNameContext, i);
            }
        };
        this.PERIOD = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.PERIOD);
            }
            else {
                return this.getToken(grammar3rdParser.PERIOD, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_fieldName;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterFieldName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitFieldName(this);
        }
    }
}
class SyntaxListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.tokenOrGroupSpec = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TokenOrGroupSpecContext);
            }
            else {
                return this.getTypedRuleContext(TokenOrGroupSpecContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_syntaxList;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSyntaxList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSyntaxList(this);
        }
    }
}
class TokenOrGroupSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_tokenOrGroupSpec;
    }
    requiredToken() {
        return this.getTypedRuleContext(RequiredTokenContext, 0);
    }
    ;
    optionalGroup() {
        return this.getTypedRuleContext(OptionalGroupContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterTokenOrGroupSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitTokenOrGroupSpec(this);
        }
    }
}
class OptionalGroupContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.tokenOrGroupSpec = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TokenOrGroupSpecContext);
            }
            else {
                return this.getTypedRuleContext(TokenOrGroupSpecContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_optionalGroup;
    }
    L_BRACKET() {
        return this.getToken(grammar3rdParser.L_BRACKET, 0);
    }
    ;
    R_BRACKET() {
        return this.getToken(grammar3rdParser.R_BRACKET, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterOptionalGroup(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitOptionalGroup(this);
        }
    }
}
class RequiredTokenContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_requiredToken;
    }
    literal() {
        return this.getTypedRuleContext(LiteralContext, 0);
    }
    ;
    primitiveFieldName() {
        return this.getTypedRuleContext(PrimitiveFieldNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterRequiredToken(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitRequiredToken(this);
        }
    }
}
class LiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_literal;
    }
    word() {
        return this.getTypedRuleContext(WordContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitLiteral(this);
        }
    }
}
class ObjectAssignmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectAssignment;
    }
    objectReference() {
        return this.getTypedRuleContext(ObjectReferenceContext, 0);
    }
    ;
    definedObjectClass() {
        return this.getTypedRuleContext(DefinedObjectClassContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    object() {
        return this.getTypedRuleContext(ObjectContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterObjectAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitObjectAssignment(this);
        }
    }
}
class ObjectContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_object;
    }
    objectDefn() {
        return this.getTypedRuleContext(ObjectDefnContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterObject(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitObject(this);
        }
    }
}
class ObjectDefnContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectDefn;
    }
    definedSyntax() {
        return this.getTypedRuleContext(DefinedSyntaxContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterObjectDefn(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitObjectDefn(this);
        }
    }
}
class DefinedSyntaxContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.definedSyntaxToken = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(DefinedSyntaxTokenContext);
            }
            else {
                return this.getTypedRuleContext(DefinedSyntaxTokenContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedSyntax;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinedSyntax(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinedSyntax(this);
        }
    }
}
class DefinedSyntaxTokenContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedSyntaxToken;
    }
    literal() {
        return this.getTypedRuleContext(LiteralContext, 0);
    }
    ;
    setting() {
        return this.getTypedRuleContext(SettingContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinedSyntaxToken(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinedSyntaxToken(this);
        }
    }
}
class SettingContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_setting;
    }
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSetting(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSetting(this);
        }
    }
}
class ObjectSetAssignmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectSetAssignment;
    }
    objectSetReference() {
        return this.getTypedRuleContext(ObjectSetReferenceContext, 0);
    }
    ;
    definedObjectClass() {
        return this.getTypedRuleContext(DefinedObjectClassContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    objectSet() {
        return this.getTypedRuleContext(ObjectSetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterObjectSetAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitObjectSetAssignment(this);
        }
    }
}
class ObjectSetContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectSet;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    objectSetSpec() {
        return this.getTypedRuleContext(ObjectSetSpecContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterObjectSet(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitObjectSet(this);
        }
    }
}
class ObjectSetSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectSetSpec;
    }
    rootElementSetSpec() {
        return this.getTypedRuleContext(RootElementSetSpecContext, 0);
    }
    ;
    ELLIPSIS() {
        return this.getToken(grammar3rdParser.ELLIPSIS, 0);
    }
    ;
    additionalElementSetSpec() {
        return this.getTypedRuleContext(AdditionalElementSetSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterObjectSetSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitObjectSetSpec(this);
        }
    }
}
class ObjectSetElementsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectSetElements;
    }
    object() {
        return this.getTypedRuleContext(ObjectContext, 0);
    }
    ;
    definedObjectSet() {
        return this.getTypedRuleContext(DefinedObjectSetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterObjectSetElements(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitObjectSetElements(this);
        }
    }
}
class ObjectClassFieldTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_objectClassFieldType;
    }
    definedObjectClass() {
        return this.getTypedRuleContext(DefinedObjectClassContext, 0);
    }
    ;
    PERIOD() {
        return this.getToken(grammar3rdParser.PERIOD, 0);
    }
    ;
    fieldName() {
        return this.getTypedRuleContext(FieldNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterObjectClassFieldType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitObjectClassFieldType(this);
        }
    }
}
class GeneralConstraintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_generalConstraint;
    }
    tableConstraint() {
        return this.getTypedRuleContext(TableConstraintContext, 0);
    }
    ;
    contentsConstraint() {
        return this.getTypedRuleContext(ContentsConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterGeneralConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitGeneralConstraint(this);
        }
    }
}
class TableConstraintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_tableConstraint;
    }
    simpleTableConstraint() {
        return this.getTypedRuleContext(SimpleTableConstraintContext, 0);
    }
    ;
    componentRelationConstraint() {
        return this.getTypedRuleContext(ComponentRelationConstraintContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterTableConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitTableConstraint(this);
        }
    }
}
class SimpleTableConstraintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_simpleTableConstraint;
    }
    objectSet() {
        return this.getTypedRuleContext(ObjectSetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSimpleTableConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSimpleTableConstraint(this);
        }
    }
}
class ComponentRelationConstraintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.L_BRACE = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.L_BRACE);
            }
            else {
                return this.getToken(grammar3rdParser.L_BRACE, i);
            }
        };
        this.R_BRACE = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.R_BRACE);
            }
            else {
                return this.getToken(grammar3rdParser.R_BRACE, i);
            }
        };
        this.atNotation = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AtNotationContext);
            }
            else {
                return this.getTypedRuleContext(AtNotationContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_componentRelationConstraint;
    }
    definedObjectSet() {
        return this.getTypedRuleContext(DefinedObjectSetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterComponentRelationConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitComponentRelationConstraint(this);
        }
    }
}
class AtNotationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_atNotation;
    }
    AT() {
        return this.getToken(grammar3rdParser.AT, 0);
    }
    ;
    componentIdList() {
        return this.getTypedRuleContext(ComponentIdListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterAtNotation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitAtNotation(this);
        }
    }
}
class ComponentIdListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.identifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentifierContext);
            }
            else {
                return this.getTypedRuleContext(IdentifierContext, i);
            }
        };
        this.PERIOD = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.PERIOD);
            }
            else {
                return this.getToken(grammar3rdParser.PERIOD, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_componentIdList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterComponentIdList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitComponentIdList(this);
        }
    }
}
class ContentsConstraintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_contentsConstraint;
    }
    CONTAINING_LITERAL() {
        return this.getToken(grammar3rdParser.CONTAINING_LITERAL, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterContentsConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitContentsConstraint(this);
        }
    }
}
class ParameterizedAssignmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_parameterizedAssignment;
    }
    parameterizedTypeAssignment() {
        return this.getTypedRuleContext(ParameterizedTypeAssignmentContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterParameterizedAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitParameterizedAssignment(this);
        }
    }
}
class ParameterizedTypeAssignmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_parameterizedTypeAssignment;
    }
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterParameterizedTypeAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitParameterizedTypeAssignment(this);
        }
    }
}
class ParameterListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parameter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ParameterContext);
            }
            else {
                return this.getTypedRuleContext(ParameterContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_parameterList;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterParameterList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitParameterList(this);
        }
    }
}
class ParameterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_parameter;
    }
    paramGovernor() {
        return this.getTypedRuleContext(ParamGovernorContext, 0);
    }
    ;
    COLON() {
        return this.getToken(grammar3rdParser.COLON, 0);
    }
    ;
    dummyReference() {
        return this.getTypedRuleContext(DummyReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterParameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitParameter(this);
        }
    }
}
class ParamGovernorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_paramGovernor;
    }
    governor() {
        return this.getTypedRuleContext(GovernorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterParamGovernor(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitParamGovernor(this);
        }
    }
}
class GovernorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_governor;
    }
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    definedObjectClass() {
        return this.getTypedRuleContext(DefinedObjectClassContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterGovernor(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitGovernor(this);
        }
    }
}
class DummyReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_dummyReference;
    }
    reference() {
        return this.getTypedRuleContext(ReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDummyReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDummyReference(this);
        }
    }
}
class ParameterizedReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_parameterizedReference;
    }
    reference() {
        return this.getTypedRuleContext(ReferenceContext, 0);
    }
    ;
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterParameterizedReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitParameterizedReference(this);
        }
    }
}
class ParameterizedTypeAmbiguousContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_parameterizedTypeAmbiguous;
    }
    simpleDefinedType() {
        return this.getTypedRuleContext(SimpleDefinedTypeContext, 0);
    }
    ;
    actualParameterList() {
        return this.getTypedRuleContext(ActualParameterListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterParameterizedTypeAmbiguous(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitParameterizedTypeAmbiguous(this);
        }
    }
}
class SimpleDefinedTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_simpleDefinedType;
    }
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSimpleDefinedType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSimpleDefinedType(this);
        }
    }
}
class ActualParameterListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.actualParameter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ActualParameterContext);
            }
            else {
                return this.getTypedRuleContext(ActualParameterContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_actualParameterList;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterActualParameterList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitActualParameterList(this);
        }
    }
}
class ActualParameterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_actualParameter;
    }
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    ;
    objectSet() {
        return this.getTypedRuleContext(ObjectSetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterActualParameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitActualParameter(this);
        }
    }
}
class EncodingObjectReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObjectReference;
    }
    IdentifierL() {
        return this.getToken(grammar3rdParser.IdentifierL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEncodingObjectReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEncodingObjectReference(this);
        }
    }
}
class EncodingObjectSetReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObjectSetReference;
    }
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEncodingObjectSetReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEncodingObjectSetReference(this);
        }
    }
}
class EncodingClassReferenceVariantContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingClassReferenceVariant;
    }
    NUMBER_SIGN() {
        return this.getToken(grammar3rdParser.NUMBER_SIGN, 0);
    }
    ;
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEncodingClassReferenceVariant(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEncodingClassReferenceVariant(this);
        }
    }
}
class DefinedOrBuiltinEncodingClassContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedOrBuiltinEncodingClass;
    }
    builtinEncodingClassReference() {
        return this.getTypedRuleContext(BuiltinEncodingClassReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinedOrBuiltinEncodingClass(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinedOrBuiltinEncodingClass(this);
        }
    }
}
class DefinedEncodingObjectContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedEncodingObject;
    }
    encodingObjectReference() {
        return this.getTypedRuleContext(EncodingObjectReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinedEncodingObject(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinedEncodingObject(this);
        }
    }
}
class DefinedEncodingObjectSetContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedEncodingObjectSet;
    }
    encodingObjectSetReference() {
        return this.getTypedRuleContext(EncodingObjectSetReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinedEncodingObjectSet(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinedEncodingObjectSet(this);
        }
    }
}
class DefinedOrBuiltinEncodingObjectSetContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_definedOrBuiltinEncodingObjectSet;
    }
    definedEncodingObjectSet() {
        return this.getTypedRuleContext(DefinedEncodingObjectSetContext, 0);
    }
    ;
    builtinEncodingObjectSetReference() {
        return this.getTypedRuleContext(BuiltinEncodingObjectSetReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDefinedOrBuiltinEncodingObjectSet(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDefinedOrBuiltinEncodingObjectSet(this);
        }
    }
}
class ElmModuleBodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_elmModuleBody;
    }
    encodingApplicationList() {
        return this.getTypedRuleContext(EncodingApplicationListContext, 0);
    }
    ;
    imports() {
        return this.getTypedRuleContext(ImportsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterElmModuleBody(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitElmModuleBody(this);
        }
    }
}
class EncodingApplicationListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.encodingApplication = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EncodingApplicationContext);
            }
            else {
                return this.getTypedRuleContext(EncodingApplicationContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingApplicationList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEncodingApplicationList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEncodingApplicationList(this);
        }
    }
}
class EncodingApplicationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.simpleDefinedEncodingClass = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SimpleDefinedEncodingClassContext);
            }
            else {
                return this.getTypedRuleContext(SimpleDefinedEncodingClassContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(grammar3rdParser.COMMA);
            }
            else {
                return this.getToken(grammar3rdParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingApplication;
    }
    ENCODE_LITERAL() {
        return this.getToken(grammar3rdParser.ENCODE_LITERAL, 0);
    }
    ;
    combinedEncodings() {
        return this.getTypedRuleContext(CombinedEncodingsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEncodingApplication(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEncodingApplication(this);
        }
    }
}
class CombinedEncodingsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_combinedEncodings;
    }
    WITH_LITERAL() {
        return this.getToken(grammar3rdParser.WITH_LITERAL, 0);
    }
    ;
    primaryEncodings() {
        return this.getTypedRuleContext(PrimaryEncodingsContext, 0);
    }
    ;
    completionClause() {
        return this.getTypedRuleContext(CompletionClauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterCombinedEncodings(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitCombinedEncodings(this);
        }
    }
}
class CompletionClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_completionClause;
    }
    COMPLETED_LITERAL() {
        return this.getToken(grammar3rdParser.COMPLETED_LITERAL, 0);
    }
    ;
    BY_LITERAL() {
        return this.getToken(grammar3rdParser.BY_LITERAL, 0);
    }
    ;
    secondaryEncodings() {
        return this.getTypedRuleContext(SecondaryEncodingsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterCompletionClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitCompletionClause(this);
        }
    }
}
class PrimaryEncodingsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_primaryEncodings;
    }
    encodingObjectSet() {
        return this.getTypedRuleContext(EncodingObjectSetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterPrimaryEncodings(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitPrimaryEncodings(this);
        }
    }
}
class SecondaryEncodingsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_secondaryEncodings;
    }
    encodingObjectSet() {
        return this.getTypedRuleContext(EncodingObjectSetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSecondaryEncodings(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSecondaryEncodings(this);
        }
    }
}
class EdmModuleBodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_edmModuleBody;
    }
    exports() {
        return this.getTypedRuleContext(ExportsContext, 0);
    }
    ;
    imports() {
        return this.getTypedRuleContext(ImportsContext, 0);
    }
    ;
    edmAssignmentList() {
        return this.getTypedRuleContext(EdmAssignmentListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEdmModuleBody(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEdmModuleBody(this);
        }
    }
}
class EdmAssignmentListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.edmAssignment = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EdmAssignmentContext);
            }
            else {
                return this.getTypedRuleContext(EdmAssignmentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_edmAssignmentList;
    }
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEdmAssignmentList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEdmAssignmentList(this);
        }
    }
}
class EdmAssignmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_edmAssignment;
    }
    encodingObjectAssignment() {
        return this.getTypedRuleContext(EncodingObjectAssignmentContext, 0);
    }
    ;
    encodingObjectSetAssignment() {
        return this.getTypedRuleContext(EncodingObjectSetAssignmentContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEdmAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEdmAssignment(this);
        }
    }
}
class BuiltinEncodingClassReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_builtinEncodingClassReference;
    }
    encodingProcedureClassReference() {
        return this.getTypedRuleContext(EncodingProcedureClassReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterBuiltinEncodingClassReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitBuiltinEncodingClassReference(this);
        }
    }
}
class EncodingProcedureClassReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingProcedureClassReference;
    }
    NUMBER_SIGN() {
        return this.getToken(grammar3rdParser.NUMBER_SIGN, 0);
    }
    ;
    OUTER_LITERAL() {
        return this.getToken(grammar3rdParser.OUTER_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEncodingProcedureClassReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEncodingProcedureClassReference(this);
        }
    }
}
class EncodingObjectAssignmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObjectAssignment;
    }
    encodingObjectReference() {
        return this.getTypedRuleContext(EncodingObjectReferenceContext, 0);
    }
    ;
    definedOrBuiltinEncodingClass() {
        return this.getTypedRuleContext(DefinedOrBuiltinEncodingClassContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    encodingObject() {
        return this.getTypedRuleContext(EncodingObjectContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEncodingObjectAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEncodingObjectAssignment(this);
        }
    }
}
class EncodingObjectContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObject;
    }
    differentialEncodeDecodeObjectVariant() {
        return this.getTypedRuleContext(DifferentialEncodeDecodeObjectVariantContext, 0);
    }
    ;
    definedSyntax() {
        return this.getTypedRuleContext(DefinedSyntaxContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEncodingObject(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEncodingObject(this);
        }
    }
}
class DifferentialEncodeDecodeObjectVariantContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_differentialEncodeDecodeObjectVariant;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    specForEncoding() {
        return this.getTypedRuleContext(SpecForEncodingContext, 0);
    }
    ;
    DECODE_LITERAL() {
        return this.getToken(grammar3rdParser.DECODE_LITERAL, 0);
    }
    ;
    AS_LITERAL() {
        return this.getToken(grammar3rdParser.AS_LITERAL, 0);
    }
    ;
    IF_LITERAL() {
        return this.getToken(grammar3rdParser.IF_LITERAL, 0);
    }
    ;
    specForDecoders() {
        return this.getTypedRuleContext(SpecForDecodersContext, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    ENCODE_DECODE_LITERAL() {
        return this.getToken(grammar3rdParser.ENCODE_DECODE_LITERAL, 0);
    }
    ;
    ENCODER_DECODER_LITERAL() {
        return this.getToken(grammar3rdParser.ENCODER_DECODER_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterDifferentialEncodeDecodeObjectVariant(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitDifferentialEncodeDecodeObjectVariant(this);
        }
    }
}
class SpecForEncodingContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_specForEncoding;
    }
    encodingObject() {
        return this.getTypedRuleContext(EncodingObjectContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSpecForEncoding(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSpecForEncoding(this);
        }
    }
}
class SpecForDecodersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_specForDecoders;
    }
    encodingObject() {
        return this.getTypedRuleContext(EncodingObjectContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSpecForDecoders(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSpecForDecoders(this);
        }
    }
}
class EncodingObjectSetAssignmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObjectSetAssignment;
    }
    encodingObjectSetReference() {
        return this.getTypedRuleContext(EncodingObjectSetReferenceContext, 0);
    }
    ;
    NUMBER_SIGN() {
        return this.getToken(grammar3rdParser.NUMBER_SIGN, 0);
    }
    ;
    ENCODINGS_LITERAL() {
        return this.getToken(grammar3rdParser.ENCODINGS_LITERAL, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(grammar3rdParser.ASSIGNMENT, 0);
    }
    ;
    encodingObjectSet() {
        return this.getTypedRuleContext(EncodingObjectSetContext, 0);
    }
    ;
    completionClause() {
        return this.getTypedRuleContext(CompletionClauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEncodingObjectSetAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEncodingObjectSetAssignment(this);
        }
    }
}
class EncodingObjectSetContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObjectSet;
    }
    definedOrBuiltinEncodingObjectSet() {
        return this.getTypedRuleContext(DefinedOrBuiltinEncodingObjectSetContext, 0);
    }
    ;
    encodingObjectSetSpec() {
        return this.getTypedRuleContext(EncodingObjectSetSpecContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEncodingObjectSet(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEncodingObjectSet(this);
        }
    }
}
class EncodingObjectSetSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.encodingObjects = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EncodingObjectsContext);
            }
            else {
                return this.getTypedRuleContext(EncodingObjectsContext, i);
            }
        };
        this.unionMark = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(UnionMarkContext);
            }
            else {
                return this.getTypedRuleContext(UnionMarkContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObjectSetSpec;
    }
    L_BRACE() {
        return this.getToken(grammar3rdParser.L_BRACE, 0);
    }
    ;
    R_BRACE() {
        return this.getToken(grammar3rdParser.R_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEncodingObjectSetSpec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEncodingObjectSetSpec(this);
        }
    }
}
class EncodingObjectsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_encodingObjects;
    }
    definedEncodingObject() {
        return this.getTypedRuleContext(DefinedEncodingObjectContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterEncodingObjects(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitEncodingObjects(this);
        }
    }
}
class BuiltinEncodingObjectSetReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_builtinEncodingObjectSetReference;
    }
    PER_BASIC_UNALIGNED_LITERAL() {
        return this.getToken(grammar3rdParser.PER_BASIC_UNALIGNED_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterBuiltinEncodingObjectSetReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitBuiltinEncodingObjectSetReference(this);
        }
    }
}
class SimpleDefinedEncodingClassContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = grammar3rdParser.RULE_simpleDefinedEncodingClass;
    }
    encodingClassReferenceVariant() {
        return this.getTypedRuleContext(EncodingClassReferenceVariantContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.enterSimpleDefinedEncodingClass(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof grammar3rdListener_js_1.default) {
            listener.exitSimpleDefinedEncodingClass(this);
        }
    }
}
grammar3rdParser.ModuleDefinitionsContext = ModuleDefinitionsContext;
grammar3rdParser.TypeReferenceContext = TypeReferenceContext;
grammar3rdParser.IdentifierContext = IdentifierContext;
grammar3rdParser.ValueReferenceContext = ValueReferenceContext;
grammar3rdParser.ModuleReferenceContext = ModuleReferenceContext;
grammar3rdParser.ModuleDefinitionContext = ModuleDefinitionContext;
grammar3rdParser.ElmDefinitionContext = ElmDefinitionContext;
grammar3rdParser.EdmDefinitionContext = EdmDefinitionContext;
grammar3rdParser.ModuleIdentifierContext = ModuleIdentifierContext;
grammar3rdParser.DefinitiveIdentificationContext = DefinitiveIdentificationContext;
grammar3rdParser.DefinitiveOidContext = DefinitiveOidContext;
grammar3rdParser.DefinitiveObjIdComponentListContext = DefinitiveObjIdComponentListContext;
grammar3rdParser.DefinitiveObjIdComponentContext = DefinitiveObjIdComponentContext;
grammar3rdParser.DefinitiveNameAndNumberFormContext = DefinitiveNameAndNumberFormContext;
grammar3rdParser.DefinitiveNumberFormContext = DefinitiveNumberFormContext;
grammar3rdParser.TagDefaultContext = TagDefaultContext;
grammar3rdParser.ModuleBodyContext = ModuleBodyContext;
grammar3rdParser.ExportsContext = ExportsContext;
grammar3rdParser.SymbolsExportedContext = SymbolsExportedContext;
grammar3rdParser.ImportsContext = ImportsContext;
grammar3rdParser.SymbolsImportedContext = SymbolsImportedContext;
grammar3rdParser.SymbolsFromModuleListContext = SymbolsFromModuleListContext;
grammar3rdParser.SymbolsFromModuleContext = SymbolsFromModuleContext;
grammar3rdParser.GlobalModuleReferenceContext = GlobalModuleReferenceContext;
grammar3rdParser.SymbolListContext = SymbolListContext;
grammar3rdParser.SymbolContext = SymbolContext;
grammar3rdParser.ReferenceContext = ReferenceContext;
grammar3rdParser.AssignmentListContext = AssignmentListContext;
grammar3rdParser.AssignmentContext = AssignmentContext;
grammar3rdParser.DefinedTypeContext = DefinedTypeContext;
grammar3rdParser.DefinedValueContext = DefinedValueContext;
grammar3rdParser.ExternalTypeReferenceContext = ExternalTypeReferenceContext;
grammar3rdParser.ExternalValueReferenceContext = ExternalValueReferenceContext;
grammar3rdParser.TypeAssignmentContext = TypeAssignmentContext;
grammar3rdParser.ValueAssignmentContext = ValueAssignmentContext;
grammar3rdParser.TypeContext = TypeContext;
grammar3rdParser.BuiltinTypeContext = BuiltinTypeContext;
grammar3rdParser.ReferencedTypeContext = ReferencedTypeContext;
grammar3rdParser.NamedTypeContext = NamedTypeContext;
grammar3rdParser.ValueContext = ValueContext;
grammar3rdParser.BuiltinValueContext = BuiltinValueContext;
grammar3rdParser.BooleanTypeContext = BooleanTypeContext;
grammar3rdParser.IntegerTypeContext = IntegerTypeContext;
grammar3rdParser.NamedNumberListContext = NamedNumberListContext;
grammar3rdParser.NamedNumberContext = NamedNumberContext;
grammar3rdParser.SignedNumberContext = SignedNumberContext;
grammar3rdParser.IntegerValueContext = IntegerValueContext;
grammar3rdParser.EnumeratedTypeContext = EnumeratedTypeContext;
grammar3rdParser.EnumerationsContext = EnumerationsContext;
grammar3rdParser.RootEnumerationContext = RootEnumerationContext;
grammar3rdParser.AdditionalEnumerationContext = AdditionalEnumerationContext;
grammar3rdParser.EnumerationContext = EnumerationContext;
grammar3rdParser.EnumerationItemContext = EnumerationItemContext;
grammar3rdParser.BitStringTypeContext = BitStringTypeContext;
grammar3rdParser.NamedBitListContext = NamedBitListContext;
grammar3rdParser.NamedBitContext = NamedBitContext;
grammar3rdParser.BitStringValueContext = BitStringValueContext;
grammar3rdParser.OctetStringTypeContext = OctetStringTypeContext;
grammar3rdParser.NullTypeContext = NullTypeContext;
grammar3rdParser.SequenceTypeContext = SequenceTypeContext;
grammar3rdParser.ExtensionAndExceptionContext = ExtensionAndExceptionContext;
grammar3rdParser.OptionalExtensionMarkerContext = OptionalExtensionMarkerContext;
grammar3rdParser.ComponentTypeListsContext = ComponentTypeListsContext;
grammar3rdParser.RootComponentTypeListContext = RootComponentTypeListContext;
grammar3rdParser.ExtensionEndMarkerContext = ExtensionEndMarkerContext;
grammar3rdParser.ExtensionAdditionsContext = ExtensionAdditionsContext;
grammar3rdParser.ExtensionAdditionListContext = ExtensionAdditionListContext;
grammar3rdParser.ExtensionAdditionContext = ExtensionAdditionContext;
grammar3rdParser.ExtensionAdditionGroupContext = ExtensionAdditionGroupContext;
grammar3rdParser.ComponentTypeListContext = ComponentTypeListContext;
grammar3rdParser.ComponentTypeContext = ComponentTypeContext;
grammar3rdParser.SequenceOfTypeContext = SequenceOfTypeContext;
grammar3rdParser.ChoiceTypeContext = ChoiceTypeContext;
grammar3rdParser.AlternativeTypeListsContext = AlternativeTypeListsContext;
grammar3rdParser.RootAlternativeTypeListContext = RootAlternativeTypeListContext;
grammar3rdParser.ExtensionAdditionAlternativesContext = ExtensionAdditionAlternativesContext;
grammar3rdParser.ExtensionAdditionAlternativesListContext = ExtensionAdditionAlternativesListContext;
grammar3rdParser.ExtensionAdditionAlternativeContext = ExtensionAdditionAlternativeContext;
grammar3rdParser.ExtensionAdditionAlternativesGroupContext = ExtensionAdditionAlternativesGroupContext;
grammar3rdParser.AlternativeTypeListContext = AlternativeTypeListContext;
grammar3rdParser.ObjectIdentifierTypeContext = ObjectIdentifierTypeContext;
grammar3rdParser.CharacterStringTypeContext = CharacterStringTypeContext;
grammar3rdParser.RestrictedCharacterStringTypeContext = RestrictedCharacterStringTypeContext;
grammar3rdParser.UsefulTypeContext = UsefulTypeContext;
grammar3rdParser.ConstrainedTypeContext = ConstrainedTypeContext;
grammar3rdParser.TypeWithConstraintContext = TypeWithConstraintContext;
grammar3rdParser.ConstraintContext = ConstraintContext;
grammar3rdParser.ConstraintSpecContext = ConstraintSpecContext;
grammar3rdParser.SubtypeConstraintContext = SubtypeConstraintContext;
grammar3rdParser.ElementSetSpecsContext = ElementSetSpecsContext;
grammar3rdParser.RootElementSetSpecContext = RootElementSetSpecContext;
grammar3rdParser.AdditionalElementSetSpecContext = AdditionalElementSetSpecContext;
grammar3rdParser.ElementSetSpecContext = ElementSetSpecContext;
grammar3rdParser.UnionsContext = UnionsContext;
grammar3rdParser.IntersectionsContext = IntersectionsContext;
grammar3rdParser.IntersectionElementsContext = IntersectionElementsContext;
grammar3rdParser.UnionMarkContext = UnionMarkContext;
grammar3rdParser.ElementsContext = ElementsContext;
grammar3rdParser.SubtypeElementsContext = SubtypeElementsContext;
grammar3rdParser.SingleValueContext = SingleValueContext;
grammar3rdParser.ValueRangeContext = ValueRangeContext;
grammar3rdParser.LowerEndpointContext = LowerEndpointContext;
grammar3rdParser.UpperEndpointContext = UpperEndpointContext;
grammar3rdParser.LowerEndValueContext = LowerEndValueContext;
grammar3rdParser.UpperEndValueContext = UpperEndValueContext;
grammar3rdParser.SizeConstraintContext = SizeConstraintContext;
grammar3rdParser.InnerTypeConstraintsContext = InnerTypeConstraintsContext;
grammar3rdParser.MultipleTypeConstraintsContext = MultipleTypeConstraintsContext;
grammar3rdParser.PartialSpecificationContext = PartialSpecificationContext;
grammar3rdParser.TypeConstraintsContext = TypeConstraintsContext;
grammar3rdParser.NamedConstraintContext = NamedConstraintContext;
grammar3rdParser.ComponentConstraintContext = ComponentConstraintContext;
grammar3rdParser.ValueConstraintContext = ValueConstraintContext;
grammar3rdParser.PresenceConstraintContext = PresenceConstraintContext;
grammar3rdParser.ExceptionSpecContext = ExceptionSpecContext;
grammar3rdParser.ExceptionIdentificationContext = ExceptionIdentificationContext;
grammar3rdParser.ObjectClassReferenceContext = ObjectClassReferenceContext;
grammar3rdParser.ObjectSetReferenceContext = ObjectSetReferenceContext;
grammar3rdParser.ObjectReferenceContext = ObjectReferenceContext;
grammar3rdParser.ValueFieldReferenceContext = ValueFieldReferenceContext;
grammar3rdParser.WordContext = WordContext;
grammar3rdParser.TypeFieldReferenceContext = TypeFieldReferenceContext;
grammar3rdParser.DefinedObjectClassContext = DefinedObjectClassContext;
grammar3rdParser.DefinedObjectSetContext = DefinedObjectSetContext;
grammar3rdParser.ObjectClassAssignmentContext = ObjectClassAssignmentContext;
grammar3rdParser.ObjectClassContext = ObjectClassContext;
grammar3rdParser.ObjectClassDefnContext = ObjectClassDefnContext;
grammar3rdParser.WithSyntaxSpecContext = WithSyntaxSpecContext;
grammar3rdParser.FieldSpecContext = FieldSpecContext;
grammar3rdParser.TypeFieldSpecContext = TypeFieldSpecContext;
grammar3rdParser.TypeOptionalitySpecContext = TypeOptionalitySpecContext;
grammar3rdParser.FixedTypeValueFieldSpecContext = FixedTypeValueFieldSpecContext;
grammar3rdParser.ValueOptionalitySpecContext = ValueOptionalitySpecContext;
grammar3rdParser.PrimitiveFieldNameContext = PrimitiveFieldNameContext;
grammar3rdParser.FieldNameContext = FieldNameContext;
grammar3rdParser.SyntaxListContext = SyntaxListContext;
grammar3rdParser.TokenOrGroupSpecContext = TokenOrGroupSpecContext;
grammar3rdParser.OptionalGroupContext = OptionalGroupContext;
grammar3rdParser.RequiredTokenContext = RequiredTokenContext;
grammar3rdParser.LiteralContext = LiteralContext;
grammar3rdParser.ObjectAssignmentContext = ObjectAssignmentContext;
grammar3rdParser.ObjectContext = ObjectContext;
grammar3rdParser.ObjectDefnContext = ObjectDefnContext;
grammar3rdParser.DefinedSyntaxContext = DefinedSyntaxContext;
grammar3rdParser.DefinedSyntaxTokenContext = DefinedSyntaxTokenContext;
grammar3rdParser.SettingContext = SettingContext;
grammar3rdParser.ObjectSetAssignmentContext = ObjectSetAssignmentContext;
grammar3rdParser.ObjectSetContext = ObjectSetContext;
grammar3rdParser.ObjectSetSpecContext = ObjectSetSpecContext;
grammar3rdParser.ObjectSetElementsContext = ObjectSetElementsContext;
grammar3rdParser.ObjectClassFieldTypeContext = ObjectClassFieldTypeContext;
grammar3rdParser.GeneralConstraintContext = GeneralConstraintContext;
grammar3rdParser.TableConstraintContext = TableConstraintContext;
grammar3rdParser.SimpleTableConstraintContext = SimpleTableConstraintContext;
grammar3rdParser.ComponentRelationConstraintContext = ComponentRelationConstraintContext;
grammar3rdParser.AtNotationContext = AtNotationContext;
grammar3rdParser.ComponentIdListContext = ComponentIdListContext;
grammar3rdParser.ContentsConstraintContext = ContentsConstraintContext;
grammar3rdParser.ParameterizedAssignmentContext = ParameterizedAssignmentContext;
grammar3rdParser.ParameterizedTypeAssignmentContext = ParameterizedTypeAssignmentContext;
grammar3rdParser.ParameterListContext = ParameterListContext;
grammar3rdParser.ParameterContext = ParameterContext;
grammar3rdParser.ParamGovernorContext = ParamGovernorContext;
grammar3rdParser.GovernorContext = GovernorContext;
grammar3rdParser.DummyReferenceContext = DummyReferenceContext;
grammar3rdParser.ParameterizedReferenceContext = ParameterizedReferenceContext;
grammar3rdParser.ParameterizedTypeAmbiguousContext = ParameterizedTypeAmbiguousContext;
grammar3rdParser.SimpleDefinedTypeContext = SimpleDefinedTypeContext;
grammar3rdParser.ActualParameterListContext = ActualParameterListContext;
grammar3rdParser.ActualParameterContext = ActualParameterContext;
grammar3rdParser.EncodingObjectReferenceContext = EncodingObjectReferenceContext;
grammar3rdParser.EncodingObjectSetReferenceContext = EncodingObjectSetReferenceContext;
grammar3rdParser.EncodingClassReferenceVariantContext = EncodingClassReferenceVariantContext;
grammar3rdParser.DefinedOrBuiltinEncodingClassContext = DefinedOrBuiltinEncodingClassContext;
grammar3rdParser.DefinedEncodingObjectContext = DefinedEncodingObjectContext;
grammar3rdParser.DefinedEncodingObjectSetContext = DefinedEncodingObjectSetContext;
grammar3rdParser.DefinedOrBuiltinEncodingObjectSetContext = DefinedOrBuiltinEncodingObjectSetContext;
grammar3rdParser.ElmModuleBodyContext = ElmModuleBodyContext;
grammar3rdParser.EncodingApplicationListContext = EncodingApplicationListContext;
grammar3rdParser.EncodingApplicationContext = EncodingApplicationContext;
grammar3rdParser.CombinedEncodingsContext = CombinedEncodingsContext;
grammar3rdParser.CompletionClauseContext = CompletionClauseContext;
grammar3rdParser.PrimaryEncodingsContext = PrimaryEncodingsContext;
grammar3rdParser.SecondaryEncodingsContext = SecondaryEncodingsContext;
grammar3rdParser.EdmModuleBodyContext = EdmModuleBodyContext;
grammar3rdParser.EdmAssignmentListContext = EdmAssignmentListContext;
grammar3rdParser.EdmAssignmentContext = EdmAssignmentContext;
grammar3rdParser.BuiltinEncodingClassReferenceContext = BuiltinEncodingClassReferenceContext;
grammar3rdParser.EncodingProcedureClassReferenceContext = EncodingProcedureClassReferenceContext;
grammar3rdParser.EncodingObjectAssignmentContext = EncodingObjectAssignmentContext;
grammar3rdParser.EncodingObjectContext = EncodingObjectContext;
grammar3rdParser.DifferentialEncodeDecodeObjectVariantContext = DifferentialEncodeDecodeObjectVariantContext;
grammar3rdParser.SpecForEncodingContext = SpecForEncodingContext;
grammar3rdParser.SpecForDecodersContext = SpecForDecodersContext;
grammar3rdParser.EncodingObjectSetAssignmentContext = EncodingObjectSetAssignmentContext;
grammar3rdParser.EncodingObjectSetContext = EncodingObjectSetContext;
grammar3rdParser.EncodingObjectSetSpecContext = EncodingObjectSetSpecContext;
grammar3rdParser.EncodingObjectsContext = EncodingObjectsContext;
grammar3rdParser.BuiltinEncodingObjectSetReferenceContext = BuiltinEncodingObjectSetReferenceContext;
grammar3rdParser.SimpleDefinedEncodingClassContext = SimpleDefinedEncodingClassContext;
//# sourceMappingURL=grammar3rdParser.js.map