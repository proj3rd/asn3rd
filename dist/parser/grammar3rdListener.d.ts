export default class grammar3rdListener {
    enterModuleDefinitions(ctx: any): void;
    exitModuleDefinitions(ctx: any): void;
    enterTypeReference(ctx: any): void;
    exitTypeReference(ctx: any): void;
    enterIdentifier(ctx: any): void;
    exitIdentifier(ctx: any): void;
    enterValueReference(ctx: any): void;
    exitValueReference(ctx: any): void;
    enterModuleReference(ctx: any): void;
    exitModuleReference(ctx: any): void;
    enterModuleDefinition(ctx: any): void;
    exitModuleDefinition(ctx: any): void;
    enterElmDefinition(ctx: any): void;
    exitElmDefinition(ctx: any): void;
    enterEdmDefinition(ctx: any): void;
    exitEdmDefinition(ctx: any): void;
    enterModuleIdentifier(ctx: any): void;
    exitModuleIdentifier(ctx: any): void;
    enterDefinitiveIdentification(ctx: any): void;
    exitDefinitiveIdentification(ctx: any): void;
    enterDefinitiveOid(ctx: any): void;
    exitDefinitiveOid(ctx: any): void;
    enterDefinitiveObjIdComponentList(ctx: any): void;
    exitDefinitiveObjIdComponentList(ctx: any): void;
    enterDefinitiveObjIdComponent(ctx: any): void;
    exitDefinitiveObjIdComponent(ctx: any): void;
    enterDefinitiveNameAndNumberForm(ctx: any): void;
    exitDefinitiveNameAndNumberForm(ctx: any): void;
    enterDefinitiveNumberForm(ctx: any): void;
    exitDefinitiveNumberForm(ctx: any): void;
    enterTagDefault(ctx: any): void;
    exitTagDefault(ctx: any): void;
    enterModuleBody(ctx: any): void;
    exitModuleBody(ctx: any): void;
    enterExports(ctx: any): void;
    exitExports(ctx: any): void;
    enterSymbolsExported(ctx: any): void;
    exitSymbolsExported(ctx: any): void;
    enterImports(ctx: any): void;
    exitImports(ctx: any): void;
    enterSymbolsImported(ctx: any): void;
    exitSymbolsImported(ctx: any): void;
    enterSymbolsFromModuleList(ctx: any): void;
    exitSymbolsFromModuleList(ctx: any): void;
    enterSymbolsFromModule(ctx: any): void;
    exitSymbolsFromModule(ctx: any): void;
    enterGlobalModuleReference(ctx: any): void;
    exitGlobalModuleReference(ctx: any): void;
    enterSymbolList(ctx: any): void;
    exitSymbolList(ctx: any): void;
    enterSymbol(ctx: any): void;
    exitSymbol(ctx: any): void;
    enterReference(ctx: any): void;
    exitReference(ctx: any): void;
    enterAssignmentList(ctx: any): void;
    exitAssignmentList(ctx: any): void;
    enterAssignment(ctx: any): void;
    exitAssignment(ctx: any): void;
    enterDefinedType(ctx: any): void;
    exitDefinedType(ctx: any): void;
    enterDefinedValue(ctx: any): void;
    exitDefinedValue(ctx: any): void;
    enterExternalTypeReference(ctx: any): void;
    exitExternalTypeReference(ctx: any): void;
    enterExternalValueReference(ctx: any): void;
    exitExternalValueReference(ctx: any): void;
    enterTypeAssignment(ctx: any): void;
    exitTypeAssignment(ctx: any): void;
    enterValueAssignment(ctx: any): void;
    exitValueAssignment(ctx: any): void;
    enterType(ctx: any): void;
    exitType(ctx: any): void;
    enterBuiltinType(ctx: any): void;
    exitBuiltinType(ctx: any): void;
    enterReferencedType(ctx: any): void;
    exitReferencedType(ctx: any): void;
    enterNamedType(ctx: any): void;
    exitNamedType(ctx: any): void;
    enterValue(ctx: any): void;
    exitValue(ctx: any): void;
    enterBuiltinValue(ctx: any): void;
    exitBuiltinValue(ctx: any): void;
    enterBooleanType(ctx: any): void;
    exitBooleanType(ctx: any): void;
    enterIntegerType(ctx: any): void;
    exitIntegerType(ctx: any): void;
    enterNamedNumberList(ctx: any): void;
    exitNamedNumberList(ctx: any): void;
    enterNamedNumber(ctx: any): void;
    exitNamedNumber(ctx: any): void;
    enterSignedNumber(ctx: any): void;
    exitSignedNumber(ctx: any): void;
    enterIntegerValue(ctx: any): void;
    exitIntegerValue(ctx: any): void;
    enterEnumeratedType(ctx: any): void;
    exitEnumeratedType(ctx: any): void;
    enterEnumerations(ctx: any): void;
    exitEnumerations(ctx: any): void;
    enterRootEnumeration(ctx: any): void;
    exitRootEnumeration(ctx: any): void;
    enterAdditionalEnumeration(ctx: any): void;
    exitAdditionalEnumeration(ctx: any): void;
    enterEnumeration(ctx: any): void;
    exitEnumeration(ctx: any): void;
    enterEnumerationItem(ctx: any): void;
    exitEnumerationItem(ctx: any): void;
    enterBitStringType(ctx: any): void;
    exitBitStringType(ctx: any): void;
    enterNamedBitList(ctx: any): void;
    exitNamedBitList(ctx: any): void;
    enterNamedBit(ctx: any): void;
    exitNamedBit(ctx: any): void;
    enterBitStringValue(ctx: any): void;
    exitBitStringValue(ctx: any): void;
    enterOctetStringType(ctx: any): void;
    exitOctetStringType(ctx: any): void;
    enterNullType(ctx: any): void;
    exitNullType(ctx: any): void;
    enterSequenceType(ctx: any): void;
    exitSequenceType(ctx: any): void;
    enterExtensionAndException(ctx: any): void;
    exitExtensionAndException(ctx: any): void;
    enterOptionalExtensionMarker(ctx: any): void;
    exitOptionalExtensionMarker(ctx: any): void;
    enterComponentTypeLists(ctx: any): void;
    exitComponentTypeLists(ctx: any): void;
    enterRootComponentTypeList(ctx: any): void;
    exitRootComponentTypeList(ctx: any): void;
    enterExtensionEndMarker(ctx: any): void;
    exitExtensionEndMarker(ctx: any): void;
    enterExtensionAdditions(ctx: any): void;
    exitExtensionAdditions(ctx: any): void;
    enterExtensionAdditionList(ctx: any): void;
    exitExtensionAdditionList(ctx: any): void;
    enterExtensionAddition(ctx: any): void;
    exitExtensionAddition(ctx: any): void;
    enterExtensionAdditionGroup(ctx: any): void;
    exitExtensionAdditionGroup(ctx: any): void;
    enterComponentTypeList(ctx: any): void;
    exitComponentTypeList(ctx: any): void;
    enterComponentType(ctx: any): void;
    exitComponentType(ctx: any): void;
    enterSequenceOfType(ctx: any): void;
    exitSequenceOfType(ctx: any): void;
    enterChoiceType(ctx: any): void;
    exitChoiceType(ctx: any): void;
    enterAlternativeTypeLists(ctx: any): void;
    exitAlternativeTypeLists(ctx: any): void;
    enterRootAlternativeTypeList(ctx: any): void;
    exitRootAlternativeTypeList(ctx: any): void;
    enterExtensionAdditionAlternatives(ctx: any): void;
    exitExtensionAdditionAlternatives(ctx: any): void;
    enterExtensionAdditionAlternativesList(ctx: any): void;
    exitExtensionAdditionAlternativesList(ctx: any): void;
    enterExtensionAdditionAlternative(ctx: any): void;
    exitExtensionAdditionAlternative(ctx: any): void;
    enterExtensionAdditionAlternativesGroup(ctx: any): void;
    exitExtensionAdditionAlternativesGroup(ctx: any): void;
    enterAlternativeTypeList(ctx: any): void;
    exitAlternativeTypeList(ctx: any): void;
    enterObjectIdentifierType(ctx: any): void;
    exitObjectIdentifierType(ctx: any): void;
    enterCharacterStringType(ctx: any): void;
    exitCharacterStringType(ctx: any): void;
    enterRestrictedCharacterStringType(ctx: any): void;
    exitRestrictedCharacterStringType(ctx: any): void;
    enterUsefulType(ctx: any): void;
    exitUsefulType(ctx: any): void;
    enterConstrainedType(ctx: any): void;
    exitConstrainedType(ctx: any): void;
    enterTypeWithConstraint(ctx: any): void;
    exitTypeWithConstraint(ctx: any): void;
    enterConstraint(ctx: any): void;
    exitConstraint(ctx: any): void;
    enterConstraintSpec(ctx: any): void;
    exitConstraintSpec(ctx: any): void;
    enterSubtypeConstraint(ctx: any): void;
    exitSubtypeConstraint(ctx: any): void;
    enterElementSetSpecs(ctx: any): void;
    exitElementSetSpecs(ctx: any): void;
    enterRootElementSetSpec(ctx: any): void;
    exitRootElementSetSpec(ctx: any): void;
    enterAdditionalElementSetSpec(ctx: any): void;
    exitAdditionalElementSetSpec(ctx: any): void;
    enterElementSetSpec(ctx: any): void;
    exitElementSetSpec(ctx: any): void;
    enterUnions(ctx: any): void;
    exitUnions(ctx: any): void;
    enterIntersections(ctx: any): void;
    exitIntersections(ctx: any): void;
    enterIntersectionElements(ctx: any): void;
    exitIntersectionElements(ctx: any): void;
    enterUnionMark(ctx: any): void;
    exitUnionMark(ctx: any): void;
    enterElements(ctx: any): void;
    exitElements(ctx: any): void;
    enterSubtypeElements(ctx: any): void;
    exitSubtypeElements(ctx: any): void;
    enterSingleValue(ctx: any): void;
    exitSingleValue(ctx: any): void;
    enterValueRange(ctx: any): void;
    exitValueRange(ctx: any): void;
    enterLowerEndpoint(ctx: any): void;
    exitLowerEndpoint(ctx: any): void;
    enterUpperEndpoint(ctx: any): void;
    exitUpperEndpoint(ctx: any): void;
    enterLowerEndValue(ctx: any): void;
    exitLowerEndValue(ctx: any): void;
    enterUpperEndValue(ctx: any): void;
    exitUpperEndValue(ctx: any): void;
    enterSizeConstraint(ctx: any): void;
    exitSizeConstraint(ctx: any): void;
    enterInnerTypeConstraints(ctx: any): void;
    exitInnerTypeConstraints(ctx: any): void;
    enterMultipleTypeConstraints(ctx: any): void;
    exitMultipleTypeConstraints(ctx: any): void;
    enterPartialSpecification(ctx: any): void;
    exitPartialSpecification(ctx: any): void;
    enterTypeConstraints(ctx: any): void;
    exitTypeConstraints(ctx: any): void;
    enterNamedConstraint(ctx: any): void;
    exitNamedConstraint(ctx: any): void;
    enterComponentConstraint(ctx: any): void;
    exitComponentConstraint(ctx: any): void;
    enterValueConstraint(ctx: any): void;
    exitValueConstraint(ctx: any): void;
    enterPresenceConstraint(ctx: any): void;
    exitPresenceConstraint(ctx: any): void;
    enterExceptionSpec(ctx: any): void;
    exitExceptionSpec(ctx: any): void;
    enterExceptionIdentification(ctx: any): void;
    exitExceptionIdentification(ctx: any): void;
    enterObjectClassReference(ctx: any): void;
    exitObjectClassReference(ctx: any): void;
    enterObjectSetReference(ctx: any): void;
    exitObjectSetReference(ctx: any): void;
    enterObjectReference(ctx: any): void;
    exitObjectReference(ctx: any): void;
    enterValueFieldReference(ctx: any): void;
    exitValueFieldReference(ctx: any): void;
    enterWord(ctx: any): void;
    exitWord(ctx: any): void;
    enterTypeFieldReference(ctx: any): void;
    exitTypeFieldReference(ctx: any): void;
    enterDefinedObjectClass(ctx: any): void;
    exitDefinedObjectClass(ctx: any): void;
    enterDefinedObjectSet(ctx: any): void;
    exitDefinedObjectSet(ctx: any): void;
    enterObjectClassAssignment(ctx: any): void;
    exitObjectClassAssignment(ctx: any): void;
    enterObjectClass(ctx: any): void;
    exitObjectClass(ctx: any): void;
    enterObjectClassDefn(ctx: any): void;
    exitObjectClassDefn(ctx: any): void;
    enterWithSyntaxSpec(ctx: any): void;
    exitWithSyntaxSpec(ctx: any): void;
    enterFieldSpec(ctx: any): void;
    exitFieldSpec(ctx: any): void;
    enterTypeFieldSpec(ctx: any): void;
    exitTypeFieldSpec(ctx: any): void;
    enterTypeOptionalitySpec(ctx: any): void;
    exitTypeOptionalitySpec(ctx: any): void;
    enterFixedTypeValueFieldSpec(ctx: any): void;
    exitFixedTypeValueFieldSpec(ctx: any): void;
    enterValueOptionalitySpec(ctx: any): void;
    exitValueOptionalitySpec(ctx: any): void;
    enterPrimitiveFieldName(ctx: any): void;
    exitPrimitiveFieldName(ctx: any): void;
    enterFieldName(ctx: any): void;
    exitFieldName(ctx: any): void;
    enterSyntaxList(ctx: any): void;
    exitSyntaxList(ctx: any): void;
    enterTokenOrGroupSpec(ctx: any): void;
    exitTokenOrGroupSpec(ctx: any): void;
    enterOptionalGroup(ctx: any): void;
    exitOptionalGroup(ctx: any): void;
    enterRequiredToken(ctx: any): void;
    exitRequiredToken(ctx: any): void;
    enterLiteral(ctx: any): void;
    exitLiteral(ctx: any): void;
    enterObjectAssignment(ctx: any): void;
    exitObjectAssignment(ctx: any): void;
    enterObject(ctx: any): void;
    exitObject(ctx: any): void;
    enterObjectDefn(ctx: any): void;
    exitObjectDefn(ctx: any): void;
    enterDefinedSyntax(ctx: any): void;
    exitDefinedSyntax(ctx: any): void;
    enterDefinedSyntaxToken(ctx: any): void;
    exitDefinedSyntaxToken(ctx: any): void;
    enterSetting(ctx: any): void;
    exitSetting(ctx: any): void;
    enterObjectSetAssignment(ctx: any): void;
    exitObjectSetAssignment(ctx: any): void;
    enterObjectSet(ctx: any): void;
    exitObjectSet(ctx: any): void;
    enterObjectSetSpec(ctx: any): void;
    exitObjectSetSpec(ctx: any): void;
    enterObjectSetElements(ctx: any): void;
    exitObjectSetElements(ctx: any): void;
    enterObjectClassFieldType(ctx: any): void;
    exitObjectClassFieldType(ctx: any): void;
    enterGeneralConstraint(ctx: any): void;
    exitGeneralConstraint(ctx: any): void;
    enterTableConstraint(ctx: any): void;
    exitTableConstraint(ctx: any): void;
    enterSimpleTableConstraint(ctx: any): void;
    exitSimpleTableConstraint(ctx: any): void;
    enterComponentRelationConstraint(ctx: any): void;
    exitComponentRelationConstraint(ctx: any): void;
    enterAtNotation(ctx: any): void;
    exitAtNotation(ctx: any): void;
    enterComponentIdList(ctx: any): void;
    exitComponentIdList(ctx: any): void;
    enterContentsConstraint(ctx: any): void;
    exitContentsConstraint(ctx: any): void;
    enterParameterizedAssignment(ctx: any): void;
    exitParameterizedAssignment(ctx: any): void;
    enterParameterizedTypeAssignment(ctx: any): void;
    exitParameterizedTypeAssignment(ctx: any): void;
    enterParameterList(ctx: any): void;
    exitParameterList(ctx: any): void;
    enterParameter(ctx: any): void;
    exitParameter(ctx: any): void;
    enterParamGovernor(ctx: any): void;
    exitParamGovernor(ctx: any): void;
    enterGovernor(ctx: any): void;
    exitGovernor(ctx: any): void;
    enterDummyReference(ctx: any): void;
    exitDummyReference(ctx: any): void;
    enterParameterizedReference(ctx: any): void;
    exitParameterizedReference(ctx: any): void;
    enterParameterizedTypeAmbiguous(ctx: any): void;
    exitParameterizedTypeAmbiguous(ctx: any): void;
    enterSimpleDefinedType(ctx: any): void;
    exitSimpleDefinedType(ctx: any): void;
    enterActualParameterList(ctx: any): void;
    exitActualParameterList(ctx: any): void;
    enterActualParameter(ctx: any): void;
    exitActualParameter(ctx: any): void;
    enterEncodingObjectReference(ctx: any): void;
    exitEncodingObjectReference(ctx: any): void;
    enterEncodingObjectSetReference(ctx: any): void;
    exitEncodingObjectSetReference(ctx: any): void;
    enterEncodingClassReferenceVariant(ctx: any): void;
    exitEncodingClassReferenceVariant(ctx: any): void;
    enterDefinedOrBuiltinEncodingClass(ctx: any): void;
    exitDefinedOrBuiltinEncodingClass(ctx: any): void;
    enterDefinedEncodingObject(ctx: any): void;
    exitDefinedEncodingObject(ctx: any): void;
    enterDefinedEncodingObjectSet(ctx: any): void;
    exitDefinedEncodingObjectSet(ctx: any): void;
    enterDefinedOrBuiltinEncodingObjectSet(ctx: any): void;
    exitDefinedOrBuiltinEncodingObjectSet(ctx: any): void;
    enterElmModuleBody(ctx: any): void;
    exitElmModuleBody(ctx: any): void;
    enterEncodingApplicationList(ctx: any): void;
    exitEncodingApplicationList(ctx: any): void;
    enterEncodingApplication(ctx: any): void;
    exitEncodingApplication(ctx: any): void;
    enterCombinedEncodings(ctx: any): void;
    exitCombinedEncodings(ctx: any): void;
    enterCompletionClause(ctx: any): void;
    exitCompletionClause(ctx: any): void;
    enterPrimaryEncodings(ctx: any): void;
    exitPrimaryEncodings(ctx: any): void;
    enterSecondaryEncodings(ctx: any): void;
    exitSecondaryEncodings(ctx: any): void;
    enterEdmModuleBody(ctx: any): void;
    exitEdmModuleBody(ctx: any): void;
    enterEdmAssignmentList(ctx: any): void;
    exitEdmAssignmentList(ctx: any): void;
    enterEdmAssignment(ctx: any): void;
    exitEdmAssignment(ctx: any): void;
    enterBuiltinEncodingClassReference(ctx: any): void;
    exitBuiltinEncodingClassReference(ctx: any): void;
    enterEncodingProcedureClassReference(ctx: any): void;
    exitEncodingProcedureClassReference(ctx: any): void;
    enterEncodingObjectAssignment(ctx: any): void;
    exitEncodingObjectAssignment(ctx: any): void;
    enterEncodingObject(ctx: any): void;
    exitEncodingObject(ctx: any): void;
    enterDifferentialEncodeDecodeObjectVariant(ctx: any): void;
    exitDifferentialEncodeDecodeObjectVariant(ctx: any): void;
    enterSpecForEncoding(ctx: any): void;
    exitSpecForEncoding(ctx: any): void;
    enterSpecForDecoders(ctx: any): void;
    exitSpecForDecoders(ctx: any): void;
    enterEncodingObjectSetAssignment(ctx: any): void;
    exitEncodingObjectSetAssignment(ctx: any): void;
    enterEncodingObjectSet(ctx: any): void;
    exitEncodingObjectSet(ctx: any): void;
    enterEncodingObjectSetSpec(ctx: any): void;
    exitEncodingObjectSetSpec(ctx: any): void;
    enterEncodingObjects(ctx: any): void;
    exitEncodingObjects(ctx: any): void;
    enterBuiltinEncodingObjectSetReference(ctx: any): void;
    exitBuiltinEncodingObjectSetReference(ctx: any): void;
    enterSimpleDefinedEncodingClass(ctx: any): void;
    exitSimpleDefinedEncodingClass(ctx: any): void;
}
//# sourceMappingURL=grammar3rdListener.d.ts.map